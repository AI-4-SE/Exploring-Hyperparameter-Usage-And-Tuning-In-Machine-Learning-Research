{
    "utils.py": {
        "sklearn": {},
        "tensorflow": {
            "cast_37": {
                "variable": {
                    "value": "gtrs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(gtrs > threshold, [gtrs.get_shape()[0], 32 * 32 * 32])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_38": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(pred > threshold, [pred.get_shape()[0], 32 * 32 * 32])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_39": {
                "x": {
                    "value": "tf.logical_or(gtrs, pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "tf.logical_and(gtrs, pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_51": {
                "variable": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(ious)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(ious, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_48": {
                "variable": {
                    "value": "iou",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iou_t_tf(gtrs_vox, pred_vox, threshold=t)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "input_tensor": {
                    "value": "tf.reduce_max(ious, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "tensor": {
                    "value": "gtrs > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "shape": {
                    "value": "[gtrs.get_shape()[0], 32 * 32 * 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_38": {
                "tensor": {
                    "value": "pred > threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "shape": {
                    "value": "[pred.get_shape()[0], 32 * 32 * 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_39": {
                "input_tensor": {
                    "value": "tf.cast(tf.logical_or(gtrs, pred), tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_40": {
                "input_tensor": {
                    "value": "tf.cast(tf.logical_and(gtrs, pred), tf.int64)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_52": {
                "input_tensor": {
                    "value": "ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(ious)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(ious, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_or_39": {
                "x": {
                    "value": "gtrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(gtrs.astype(np.bool), [-1, 32 * 32 * 32])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(gtrs > threshold, [gtrs.get_shape()[0], 32 * 32 * 32]), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(pred > threshold, [-1, 32 * 32 * 32])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(pred > threshold, [pred.get_shape()[0], 32 * 32 * 32]), tf.bool)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_and_40": {
                "x": {
                    "value": "gtrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(gtrs.astype(np.bool), [-1, 32 * 32 * 32])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(gtrs > threshold, [gtrs.get_shape()[0], 32 * 32 * 32]), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(pred > threshold, [-1, 32 * 32 * 32])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.reshape(pred > threshold, [pred.get_shape()[0], 32 * 32 * 32]), tf.bool)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data_loaders/data_loader.py": {
        "tensorflow": {
            "repeat_159": {
                "variable": {
                    "value": "self.encdec_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_159": {
                "variable": {
                    "value": "self.encdec_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "max(1, len(self.modelid_withpose))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "repeat_176": {
                "variable": {
                    "value": "self.gan_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shuffle_176": {
                "variable": {
                    "value": "self.gan_dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "max(1, len(self.modelid_nopose))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data_loaders/util.py": {
        "tensorflow": {}
    },
    "inference.py": {
        "tensorflow": {
            "placeholder_34": {
                "variable": {
                    "value": "handle_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "val_pass_z",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[val_pass_noise, y_val_1]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_72": {
                "variable": {
                    "value": "t04_iou_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iou_t_tf(val_vox, val_pass_vox, threshold=0.4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "t05_iou_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iou_t_tf(val_vox, val_pass_vox, threshold=0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_75": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model_D.py": {
        "tensorflow": {
            "maximum_6": {
                "x": {
                    "value": "tf.minimum(0.0, alpha * x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([x.get_shape()[0], self.x_dim[0], self.x_dim[1], self.x_dim[2]]))",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_6": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([x.get_shape()[0], self.x_dim[0], self.x_dim[1], self.x_dim[2]]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([x.get_shape()[0], self.x_dim[0], self.x_dim[1], self.x_dim[2]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_30": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([x.get_shape()[0], self.x_dim[0], self.x_dim[1], self.x_dim[2]]))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "strides": {
                    "value": "[self.ksize, self.ksize]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, self.dim, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "leaky_relu(conv1)",
                            "Call"
                        ],
                        [
                            "tcl.layer_norm(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[self.ksize, self.ksize]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "conv2d_51": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, self.dim * 2, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tcl.layer_norm(conv2)",
                            "Call"
                        ],
                        [
                            "leaky_relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.dim * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[self.ksize, self.ksize]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, self.dim * 4, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tcl.layer_norm(conv3)",
                            "Call"
                        ],
                        [
                            "leaky_relu(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([conv3.get_shape()[0], -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_27": {
                "values": {
                    "value": "[x.get_shape()[0], self.x_dim[0], self.x_dim[1], self.x_dim[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_48": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv1, self.dim * 2, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tcl.layer_norm(conv2)",
                            "Call"
                        ],
                        [
                            "leaky_relu(conv2)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "batch_normalization_58": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(conv2, self.dim * 4, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tcl.layer_norm(conv3)",
                            "Call"
                        ],
                        [
                            "leaky_relu(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_60": {
                "values": {
                    "value": "[conv3.get_shape()[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_normalization_38": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, self.dim, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "leaky_relu(conv1)",
                            "Call"
                        ],
                        [
                            "tcl.layer_norm(conv1)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model_E.py": {
        "tensorflow": {
            "reshape_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([x.get_shape()[0], self.x_dim[0], self.x_dim[1], self.x_dim[2]]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([x.get_shape()[0], self.x_dim[0], self.x_dim[1], self.x_dim[2]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(x, self.dim, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_57": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(conv1, self.dim * 2, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_66": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(conv2, self.dim * 4, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv3, [4, 4], [1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(conv2, self.dim * 4, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv3, [4, 4], [1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([conv3.get_shape()[0], -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_24": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([x.get_shape()[0], self.x_dim[0], self.x_dim[1], self.x_dim[2]]))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "ksizes",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_regularizer": {
                    "value": "tc.layers.l2_regularizer(scale=self.weight_decay)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.stack([x.get_shape()[0], self.x_dim[0], self.x_dim[1], self.x_dim[2]]))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "ksizes",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_47": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(x, self.dim, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_normalization_56": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(conv1, self.dim * 2, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv2)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_normalization_65": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(conv2, self.dim * 4, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv3, [4, 4], [1, 1])",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "average_pooling2d_70": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2d(conv2, self.dim * 4, [self.ksize, self.ksize], [2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv3)",
                            "Call"
                        ],
                        [
                            "tf.layers.average_pooling2d(conv3, [4, 4], [1, 1])",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_95": {
                "variable": {
                    "value": "pred_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pred_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tc.layers.fully_connected(flat_noise, self.out_dim, activation_fn=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.tanh(pred_noise)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_38": {
                "values": {
                    "value": "[x.get_shape()[0], self.x_dim[0], self.x_dim[1], self.x_dim[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_73": {
                "values": {
                    "value": "[conv3.get_shape()[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "fc_1_z",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc_1_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat",
                            "Name"
                        ],
                        [
                            "tc.layers.fully_connected(fc_1_z, h_dim, activation_fn=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(fc_1_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc_1_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_105": {
                "variable": {
                    "value": "fc_1_p",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc_1_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat",
                            "Name"
                        ],
                        [
                            "tc.layers.fully_connected(fc_1_p, h_dim, activation_fn=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(fc_1_p, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc_1_p)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "batch_normalization_83": {
                "variable": {
                    "value": "fc_1_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc_1_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat",
                            "Name"
                        ],
                        [
                            "tc.layers.fully_connected(fc_1_z, h_dim, activation_fn=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(fc_1_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc_1_z)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_normalization_104": {
                "variable": {
                    "value": "fc_1_p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc_1_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "flat",
                            "Name"
                        ],
                        [
                            "tc.layers.fully_connected(fc_1_p, h_dim, activation_fn=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(fc_1_p, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc_1_p)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model_G.py": {
        "tensorflow": {
            "relu_39": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tc.layers.fully_connected(z[:, :-self.vp_dim], 256 * 4 * 4 * 4, weights_initializer=tf.random_normal_initializer(stddev=0.02), activation_fn=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(fc1, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "vg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tc.layers.fully_connected(z[:, :-self.vp_dim], 256 * 4 * 4 * 4, weights_initializer=tf.random_normal_initializer(stddev=0.02), activation_fn=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(fc1, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, 4, 4, 4, 256])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv3d_transpose_41": {
                "variable": {
                    "value": "conv_vg1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(fc1, tf.stack([-1, 4, 4, 4, 256]))",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[self.ksize, self.ksize, self.ksize]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "conv_vg1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_vg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d_transpose(vg, self.dim * 2, [self.ksize, self.ksize, self.ksize], [2, 2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv_vg1, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_vg1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_transpose_49": {
                "variable": {
                    "value": "conv_vg2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_vg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d_transpose(vg, self.dim * 2, [self.ksize, self.ksize, self.ksize], [2, 2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv_vg1, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_vg1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[self.ksize, self.ksize, self.ksize]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "conv_vg2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_vg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d_transpose(conv_vg1, self.dim, [self.ksize, self.ksize, self.ksize], [2, 2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv_vg2, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_vg2)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv3d_transpose_57": {
                "variable": {
                    "value": "conv_vg3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv_vg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d_transpose(conv_vg1, self.dim, [self.ksize, self.ksize, self.ksize], [2, 2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv_vg2, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_vg2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[self.ksize, self.ksize, self.ksize]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "conv_vg3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv_vg3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d_transpose(conv_vg2, 1, [self.ksize, self.ksize, self.ksize], [2, 2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(conv_vg3)",
                            "Call"
                        ],
                        [
                            "conv_vg3[:, :, :, :, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_26": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_normalization_38": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tc.layers.fully_connected(z[:, :-self.vp_dim], 256 * 4 * 4 * 4, weights_initializer=tf.random_normal_initializer(stddev=0.02), activation_fn=tf.identity)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(fc1, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(fc1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_normalization_46": {
                "variable": {
                    "value": "conv_vg1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv_vg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d_transpose(vg, self.dim * 2, [self.ksize, self.ksize, self.ksize], [2, 2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv_vg1, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_vg1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "batch_normalization_54": {
                "variable": {
                    "value": "conv_vg2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv_vg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv3d_transpose(conv_vg1, self.dim, [self.ksize, self.ksize, self.ksize], [2, 2, 2], padding='same', activation=None)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(conv_vg2, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(conv_vg2)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_40": {
                "values": {
                    "value": "[-1, 4, 4, 4, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_33": {
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "lib/projector.py": {
        "tensorflow": {
            "stack_15": {
                "variable": {
                    "value": "R_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[1.0, 0.0, 0.0], [0.0, tf.cos(x), -tf.sin(x)], [0.0, tf.sin(x), tf.cos(x)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_21": {
                "variable": {
                    "value": "R_y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[tf.cos(y), 0.0, tf.sin(y)], [0.0, 1.0, 0.0], [-tf.sin(y), 0.0, tf.cos(y)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_27": {
                "variable": {
                    "value": "R_z",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[tf.cos(z), -tf.sin(z), 0.0], [tf.sin(z), tf.cos(z), 0.0], [0.0, 0.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "vg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "vg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vg, tf.stack([tf.shape(vg)[0], size, size, size]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([tf.shape(vg)[0], size, size, size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_42": {
                "variable": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_43": {
                "variable": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_44": {
                "variable": {
                    "value": "z_range",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "meshgrid_45": {
                "variable": {
                    "value": "(pos_x, pos_y, pos_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*args": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(-size / 2, size / 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(-size / 2, size / 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_46": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.stack([tf.reshape(pos_x, [-1]), tf.reshape(pos_y, [-1]), tf.reshape(pos_z, [-1])], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_51": {
                "variable": {
                    "value": "vgs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "vg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vg, tf.stack([tf.shape(vg)[0], size, size, size]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_52": {
                "variable": {
                    "value": "view_points",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "vp",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_131": {
                "variable": {
                    "value": "rotated",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "output_vg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_137": {
                "variable": {
                    "value": "output_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.exp(-tf.reduce_sum(rotated, 3) * temperature)",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(output_imgs, tf.stack([rotated.get_shape()[0], 32, 32, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([rotated.get_shape()[0], 32, 32, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_235": {
                "variable": {
                    "value": "vg_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "vg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vg, tf.stack([tf.shape(vg)[0], size, size, size]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 3, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_244": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vg_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(vg, perm=[1, 2, 3, 0])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "coor_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coor.astype(np.int)[0, ..., 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "transpose_250": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(curr_vg, target_grid_inbound)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg_t, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(gathered, perm=[3, 0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[3, 0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_nd_277": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "vg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vg, tf.stack([tf.shape(vg)[0], size, size, size]))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "coor_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coor.astype(np.int)[0, ..., 1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_35": {
                "a": {
                    "value": "R_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([[1.0, 0.0, 0.0], [0.0, tf.cos(x), -tf.sin(x)], [0.0, tf.sin(x), tf.cos(x)]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "R_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([[tf.cos(z), -tf.sin(z), 0.0], [tf.sin(z), tf.cos(z), 0.0], [0.0, 0.0, 1.0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_91": {
                "variable": {
                    "value": "target_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tf.matmul(grid, rotation))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_or_92": {
                "variable": {
                    "value": "x_oob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(target_grid[:, 0], tf.cast(-nx / 2, tf.int32))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(target_grid[:, 0], tf.cast(nx / 2, tf.int32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_or_94": {
                "variable": {
                    "value": "y_oob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(target_grid[:, 1], tf.cast(-ny / 2, tf.int32))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(target_grid[:, 1], tf.cast(ny / 2, tf.int32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_or_96": {
                "variable": {
                    "value": "z_oob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(target_grid[:, 2], tf.cast(-nz / 2, tf.int32))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater_equal(target_grid[:, 2], tf.cast(nz / 2, tf.int32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_98": {
                "variable": {
                    "value": "xyz_inbound",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_not(tf.logical_or(x_oob, tf.logical_or(y_oob, z_oob)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_104": {
                "variable": {
                    "value": "idx_lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.scalar_mul(tf.cast(tf.constant(-size / 2), tf.float32), tf.ones(tf.shape(target_grid)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_108": {
                "variable": {
                    "value": "idx_upper_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.scalar_mul(tf.cast(tf.constant(size / 2 - 1), tf.float32), tf.ones(tf.shape(target_grid)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_112": {
                "variable": {
                    "value": "target_grid_inbound",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.scalar_mul(tf.cast(tf.constant(-size / 2), tf.float32), tf.ones(tf.shape(target_grid))), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.matmul(grid, rotation)), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_113": {
                "variable": {
                    "value": "target_grid_inbound",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "idx_upper_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.scalar_mul(tf.cast(tf.constant(size / 2 - 1), tf.float32), tf.ones(tf.shape(target_grid))), tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target_grid_inbound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(idx_lower_bound, target_grid)",
                            "Call"
                        ],
                        [
                            "tf.minimum(idx_upper_bound, target_grid_inbound)",
                            "Call"
                        ],
                        [
                            "tf.cast(target_grid_inbound, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.add(target_grid_inbound, tf.cast(tf.scalar_mul(tf.cast(tf.constant(size / 2), tf.float32), tf.ones(tf.shape(target_grid))), tf.int32))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_114": {
                "variable": {
                    "value": "target_grid_inbound",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target_grid_inbound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(idx_lower_bound, target_grid)",
                            "Call"
                        ],
                        [
                            "tf.minimum(idx_upper_bound, target_grid_inbound)",
                            "Call"
                        ],
                        [
                            "tf.cast(target_grid_inbound, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.add(target_grid_inbound, tf.cast(tf.scalar_mul(tf.cast(tf.constant(size / 2), tf.float32), tf.ones(tf.shape(target_grid))), tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_115": {
                "variable": {
                    "value": "target_grid_inbound",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "target_grid_inbound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(idx_lower_bound, target_grid)",
                            "Call"
                        ],
                        [
                            "tf.minimum(idx_upper_bound, target_grid_inbound)",
                            "Call"
                        ],
                        [
                            "tf.cast(target_grid_inbound, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.add(target_grid_inbound, tf.cast(tf.scalar_mul(tf.cast(tf.constant(size / 2), tf.float32), tf.ones(tf.shape(target_grid))), tf.int32))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(tf.scalar_mul(tf.cast(tf.constant(size / 2), tf.float32), tf.ones(tf.shape(target_grid))), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_nd_121": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "curr_vg",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "target_grid_inbound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(idx_lower_bound, target_grid)",
                            "Call"
                        ],
                        [
                            "tf.minimum(idx_upper_bound, target_grid_inbound)",
                            "Call"
                        ],
                        [
                            "tf.cast(target_grid_inbound, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.add(target_grid_inbound, tf.cast(tf.scalar_mul(tf.cast(tf.constant(size / 2), tf.float32), tf.ones(tf.shape(target_grid))), tf.int32))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_129": {
                "variable": {
                    "value": "masked",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(curr_vg, target_grid_inbound)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg_t, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(gathered, perm=[3, 0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "xyz_inbound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.logical_not(tf.logical_or(x_oob, tf.logical_or(y_oob, z_oob))), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_40": {
                "values": {
                    "value": "[tf.shape(vg)[0], size, size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_46": {
                "values": {
                    "value": "[tf.reshape(pos_x, [-1]), tf.reshape(pos_y, [-1]), tf.reshape(pos_z, [-1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_136": {
                "x": {
                    "value": "-tf.reduce_sum(rotated, 3) * temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_137": {
                "values": {
                    "value": "[rotated.get_shape()[0], 32, 32, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_255": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(curr_vg, target_grid_inbound)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg_t, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(gathered, perm=[3, 0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_286": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(curr_vg, target_grid_inbound)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg_t, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(gathered, perm=[3, 0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_349": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n * s / float(d) / float(out_size)",
                            "BinOp"
                        ],
                        [
                            "project_perspective(rotated, self.coor, batch_size=self.batch_size, size=self.resolution, projector_pooling=self.projector_pooling, temperature=self.temperature, verbose=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(p, -1)",
                            "Call"
                        ],
                        [
                            "project_perspective_fast(rotated, self.mask_batch, self.coor_batch, batch_size=self.batch_size, size=self.resolution, projector_pooling=self.projector_pooling, temperature=self.temperature, verbose=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(p, -1)",
                            "Call"
                        ],
                        [
                            "projection_orthographic(rotated, size=self.vox_size, temperature=self.temperature)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_41": {
                "input": {
                    "value": "vg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vg, tf.stack([tf.shape(vg)[0], size, size, size]))",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_91": {
                "x": {
                    "value": "tf.matmul(grid, rotation)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_92": {
                "x": {
                    "value": "target_grid[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(-nx / 2, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_93": {
                "x": {
                    "value": "target_grid[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(nx / 2, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_94": {
                "x": {
                    "value": "target_grid[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(-ny / 2, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_95": {
                "x": {
                    "value": "target_grid[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(ny / 2, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_96": {
                "x": {
                    "value": "target_grid[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(-nz / 2, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_equal_97": {
                "x": {
                    "value": "target_grid[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(nz / 2, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_99": {
                "x": {
                    "value": "tf.logical_or(x_oob, tf.logical_or(y_oob, z_oob))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_104": {
                "scalar": {
                    "value": "tf.cast(tf.constant(-size / 2), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones(tf.shape(target_grid))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_108": {
                "scalar": {
                    "value": "tf.cast(tf.constant(size / 2 - 1), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones(tf.shape(target_grid))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_116": {
                "x": {
                    "value": "tf.scalar_mul(tf.cast(tf.constant(size / 2), tf.float32), tf.ones(tf.shape(target_grid)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_124": {
                "name": {
                    "value": "'grid_%d_x' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "target_grid_inbound[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_125": {
                "name": {
                    "value": "'grid_%d_y' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "target_grid_inbound[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_126": {
                "name": {
                    "value": "'grid_%d_z' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "target_grid_inbound[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "histogram_127": {
                "name": {
                    "value": "'gathered_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(curr_vg, target_grid_inbound)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg_t, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(gathered, perm=[3, 0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_130": {
                "tensor": {
                    "value": "masked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(gathered, xyz_inbound)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([nx, ny, nz])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_253": {
                "x": {
                    "value": "-tf.reduce_sum(gathered, axis=-1) * temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_257": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(curr_vg, target_grid_inbound)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg_t, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(gathered, perm=[3, 0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_284": {
                "x": {
                    "value": "-tf.reduce_sum(gathered, axis=-1) * temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_288": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(curr_vg, target_grid_inbound)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg_t, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(gathered, perm=[3, 0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_355": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n * s / float(d) / float(out_size)",
                            "BinOp"
                        ],
                        [
                            "project_perspective(rotated, self.coor, batch_size=self.batch_size, size=self.resolution, projector_pooling=self.projector_pooling, temperature=self.temperature, verbose=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(p, -1)",
                            "Call"
                        ],
                        [
                            "project_perspective_fast(rotated, self.mask_batch, self.coor_batch, batch_size=self.batch_size, size=self.resolution, projector_pooling=self.projector_pooling, temperature=self.temperature, verbose=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(p, -1)",
                            "Call"
                        ],
                        [
                            "projection_orthographic(rotated, size=self.vox_size, temperature=self.temperature)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_17": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(n)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_18": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(n)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_18": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(n)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_22": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(n)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_22": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(n)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_24": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(n)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_28": {
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d + l * s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_29": {
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d + l * s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_29": {
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d + l * s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_47": {
                "tensor": {
                    "value": "pos_z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_91": {
                "a": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.stack([tf.reshape(pos_x, [-1]), tf.reshape(pos_y, [-1]), tf.reshape(pos_z, [-1])], axis=1), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rotation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotate(rotation_angle, 0.0, 0.0)",
                            "Call"
                        ],
                        [
                            "rotate(0.0, rotation_angle, 0.0)",
                            "Call"
                        ],
                        [
                            "rotate(0.0, 0.0, rotation_angle)",
                            "Call"
                        ],
                        [
                            "rotate(rx_angle, ry_angle, rz_angle)",
                            "Call"
                        ],
                        [
                            "rotate(rx_angle, ry_angle, rz_angle)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_92": {
                "x": {
                    "value": "-nx / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_93": {
                "x": {
                    "value": "nx / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_94": {
                "x": {
                    "value": "-ny / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_95": {
                "x": {
                    "value": "ny / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "-nz / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "nz / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_or_99": {
                "x": {
                    "value": "y_oob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.less(target_grid[:, 1], tf.cast(-ny / 2, tf.int32)), tf.greater_equal(target_grid[:, 1], tf.cast(ny / 2, tf.int32)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "z_oob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.less(target_grid[:, 2], tf.cast(-nz / 2, tf.int32)), tf.greater_equal(target_grid[:, 2], tf.cast(nz / 2, tf.int32)))",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_105": {
                "x": {
                    "value": "tf.constant(-size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_106": {
                "shape": {
                    "value": "tf.shape(target_grid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_109": {
                "x": {
                    "value": "tf.constant(size / 2 - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_110": {
                "shape": {
                    "value": "tf.shape(target_grid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_mul_116": {
                "scalar": {
                    "value": "tf.cast(tf.constant(size / 2), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones(tf.shape(target_grid))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_130": {
                "values": {
                    "value": "[nx, ny, nz]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sin_17": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(n)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_24": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(n)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_28": {
                "x": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d + l * s",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_40": {
                "input": {
                    "value": "vg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(vg, tf.stack([tf.shape(vg)[0], size, size, size]))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_105": {
                "value": {
                    "value": "-size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_106": {
                "input": {
                    "value": "target_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.matmul(grid, rotation)), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_109": {
                "value": {
                    "value": "size / 2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_110": {
                "input": {
                    "value": "target_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.matmul(grid, rotation)), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_117": {
                "x": {
                    "value": "tf.constant(size / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_118": {
                "shape": {
                    "value": "tf.shape(target_grid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_136": {
                "input_tensor": {
                    "value": "rotated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(output_vg)",
                            "Call"
                        ],
                        [
                            "rotate_grid(vox, vp, rotation_axis=self.rotation_axis, viewpoints=self.viewpoints, rx_range=self.rx_range, ry_range=self.ry_range, rz_range=self.rz_range)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_61": {
                "x": {
                    "value": "(curr_z + 1.0) * viewpoints / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_80": {
                "variable": {
                    "value": "ry_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(curr_z[1] - ry_range[0]) / step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_117": {
                "value": {
                    "value": "size / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_118": {
                "input": {
                    "value": "target_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(tf.matmul(grid, rotation)), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_253": {
                "input_tensor": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(curr_vg, target_grid_inbound)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg_t, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(gathered, perm=[3, 0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_284": {
                "input_tensor": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(curr_vg, target_grid_inbound)",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg_t, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(gathered, perm=[3, 0, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.gather_nd(vg, coor_batch)",
                            "Call"
                        ],
                        [
                            "gathered * mask_batch",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "floor_64": {
                "x": {
                    "value": "(curr_z + 1.0) * viewpoints / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_67": {
                "x": {
                    "value": "(curr_z + 1.0) * viewpoints / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "net.py": {
        "tensorflow": {
            "placeholder_32": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_107": {
                "variable": {
                    "value": "self.pose_inv_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.mean_squared_error(self.pred_noise_1, self.pred_noise_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GPUOptions_182": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_183": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "merge_184": {
                "variable": {
                    "value": "self.gan_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.gan_summary_lst",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_185": {
                "variable": {
                    "value": "self.auto_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.auto_summary_lst",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_194": {
                "variable": {
                    "value": "self.log_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.log_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_195": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_196": {
                "variable": {
                    "value": "self.best_max_iou_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_197": {
                "variable": {
                    "value": "self.best_avg_prc_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_198": {
                "variable": {
                    "value": "self.best_iou_t04_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_199": {
                "variable": {
                    "value": "self.best_iou_t05_saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_272": {
                "variable": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(d_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_273": {
                "variable": {
                    "value": "d_real",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(d_real)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_274": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(d_fake - a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_275": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(d_real - b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_300": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_, labels=tf.ones_like(d_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_303": {
                "variable": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=d_, labels=tf.zeros_like(d_))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_306": {
                "variable": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=d, labels=tf.ones_like(d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_335": {
                "variable": {
                    "value": "self.val_max_iou",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_336": {
                "variable": {
                    "value": "self.val_t04_iou",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_337": {
                "variable": {
                    "value": "self.val_t05_iou",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_338": {
                "variable": {
                    "value": "self.val_avg_prc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_339": {
                "variable": {
                    "value": "self.val_iou_thr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_341": {
                "variable": {
                    "value": "self.val_max_iou_best",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_342": {
                "variable": {
                    "value": "self.val_t04_iou_best",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_343": {
                "variable": {
                    "value": "self.val_t05_iou_best",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_344": {
                "variable": {
                    "value": "self.val_avg_prc_best",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_345": {
                "variable": {
                    "value": "self.val_iou_thr_best",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_370": {
                "variable": {
                    "value": "self.val_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "val_lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_140": {
                "variable": {
                    "value": "self.loss_adv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.d_val, labels=tf.ones_like(self.d_val))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_146": {
                "variable": {
                    "value": "self.auto_d_loss_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.d_val, labels=tf.zeros_like(self.d_val))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_150": {
                "variable": {
                    "value": "self.auto_d_loss_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=self.d, labels=tf.ones_like(self.d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_209": {
                "variable": {
                    "value": "self.e_global_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_210": {
                "variable": {
                    "value": "self.e_decayed_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config.e_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.e_global_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.config.decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self.config.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_225": {
                "variable": {
                    "value": "self.d_global_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_226": {
                "variable": {
                    "value": "self.d_decayed_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config.d_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.d_global_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.config.decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self.config.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_244": {
                "variable": {
                    "value": "self.g_global_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_245": {
                "variable": {
                    "value": "self.g_decayed_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config.g_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.g_global_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.config.decay_steps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self.config.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_379": {
                "values": {
                    "value": "[noise_t, pose_t]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_390": {
                "variable": {
                    "value": "fake_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_391": {
                "variable": {
                    "value": "real_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_395": {
                "variable": {
                    "value": "slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(gradients), reduction_indices=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_396": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(slopes - 1.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_41": {
                "name": {
                    "value": "gan_fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.x_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_42": {
                "name": {
                    "value": "gan_real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.x_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "histogram_47": {
                "name": {
                    "value": "sample_z",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_76": {
                "name": {
                    "value": "val_z_1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_z_1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_77": {
                "name": {
                    "value": "val_z_2",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_z_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_79": {
                "name": {
                    "value": "val_fake_1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_imgs_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_81": {
                "name": {
                    "value": "val_fake_2",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_imgs_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_82": {
                "name": {
                    "value": "real_1",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.x_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_83": {
                "name": {
                    "value": "real_2",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.x_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_108": {
                "y_true": {
                    "value": "self.pred_noise_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.pred_noise_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_131": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_132": {
                "name": {
                    "value": "content_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_content",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_170": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_net.vars",
                            "Attribute"
                        ],
                        [
                            "self.e_net.vars",
                            "Attribute"
                        ],
                        [
                            "self.d_net.vars",
                            "Attribute"
                        ]
                    ]
                }
            },
            "control_dependencies_202": {
                "control_inputs": {
                    "value": "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_214": {
                "variable": {
                    "value": "self.e_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.e_decayed_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_231": {
                "variable": {
                    "value": "self.d_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.d_decayed_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamOptimizer_249": {
                "variable": {
                    "value": "self.g_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.g_decayed_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_274": {
                "x": {
                    "value": "d_fake - a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_275": {
                "x": {
                    "value": "d_real - b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_277": {
                "input_tensor": {
                    "value": "tf.square(d_fake - c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_282": {
                "name": {
                    "value": "d_loss_real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(d_real - b))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d, labels=tf.ones_like(d)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_283": {
                "name": {
                    "value": "d_loss_fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(d_fake - a))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d_, labels=tf.zeros_like(d_)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_284": {
                "name": {
                    "value": "d_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "d_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (d_loss_fake + d_loss_real)",
                            "BinOp"
                        ],
                        [
                            "0.5 * (d_loss_fake + d_loss_real)",
                            "BinOp"
                        ],
                        [
                            "d_loss + self.config.scale * self.gan_gp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_285": {
                "name": {
                    "value": "d_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "d_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_mean(tf.cast(d_fake < (a + b) / 2.0, tf.float32)) + 0.5 * tf.reduce_mean(tf.cast(d_real >= (a + b) / 2.0, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_mean(tf.cast(d_ < 0, tf.float32)) + 0.5 * tf.reduce_mean(tf.cast(d >= 0, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.d_acc, feed_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_286": {
                "name": {
                    "value": "g_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_mean(tf.square(d_fake - c))",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d_, labels=tf.ones_like(d_)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_301": {
                "logits": {
                    "value": "d_",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(d_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_304": {
                "logits": {
                    "value": "d_",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(d_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_307": {
                "logits": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_313": {
                "name": {
                    "value": "gan_gp",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.gan_gp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_318": {
                "name": {
                    "value": "d_loss_real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "d_loss_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(d_real - b))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d, labels=tf.ones_like(d)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_319": {
                "name": {
                    "value": "d_loss_fake",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "d_loss_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(d_fake - a))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d_, labels=tf.zeros_like(d_)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_320": {
                "name": {
                    "value": "d_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "d_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (d_loss_fake + d_loss_real)",
                            "BinOp"
                        ],
                        [
                            "0.5 * (d_loss_fake + d_loss_real)",
                            "BinOp"
                        ],
                        [
                            "d_loss + self.config.scale * self.gan_gp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_321": {
                "name": {
                    "value": "d_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "d_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_mean(tf.cast(d_fake < (a + b) / 2.0, tf.float32)) + 0.5 * tf.reduce_mean(tf.cast(d_real >= (a + b) / 2.0, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_mean(tf.cast(d_ < 0, tf.float32)) + 0.5 * tf.reduce_mean(tf.cast(d >= 0, tf.float32))",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.d_acc, feed_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_322": {
                "name": {
                    "value": "g_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_mean(tf.square(d_fake - c))",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=d_, labels=tf.ones_like(d_)))",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_358": {
                "name": {
                    "value": "val_max_iou",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_max_iou",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_359": {
                "name": {
                    "value": "val_t04_iou",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_t04_iou",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_360": {
                "name": {
                    "value": "val_t05_iou",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_t05_iou",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_361": {
                "name": {
                    "value": "val_avg_prc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_avg_prc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_362": {
                "name": {
                    "value": "val_iou_thr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_iou_thr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_364": {
                "name": {
                    "value": "val_max_iou_best",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_max_iou_best",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_365": {
                "name": {
                    "value": "val_t04_iou_best",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_t04_iou_best",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_366": {
                "name": {
                    "value": "val_t05_iou_best",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_t05_iou_best",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_367": {
                "name": {
                    "value": "val_avg_prc_best",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_avg_prc_best",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_368": {
                "name": {
                    "value": "val_iou_thr_best",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.val_iou_thr_best",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_400": {
                "variable": {
                    "value": "real_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_real",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config.batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_406": {
                "variable": {
                    "value": "slopes",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(gradients), reduction_indices=[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_407": {
                "variable": {
                    "value": "gradient_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(slopes - 1.0) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "input_tensor": {
                    "value": "tf.abs(x - y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "input_tensor": {
                    "value": "tf.losses.mean_squared_error(x, y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "input_tensor": {
                    "value": "tf.losses.mean_squared_error(self.val_vox_1, self.val_vox_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_119": {
                "input_tensor": {
                    "value": "tf.losses.absolute_difference(self.val_vox_1, self.val_vox_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_135": {
                "name": {
                    "value": "pose_inv_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.pose_inv_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_137": {
                "name": {
                    "value": "vox_inv_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vox_inv_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_141": {
                "logits": {
                    "value": "self.d_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(self.d_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_147": {
                "logits": {
                    "value": "self.d_val",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.zeros_like(self.d_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_151": {
                "logits": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.ones_like(self.d)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_158": {
                "name": {
                    "value": "auto_gp",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.auto_gp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_164": {
                "name": {
                    "value": "adv_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss_adv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_165": {
                "name": {
                    "value": "auto_d_acc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.auto_d_acc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_166": {
                "name": {
                    "value": "auto_d_loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.auto_d_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_183": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_202": {
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_216": {
                "variable": {
                    "value": "self.e_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.e_decayed_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_235": {
                "variable": {
                    "value": "self.d_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.d_decayed_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_253": {
                "variable": {
                    "value": "self.g_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.g_decayed_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_260": {
                "name": {
                    "value": "e_global_steps",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.e_global_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_262": {
                "name": {
                    "value": "d_global_steps",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_global_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_264": {
                "name": {
                    "value": "g_global_steps",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_global_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_265": {
                "name": {
                    "value": "e_decayed_lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.e_decayed_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_266": {
                "name": {
                    "value": "d_decayed_lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.d_decayed_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_267": {
                "name": {
                    "value": "g_decayed_lr",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.g_decayed_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_277": {
                "x": {
                    "value": "d_fake - c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_279": {
                "input_tensor": {
                    "value": "tf.cast(d_fake < (a + b) / 2.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_280": {
                "input_tensor": {
                    "value": "tf.cast(d_real >= (a + b) / 2.0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_315": {
                "input_tensor": {
                    "value": "tf.cast(d_ < 0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_316": {
                "input_tensor": {
                    "value": "tf.cast(d >= 0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_394": {
                "ys": {
                    "value": "self.d_net(interpolates)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[interpolates]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_395": {
                "input_tensor": {
                    "value": "tf.square(gradients)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_91": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_squared_error_93": {
                "y_true": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_squared_error_115": {
                "y_true": {
                    "value": "self.val_vox_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.val_vox_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "absolute_difference_120": {
                "labels": {
                    "value": "self.val_vox_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self.val_vox_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_160": {
                "input_tensor": {
                    "value": "tf.cast(self.d_val < 0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_161": {
                "input_tensor": {
                    "value": "tf.cast(self.d >= 0, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "histogram_174": {
                "name": {
                    "value": "v.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_net.vars",
                            "Attribute"
                        ],
                        [
                            "self.e_net.vars",
                            "Attribute"
                        ],
                        [
                            "self.d_net.vars",
                            "Attribute"
                        ]
                    ]
                }
            },
            "histogram_176": {
                "name": {
                    "value": "v.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g_net.vars",
                            "Attribute"
                        ],
                        [
                            "self.e_net.vars",
                            "Attribute"
                        ],
                        [
                            "self.d_net.vars",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_279": {
                "x": {
                    "value": "d_fake < (a + b) / 2.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_280": {
                "x": {
                    "value": "d_real >= (a + b) / 2.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_301": {
                "input": {
                    "value": "d_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_304": {
                "input": {
                    "value": "d_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_307": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_315": {
                "x": {
                    "value": "d_ < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_316": {
                "x": {
                    "value": "d >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_395": {
                "x": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.d_net(interpolates), [interpolates])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(self.d_net(x_noise), [x_noise])[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gradients_405": {
                "ys": {
                    "value": "self.d_net(x_noise)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "[x_noise]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_406": {
                "input_tensor": {
                    "value": "tf.square(gradients)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_142": {
                "input": {
                    "value": "self.d_val",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_148": {
                "input": {
                    "value": "self.d_val",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_152": {
                "input": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_160": {
                "x": {
                    "value": "self.d_val < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_161": {
                "x": {
                    "value": "self.d >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_406": {
                "x": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.d_net(interpolates), [interpolates])[0]",
                            "Subscript"
                        ],
                        [
                            "tf.gradients(self.d_net(x_noise), [x_noise])[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}