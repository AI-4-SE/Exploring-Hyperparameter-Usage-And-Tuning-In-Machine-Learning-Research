{
    "DNN_Ground_data_8sectors.py": {
        "tensorflow": {
            "placeholder_29": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_61": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_62": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "global_variables_initializer_65": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_66": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_13": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_input])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(tf.random_uniform(shape=tf.shape(x), minval=0, maxval=0.1, dtype=tf.float32), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_36": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(corrupt(x), weights['h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(corrupt(x), weights['h1']), biases['b1'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_39": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(layer_1, weights['h2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "import_meta_graph_72": {
                "variable": {
                    "value": "saver_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "./DNN_save/DNN_GD8_save.meta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "equal_95": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_96": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "initial_value": {
                    "value": "tf.random_normal([n_input, n_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1, n_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_49": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_2, n_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_54": {
                "initial_value": {
                    "value": "tf.random_normal([n_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_61": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multilayer_perceptron(x, weights, biases)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_13": {
                "x": {
                    "value": "tf.random_uniform(shape=tf.shape(x), minval=0, maxval=0.1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "a": {
                    "value": "corrupt(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "weights['h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "a": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(corrupt(x), weights['h1']), biases['b1'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_42": {
                "a": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "latest_checkpoint_73": {
                "checkpoint_dir": {
                    "value": "./DNN_save/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_95": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_classes])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_96": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_112": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multilayer_perceptron(x, weights, biases)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_13": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_input])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "DenoisingAE.py": {
        "tensorflow": {
            "add_7": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, dimensions[0]], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(tf.random_uniform(shape=tf.shape(x), minval=0, maxval=0.1, dtype=tf.float32), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, dimensions[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "corrupt_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_51": {
                "variable": {
                    "value": "p_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "encoder_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "current_input",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdamOptimizer_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "Session_91": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_93": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_13": {
                "input_tensor": {
                    "value": "p * tf.log(tf.abs(p)) - p * tf.log(tf.abs(p_hat)) + (1 - p) * tf.log(1 - p) - (1 - p) * tf.log(1 - p_hat)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([n_input, n_output], -1.0 / math.sqrt(n_input), 1.0 / math.sqrt(n_input))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_29": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_output])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_31": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(current_input, W) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_42": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoder[layer_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_output])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_44": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(current_input, W) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_7": {
                "x": {
                    "value": "tf.random_uniform(shape=tf.shape(x), minval=0, maxval=0.1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "input_tensor": {
                    "value": "tf.square(reconstruction - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_29": {
                "shape": {
                    "value": "[n_output]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "shape": {
                    "value": "[n_output]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_56": {
                "x": {
                    "value": "reconstruction - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_13": {
                "x": {
                    "value": "tf.abs(p_hat)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_31": {
                "a": {
                    "value": "current_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corrupt(x) * corrupt_prob + x * (1 - corrupt_prob)",
                            "BinOp"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([n_input, n_output], -1.0 / math.sqrt(n_input), 1.0 / math.sqrt(n_input)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(encoder[layer_i])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_44": {
                "a": {
                    "value": "current_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corrupt(x) * corrupt_prob + x * (1 - corrupt_prob)",
                            "BinOp"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([n_input, n_output], -1.0 / math.sqrt(n_input), 1.0 / math.sqrt(n_input)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(encoder[layer_i])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_7": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, dimensions[0]], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_13": {
                "x": {
                    "value": "p_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(encoder_out, 0)",
                            "Call"
                        ],
                        [
                            "p_hat",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "add_7": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_input], name='DNN_x')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, dimensions[0]], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.cast(tf.random_uniform(shape=tf.shape(x), minval=0, maxval=0.1, dtype=tf.float32), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, dimensions[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "corrupt_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_45": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(tf.square(y - x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_62": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_64": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_66": {
                "variable": {
                    "value": "saver_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "./DAE_save/DenoisingAE_save_noise_add.meta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_84": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, weights['h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "DNN1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(x, weights['h1']), biases['b1'], name='DNN1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_1, name='DNN2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "DNN2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_87": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(layer_1, weights['h2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "DNN3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_88": {
                "variable": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'], name='DNN3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_2, name='DNN4')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "DNN4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_input]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "DNN_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_classes]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "DNN_y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=y)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "DNN_cost",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_142": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                },
                "name": {
                    "value": "DNN_optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_145": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_146": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_24": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([n_input, n_output], -1.0 / math.sqrt(n_input), 1.0 / math.sqrt(n_input))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_25": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_output])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_27": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(current_input, W) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_37": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "encoder[layer_i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_output])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_39": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(current_input, W) + b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reset_default_graph_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "equal_177": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_178": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_7": {
                "x": {
                    "value": "tf.random_uniform(shape=tf.shape(x), minval=0, maxval=0.1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_45": {
                "input_tensor": {
                    "value": "tf.square(y - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_67": {
                "checkpoint_dir": {
                    "value": "./DAE_save/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_input], name='DNN_x')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, dimensions[0]], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "a": {
                    "value": "layer_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(x, weights['h1']), biases['b1'], name='DNN1')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_1, name='DNN2')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "a": {
                    "value": "layer_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'], name='DNN3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(layer_2, name='DNN4')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "DNN5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_127": {
                "initial_value": {
                    "value": "tf.random_normal([n_input, n_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "DNN_w1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_128": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1, n_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "DNN_w2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_129": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_2, n_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "DNN_w3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_132": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "DNN_b1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_133": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "DNN_b2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_134": {
                "initial_value": {
                    "value": "tf.random_normal([n_classes])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "DNN_b3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_141": {
                "logits": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multilayer_perceptron(x, weights, biases)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_classes], name='DNN_y')",
                            "Call"
                        ],
                        [
                            "current_input",
                            "variable"
                        ]
                    ]
                }
            },
            "Session_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_172": {
                "variable": {
                    "value": "saver_restore",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "./DAEandDNN_save/DAEandDNN_save.meta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "shape": {
                    "value": "[n_output]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "shape": {
                    "value": "[n_output]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_45": {
                "x": {
                    "value": "y - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_177": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_classes], name='DNN_y')",
                            "Call"
                        ],
                        [
                            "current_input",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_178": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_27": {
                "a": {
                    "value": "current_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corrupt(x) * corrupt_prob + x * (1 - corrupt_prob)",
                            "BinOp"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([n_input, n_output], -1.0 / math.sqrt(n_input), 1.0 / math.sqrt(n_input)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(encoder[layer_i])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_39": {
                "a": {
                    "value": "current_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corrupt(x) * corrupt_prob + x * (1 - corrupt_prob)",
                            "BinOp"
                        ],
                        [
                            "output",
                            "variable"
                        ],
                        [
                            "output",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([n_input, n_output], -1.0 / math.sqrt(n_input), 1.0 / math.sqrt(n_input)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(encoder[layer_i])",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_173": {
                "checkpoint_dir": {
                    "value": "./DAEandDNN_save/",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_186": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "multilayer_perceptron(x, weights, biases)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_7": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_input], name='DNN_x')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None, dimensions[0]], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}