{
    "Discussion&Response/get_statistics.py": {
        "sklearn": {
            "mean_squared_error_141": {
                "y_true": {
                    "value": "bscores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "ascores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_squared_error_143": {
                "y_true": {
                    "value": "bbor_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "abor_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "RebuttalAnalysis/AggregateFeatures/aggregate_features.py": {
        "sklearn": {
            "mean_squared_error_184": {
                "y_true": {
                    "value": "np.array(feature_matrix)[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "cleanImcompleteEntries(pid_list, feature_matrix, targets)",
                            "Call"
                        ],
                        [
                            "targets",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "RebuttalAnalysis/RevRespSimilarity/embed.py": {
        "sklearn": {
            "cosine_similarity_25": {
                "X": {
                    "value": "avg_list[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "Y": {
                    "value": "avg_list[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "RebuttalAnalysis/RevRespSimilarity/review_response_similarity.py": {
        "sklearn": {
            "cosine_similarity_82": {
                "X": {
                    "value": "rev_emb.reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "Y": {
                    "value": "resp_emb.reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "RebuttalAnalysis/classify_after_label.py": {
        "sklearn": {
            "PCA_34": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "target_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "copy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StandardScaler_216": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_107": {
                "variable": {
                    "value": "(pre, rec, f1, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels[test_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "clf.predict(test_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "class_names[:-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "['inc', 'dec', 'nc']",
                            "List"
                        ],
                        [
                            "['inc', 'dec', 'nc', 'macroAvg']",
                            "List"
                        ]
                    ]
                }
            },
            "GaussianProcessClassifier_258": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SVC_260": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SVC_262": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SVC_264": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "poly",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SVC_266": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RandomForestClassifier_268": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DecisionTreeClassifier_270": {
                "variable": {
                    "value": "clf",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "RebuttalAnalysis/predict_after_score.py": {
        "sklearn": {
            "RFE_49": {
                "variable": {
                    "value": "rfe",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sklearn.linear_model.LinearRegression()",
                            "Call"
                        ]
                    ]
                },
                "n_features_to_select": {
                    "value": "target_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PCA_60": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "target_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "copy": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_squared_error_87": {
                "variable": {
                    "value": "sp_error",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self_prevs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[:, [nn == 'self_prev' for nn in names]]",
                            "Subscript"
                        ],
                        [
                            "features[:, [nn == 'all_max' for nn in names]]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix[:, -1]",
                            "Subscript"
                        ],
                        [
                            "scores[indices]",
                            "Subscript"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_squared_error_88": {
                "variable": {
                    "value": "am_error",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "all_means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[:, [nn == 'all_mean' for nn in names]]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix[:, -1]",
                            "Subscript"
                        ],
                        [
                            "scores[indices]",
                            "Subscript"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "StandardScaler_168": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "f_regression_192": {
                "variable": {
                    "value": "(F, pvalue)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "StandardScaler().fit_transform(features)",
                            "Call"
                        ],
                        [
                            "features[indices]",
                            "Subscript"
                        ],
                        [
                            "features[:, indices]",
                            "Subscript"
                        ],
                        [
                            "selectByVIF(features, feature_names, feature_num)",
                            "Call"
                        ],
                        [
                            "selectByPCA(features, feature_names, feature_num)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix[:, -1]",
                            "Subscript"
                        ],
                        [
                            "scores[indices]",
                            "Subscript"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_val_score_233": {
                "variable": {
                    "value": "scores_cv",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GaussianProcessRegressor(kernel=kernel, n_restarts_optimizer=9)",
                            "Call"
                        ],
                        [
                            "SVR(kernel='rbf', C=1000.0, gamma=0.1)",
                            "Call"
                        ],
                        [
                            "SVR(kernel='linear', C=1000.0)",
                            "Call"
                        ],
                        [
                            "SVR(kernel='poly', C=1000.0, degree=2)",
                            "Call"
                        ],
                        [
                            "RandomForestRegressor(max_depth=6, random_state=0)",
                            "Call"
                        ],
                        [
                            "DecisionTreeRegressor(random_state=0)",
                            "Call"
                        ],
                        [
                            "sklearn.linear_model.LinearRegression()",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix[:, :-1]",
                            "Subscript"
                        ],
                        [
                            "StandardScaler().fit_transform(features)",
                            "Call"
                        ],
                        [
                            "features[indices]",
                            "Subscript"
                        ],
                        [
                            "features[:, indices]",
                            "Subscript"
                        ],
                        [
                            "selectByVIF(features, feature_names, feature_num)",
                            "Call"
                        ],
                        [
                            "selectByPCA(features, feature_names, feature_num)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix[:, -1]",
                            "Subscript"
                        ],
                        [
                            "scores[indices]",
                            "Subscript"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                },
                "cv": {
                    "value": "cv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "50",
                            "int"
                        ]
                    ]
                },
                "scoring": {
                    "value": "neg_mean_squared_error",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GaussianProcessRegressor_219": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "C(1.0, (0.001, 1000.0)) * RBF(10, (0.01, 100.0))",
                            "BinOp"
                        ]
                    ]
                },
                "n_restarts_optimizer": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SVR_221": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "rbf",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_squared_error_211": {
                "y_true": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regr.predict(features)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix[:, -1]",
                            "Subscript"
                        ],
                        [
                            "scores[indices]",
                            "Subscript"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "r2_score_211": {
                "y_true": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "regr.predict(features)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrix[:, -1]",
                            "Subscript"
                        ],
                        [
                            "scores[indices]",
                            "Subscript"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ],
                        [
                            "scores",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RBF_218": {
                "length_scale": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "length_scale_bounds": {
                    "value": "(0.01, 100.0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SVR_223": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SVR_225": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel": {
                    "value": "poly",
                    "type": "str",
                    "possible_values": []
                },
                "C": {
                    "value": "1000.0",
                    "type": "float",
                    "possible_values": []
                },
                "degree": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomForestRegressor_227": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DecisionTreeRegressor_229": {
                "variable": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}