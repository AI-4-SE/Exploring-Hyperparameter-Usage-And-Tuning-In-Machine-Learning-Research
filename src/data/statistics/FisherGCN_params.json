{
    "gcn/data_io.py": {
        "sklearn": {
            "MultiLabelBinarizer_398": {
                "variable": {
                    "value": "binarizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse_output": {
                    "value": "sparse_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LabelBinarizer_400": {
                "variable": {
                    "value": "binarizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "sparse_output": {
                    "value": "sparse_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "gcn/layers.py": {
        "tensorflow": {
            "get_75": {
                "variable": {
                    "value": "self.kernel_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'glorot_uniform'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_76": {
                "variable": {
                    "value": "self.bias_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'zeros'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_77": {
                "variable": {
                    "value": "self.kernel_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_78": {
                "variable": {
                    "value": "self.bias_regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_regularizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_79": {
                "variable": {
                    "value": "self.kernel_constraint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "kernel_constraint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_80": {
                "variable": {
                    "value": "self.bias_constraint",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "bias_constraint",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "InputSpec_89": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_ndim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InputSpec_92": {
                "variable": {
                    "value": "self.input_spec",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_ndim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axes": {
                    "value": "{-1: self.input_dim}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "add_n_180": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "supports",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_24": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1 - self.rate",
                            "BinOp"
                        ],
                        [
                            "mask + tf.random_uniform(tf.shape(inputs.values), seed=self.seed)",
                            "BinOp"
                        ],
                        [
                            "tf.floor(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "SparseTensor_27": {
                "indices": {
                    "value": "inputs.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "smart_cond(training, _dropout, lambda : inputs.values)",
                    "type": "Call",
                    "possible_values": []
                },
                "dense_shape": {
                    "value": "inputs.dense_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_38": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.sparse_tensor_dense_matmul(inputs, self.kernel)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, self.bias)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_121": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_125": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sparse_retain(x, dropout_mask) * (1.0 / (1 - self.dropout))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(x, rate=self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_169": {
                "variable": {
                    "value": "_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(FisherU)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "pre_sup",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_ker",
                            "Name"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, _ker)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, _ker)",
                            "Call"
                        ],
                        [
                            "pre_sup * _inv_degree",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_23": {
                "input": {
                    "value": "inputs.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_120": {
                "input": {
                    "value": "x.values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floor_121": {
                "x": {
                    "value": "random_tensor",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "1 - self.dropout",
                            "BinOp"
                        ],
                        [
                            "random_tensor + tf.random_uniform(tf.shape(x.values))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_134": {
                "variable": {
                    "value": "pre_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sparse_retain(x, dropout_mask) * (1.0 / (1 - self.dropout))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(x, rate=self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "_ker",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_171": {
                "a": {
                    "value": "FisherU",
                    "type": "Variable",
                    "possible_values": []
                },
                "b": {
                    "value": "_noise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(FisherU), pre_sup)",
                            "Call"
                        ],
                        [
                            "_noise * inc_sigma[:, idx:idx + 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "uniform_145": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[int(N * FLAGS.flip_prob), 2]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "maxval": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input_rows",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_147": {
                "variable": {
                    "value": "cA",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.sparse.add(_sup, tf.SparseTensor(indices, values, [N, N]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_152": {
                "variable": {
                    "value": "cA",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cA",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.abs(tf.sparse.add(_sup, tf.SparseTensor(indices, values, [N, N])))",
                            "Call"
                        ],
                        [
                            "tf.sparse.add(cA, tf.sparse.eye(N))",
                            "Call"
                        ],
                        [
                            "tf.sparse.add(cA, tf.sparse.transpose(cA))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sparse.eye(N)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_153": {
                "variable": {
                    "value": "cA",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cA",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.abs(tf.sparse.add(_sup, tf.SparseTensor(indices, values, [N, N])))",
                            "Call"
                        ],
                        [
                            "tf.sparse.add(cA, tf.sparse.eye(N))",
                            "Call"
                        ],
                        [
                            "tf.sparse.add(cA, tf.sparse.transpose(cA))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.sparse.transpose(cA)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_154": {
                "variable": {
                    "value": "_inv_degree",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.pow(tf.sparse.reduce_sum(cA, axis=1), -0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_169": {
                "a": {
                    "value": "FisherU",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_146": {
                "shape": {
                    "value": "(int(N * FLAGS.flip_prob),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_147": {
                "x": {
                    "value": "_sup",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.SparseTensor(indices, values, [N, N])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_152": {
                "num_rows": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input_rows",
                            "Attribute"
                        ]
                    ]
                }
            },
            "transpose_153": {
                "a": {
                    "value": "cA",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.abs(tf.sparse.add(_sup, tf.SparseTensor(indices, values, [N, N])))",
                            "Call"
                        ],
                        [
                            "tf.sparse.add(cA, tf.sparse.eye(N))",
                            "Call"
                        ],
                        [
                            "tf.sparse.add(cA, tf.sparse.transpose(cA))",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_154": {
                "x": {
                    "value": "tf.sparse.reduce_sum(cA, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SparseTensor_147": {
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random.uniform([int(N * FLAGS.flip_prob), 2], 0, N, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "values": {
                    "value": "values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.ones((int(N * FLAGS.flip_prob),), dtype=tf.float32)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dense_shape": {
                    "value": "[N, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_154": {
                "input_tensor": {
                    "value": "cA",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.math.abs(tf.sparse.add(_sup, tf.SparseTensor(indices, values, [N, N])))",
                            "Call"
                        ],
                        [
                            "tf.sparse.add(cA, tf.sparse.eye(N))",
                            "Call"
                        ],
                        [
                            "tf.sparse.add(cA, tf.sparse.transpose(cA))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "gcn/metrics.py": {
        "tensorflow": {
            "softmax_cross_entropy_with_logits_v2_6": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cast_7": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_14": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(tf.argmax(preds, 1), tf.argmax(labels, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_15": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_9": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_14": {
                "x": {
                    "value": "tf.argmax(preds, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_17": {
                "input_tensor": {
                    "value": "mask * correct_prediction",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_14": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "gcn/models.py": {
        "tensorflow": {
            "Dense_123": {
                "units": {
                    "value": "dout",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "din",
                    "type": "Variable",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None if l == len(dims) - 2 else tf.nn.relu",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Dropout_121": {
                "rate": {
                    "value": "FLAGS.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gcn/train.py": {
        "tensorflow": {
            "ConfigProto_202": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "disable_v2_behavior_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "uniform_66": {
                "variable": {
                    "value": "perturb",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.fisher_rank, FLAGS.fisher_perturbation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_67": {
                "variable": {
                    "value": "_scaling",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.get_variable('perturbation_scaling', shape=(FLAGS.fisher_rank, 1), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_71": {
                "variable": {
                    "value": "perturb",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.fisher_rank, FLAGS.fisher_perturbation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "minval": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_75": {
                "variable": {
                    "value": "ptensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "w / w.sum()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.fisher_rank, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "constant_78": {
                "variable": {
                    "value": "metric_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1 / np.sqrt(w / w.sum())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.fisher_rank, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reset_default_graph_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_275": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_93": {
                "value": {
                    "value": "V",
                    "type": "Call",
                    "possible_values": [
                        [
                            "block_krylov(A, FLAGS.fisher_rank)",
                            "Call"
                        ],
                        [
                            "block_krylov(L, FLAGS.fisher_rank)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "FisherV",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_placeholder_98": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.constant(features[2], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, n_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_100": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_with_default_102": {
                "input": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_placeholder_177": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Graph_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_214": {
                "seed": {
                    "value": "init_seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "name": {
                    "value": "perturbation_scaling",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(FLAGS.fisher_rank, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_81": {
                "x": {
                    "value": "noise_level * metric_w * perturb",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "input_tensor": {
                    "value": "new_p",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "ptensor * tf.exp(noise_level * metric_w * perturb)",
                            "BinOp"
                        ],
                        [
                            "new_p / tf.reduce_sum(new_p, axis=0)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_216": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_98": {
                "value": {
                    "value": "features[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_219": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}