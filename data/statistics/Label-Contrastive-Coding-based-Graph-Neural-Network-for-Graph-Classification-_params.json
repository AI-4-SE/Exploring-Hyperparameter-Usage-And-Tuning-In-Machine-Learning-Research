{
    "for_gin/util.py": {
        "sklearn": {
            "StratifiedKFold_127": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "normalize_166": {
                "variable": {
                    "value": "hidden_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(hidden_feats, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(hidden_feats, dim=1)",
                            "Call"
                        ],
                        [
                            "hidden_feats",
                            "Method Argument"
                        ],
                        [
                            "hidden_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_183": {
                "variable": {
                    "value": "hidden_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(hidden_feats, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.normalize(hidden_feats, dim=1)",
                            "Call"
                        ],
                        [
                            "hidden_feats",
                            "Method Argument"
                        ],
                        [
                            "hidden_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_190": {
                "variable": {
                    "value": "l_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(q * q / args.temperature)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_191": {
                "variable": {
                    "value": "l_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(torch.mm(q, queue.transpose(0, 1)) / args.temperature)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_193": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1.0 * torch.log(l_pos / l_neg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_215": {
                "variable": {
                    "value": "queue[selected_batch_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_batch_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_batch_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_100": {
                "variable": {
                    "value": "g.edge_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "g.node_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(g.node_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(tagset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_173": {
                "variable": {
                    "value": "l_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(torch.mm(q, k.transpose(0, 1)) / args.temperature)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_174": {
                "variable": {
                    "value": "l_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(torch.mm(q, queue.transpose(0, 1)) / args.temperature)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_226": {
                "variable": {
                    "value": "queue[i][selected_batch_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_feats_dict[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_175": {
                "input": {
                    "value": "-1.0 * torch.log(l_pos / l_neg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_190": {
                "input": {
                    "value": "q * q / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_191": {
                "input": {
                    "value": "torch.mm(q, queue.transpose(0, 1)) / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_173": {
                "input": {
                    "value": "torch.mm(q, k.transpose(0, 1)) / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_174": {
                "input": {
                    "value": "torch.mm(q, queue.transpose(0, 1)) / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_193": {
                "input": {
                    "value": "l_pos / l_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_175": {
                "input": {
                    "value": "l_pos / l_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_191": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_feats[batch_idx_by_label[i]]",
                            "Subscript"
                        ],
                        [
                            "hidden_feats",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "queue.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_173": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_feats[batch_idx_by_label[i]]",
                            "Subscript"
                        ],
                        [
                            "hidden_feats",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_174": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_feats[batch_idx_by_label[i]]",
                            "Subscript"
                        ],
                        [
                            "hidden_feats",
                            "variable"
                        ]
                    ]
                },
                "mat2": {
                    "value": "queue.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "for_hgp-sl/util.py": {
        "sklearn": {
            "StratifiedKFold_127": {
                "variable": {
                    "value": "skf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "normalize_166": {
                "variable": {
                    "value": "hidden_feats",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_feats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.normalize(hidden_feats, dim=1)",
                            "Call"
                        ],
                        [
                            "hidden_feats",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_100": {
                "variable": {
                    "value": "g.edge_mat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "g.node_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(g.node_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "len(tagset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_174": {
                "variable": {
                    "value": "l_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(torch.mm(q, k.transpose(0, 1)) / args.temperature)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_175": {
                "variable": {
                    "value": "l_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.exp(torch.mm(q, queue.transpose(0, 1)) / args.temperature)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_220": {
                "variable": {
                    "value": "queue[i][start:end]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_feats_dict[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_177": {
                "input": {
                    "value": "-1.0 * torch.log(l_pos / l_neg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_174": {
                "input": {
                    "value": "torch.mm(q, k.transpose(0, 1)) / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_175": {
                "input": {
                    "value": "torch.mm(q, queue.transpose(0, 1)) / args.temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_177": {
                "input": {
                    "value": "l_pos / l_neg",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_174": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_feats[batch_idx_by_label[i]]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_175": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_feats[batch_idx_by_label[i]]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "queue.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "for_gin/models/graphcnn_pooled_multilayer.py": {
        "torch": {
            "Parameter_31": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.num_layers - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.mlps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.linears_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "Adj_block_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_mat_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_94": {
                "variable": {
                    "value": "Adj_block_elem",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "Adj_block_idx.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_132": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "h_with_dummy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h, dummy.reshape((1, -1)).to(self.device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_166": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "self.next_layer_eps(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "h in enumerate(hidden_rep)",
                            "Call"
                        ],
                        [
                            "self.next_layer_eps(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_190": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "self.next_layer_eps(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "h in enumerate(hidden_rep)",
                            "Call"
                        ],
                        [
                            "self.next_layer_eps(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_195": {
                "variable": {
                    "value": "X_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[graph.node_features for graph in batch_graph]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_101": {
                "variable": {
                    "value": "elem",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_idx[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_102": {
                "variable": {
                    "value": "Adj_block_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Adj_block_idx, self_loop_edge]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "Adj_block_elem",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Adj_block_elem, elem]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "self.num_layers - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_140": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "self.batch_norms[layer](pooled_rep)",
                            "Call"
                        ],
                        [
                            "F.relu(h)",
                            "Call"
                        ],
                        [
                            "X_concat",
                            "variable"
                        ],
                        [
                            "self.next_layer_eps(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "h in enumerate(hidden_rep)",
                            "Call"
                        ],
                        [
                            "self.next_layer_eps(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, padded_neighbor_list=padded_neighbor_list)",
                            "Call"
                        ],
                        [
                            "self.next_layer(h, layer, Adj_block=Adj_block)",
                            "Call"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ],
                        [
                            "h",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_142": {
                "input": {
                    "value": "h_with_dummy[padded_neighbor_list]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_226": {
                "input": {
                    "value": "self.linears_prediction[layer](pooled_h)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "self.final_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_45": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_51": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_157": {
                "*size": {
                    "value": "(Adj_block.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_181": {
                "*size": {
                    "value": "(Adj_block.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "for_gin/models/mlp.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_30": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_48": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norms[layer](self.linears[layer](h))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_38": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "for_gin/train_powerfulgnn_oneenc.py": {
        "torch": {
            "CrossEntropyLoss_13": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch_graph)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pass_data_iteratively(model, train_graphs)",
                            "Call"
                        ],
                        [
                            "pass_data_iteratively(model, test_graphs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_137": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_138": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_124": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_all_126": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_144": {
                "variable": {
                    "value": "queue[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "queue[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "for_gin/train_powerfulgnn_twoenc.py": {
        "torch": {
            "CrossEntropyLoss_14": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_q(batch_graph)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "pass_data_iteratively(model, train_graphs)",
                            "Call"
                        ],
                        [
                            "pass_data_iteratively(model, test_graphs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_126": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_145": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_q.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_146": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(model_q.parameters(), lr=args.lr)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_128": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_all_130": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_152": {
                "variable": {
                    "value": "queue[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "queue[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "for_hgp-sl/layers.py": {
        "torch": {
            "cat_24": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_index, index]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_channels, out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(x, self.weight)",
                            "Call"
                        ],
                        [
                            "x[perm]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_128": {
                "variable": {
                    "value": "expand_deg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_weight.size(0),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_129": {
                "variable": {
                    "value": "expand_deg[-num_nodes:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_nodes,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_166": {
                "variable": {
                    "value": "self.att",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, self.in_channels * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_177": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x_information_score)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "edge_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[edge_attr, value]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_68": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_118": {
                "variable": {
                    "value": "edge_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_211": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), x.size(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "shift_cum_num_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[num_nodes.new_zeros(1), num_nodes.cumsum(dim=0)[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "variable": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0), x.size(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_241": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.cat([x[row], x[col]], dim=1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(weights, self.negative_slop) + new_edge_attr * self.lamb",
                            "BinOp"
                        ],
                        [
                            "dense_to_sparse(adj)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x[row], x[col]], dim=1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(weights, self.negative_slop)",
                            "Call"
                        ],
                        [
                            "adj[row, col]",
                            "Subscript"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_177": {
                "input": {
                    "value": "x_information_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.calc_information_score(x, edge_index, edge_attr)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_198": {
                "variable": {
                    "value": "edge_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_224": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_228": {
                "variable": {
                    "value": "induced_edge_attr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(induced_edge_index.size(1),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "induced_edge_index.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "leaky_relu_210": {
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(torch.cat([x[row], x[col]], dim=1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(weights, self.negative_slop) + new_edge_attr * self.lamb",
                            "BinOp"
                        ],
                        [
                            "dense_to_sparse(adj)",
                            "Call"
                        ],
                        [
                            "(torch.cat([x[row], x[col]], dim=1) * self.att).sum(dim=-1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(weights, self.negative_slop)",
                            "Call"
                        ],
                        [
                            "adj[row, col]",
                            "Subscript"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slop",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_209": {
                "tensors": {
                    "value": "[x[row], x[col]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "tensors": {
                    "value": "[x[row], x[col]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "for_hgp-sl/models.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.lin1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nhid * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.lin2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nhid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.lin3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x, edge_index, edge_attr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gmp(x, batch), gap(x, batch)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x, edge_index, edge_attr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gmp(x, batch), gap(x, batch)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x, edge_index, edge_attr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gmp(x, batch), gap(x, batch)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "data_x",
                            "variable"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.pool1(x, edge_index, edge_attr, batch)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.pool2(x, edge_index, edge_attr, batch)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.relu(x1) + F.relu(x2) + F.relu(x3)",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.lin3(x), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.x",
                            "Attribute"
                        ],
                        [
                            "data_x",
                            "variable"
                        ],
                        [
                            "F.relu(self.conv1(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.pool1(x, edge_index, edge_attr, batch)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "self.pool2(x, edge_index, edge_attr, batch)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3(x, edge_index, edge_attr))",
                            "Call"
                        ],
                        [
                            "F.relu(x1) + F.relu(x2) + F.relu(x3)",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.lin1(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.relu(self.lin2(x))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, p=self.dropout_ratio, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.lin3(x), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.lin3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_52": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([gmp(x, batch), gap(x, batch)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "for_hgp-sl/sparse_softmax.py": {
        "torch": {
            "cat_31": {
                "variable": {
                    "value": "cum_num_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[num_nodes.new_zeros(1), num_nodes.cumsum(dim=0)[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_33": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.arange(1, i + 1, dtype=torch.long, device=batch.device) for i in num_nodes]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(idx, dim=0)",
                            "Call"
                        ],
                        [
                            "support_size + cum_num_nodes - 1",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "cum_num_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[num_nodes.new_zeros(1), num_nodes.cumsum(dim=0)[:-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.7301, 0.6792, -1.0565, 1.6614, -0.3196, -0.779, -0.3877, -0.4943, 0.1831, -0.0061]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "input_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(4, dtype=torch.long), torch.ones(6, dtype=torch.long)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_103": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - tau[batch]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_115": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "output != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_input - v_hat[batch]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_output.clone()",
                            "Call"
                        ],
                        [
                            "torch.where(output != 0, grad_input - v_hat[batch], grad_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_55": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "i + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_135": {
                "*size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "for_hgp-sl/train_hgp-sl_oneenc.py": {
        "torch": {
            "manual_seed_36": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_38": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_157": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_69": {
                "variable": {
                    "value": "celoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_102": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}.winpth'.format(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "nll_loss_138": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_159": {
                "input": {
                    "value": "torch.randn(num_training, args.nhid)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_160": {
                "input": {
                    "value": "torch.randn(num_training, args.nhid // 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_161": {
                "input": {
                    "value": "torch.randn(num_training, args.num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_166": {
                "f": {
                    "value": "'{}.winpth'.format(best_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_159": {
                "*size": {
                    "value": "num_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(len(dataset) * 0.8)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_160": {
                "*size": {
                    "value": "num_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(len(dataset) * 0.8)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.nhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_161": {
                "*size": {
                    "value": "num_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(len(dataset) * 0.8)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "for_hgp-sl/train_hgp-sl_twoenc.py": {
        "torch": {
            "manual_seed_37": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_39": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_145": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_71": {
                "variable": {
                    "value": "celoss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_122": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "data.y",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_147": {
                "input": {
                    "value": "torch.randn(num_training, args.nhid)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_148": {
                "input": {
                    "value": "torch.randn(num_training, args.nhid // 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_149": {
                "input": {
                    "value": "torch.randn(num_training, args.num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_147": {
                "*size": {
                    "value": "num_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(len(dataset) * 0.8)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.nhid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_148": {
                "*size": {
                    "value": "num_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(len(dataset) * 0.8)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.nhid // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_149": {
                "*size": {
                    "value": "num_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(len(dataset) * 0.8)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}