{
    "evaluate.py": {
        "torch": {
            "manual_seed_24": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "77",
                            "int"
                        ]
                    ]
                }
            },
            "manual_seed_all_25": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "77",
                            "int"
                        ]
                    ]
                }
            },
            "load_215": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "all_metrics[metric]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(all_metrics[metric], b_metric)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "set_detect_anomaly_46": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervisedRR/datasets/abstract.py": {
        "torch": {}
    },
    "unsupervisedRR/datasets/builder.py": {
        "torch": {
            "DataLoader_53": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VideoDataset(cfg, root_path, data_dict, split)",
                            "Call"
                        ],
                        [
                            "build_dataset(cfg, split, overfit)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "split == 'train' and (not overfit)",
                            "BoolOp"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "cfg.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervisedRR/datasets/video_dataset.py": {
        "torch": {
            "Tensor_56": {
                "variable": {
                    "value": "dep",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "output[K]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s_instance[f_ids[0]]['intrinsic'][:3, :3].copy()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_90": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.linalg.inv(P) @ P_rel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "interpolate_57": {
                "input": {
                    "value": "dep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dep[:, left:right]",
                            "Subscript"
                        ],
                        [
                            "torch.Tensor(dep[None, None, :, :]).float()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.interpolate(dep, (self.image_dim, self.image_dim))[0]",
                            "Subscript"
                        ],
                        [
                            "self.get_img(s_instance[id_i]['dep_path'])",
                            "Call"
                        ],
                        [
                            "self.dep_transform(dep)",
                            "Call"
                        ],
                        [
                            "dep / 1000.0",
                            "BinOp"
                        ],
                        [
                            "dep",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.image_dim, self.image_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervisedRR/models/alignment.py": {
        "torch": {
            "eye_161": {
                "variable": {
                    "value": "reflect",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_165": {
                "variable": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_c.transpose(1, 2).contiguous()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "Y_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights * (Y - Y_mean)",
                            "BinOp"
                        ],
                        [
                            "Y - Y_mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "svd_168": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(X_c.transpose(1, 2).contiguous(), Y_c)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_172": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.svd(H)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "U_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.transpose(2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "det_175": {
                "variable": {
                    "value": "R_det",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(V, U_t)",
                            "Call"
                        ],
                        [
                            "torch.where(R_det[:, None, None] < 0, R_ref, R)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_176": {
                "variable": {
                    "value": "V_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.svd(H)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "reflect[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "variable": {
                    "value": "R_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "V_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(V, reflect[None, :, :])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "U_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "U.transpose(2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "where_178": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "R_det[:, None, None] < 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "R_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(V_ref, U_t)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(V, U_t)",
                            "Call"
                        ],
                        [
                            "torch.where(R_det[:, None, None] < 0, R_ref, R)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_182": {
                "variable": {
                    "value": "Rt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(R, t[:, :, 0:1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_99": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_100": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_181": {
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(V, U_t)",
                            "Call"
                        ],
                        [
                            "torch.where(R_det[:, None, None] < 0, R_ref, R)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "X_mean[:, 0, :, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_122": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervisedRR/models/backbones.py": {
        "torch": {
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Identity_23": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_28": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_51": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_c",
                            "Method Argument"
                        ],
                        [
                            "in_c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_94": {
                "variable": {
                    "value": "self.non_linearity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(mode='bilinear', scale_factor=2, align_corners=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_54": {
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_55": {
                "in_channels": {
                    "value": "in_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_c",
                            "Method Argument"
                        ],
                        [
                            "in_c",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_c",
                            "Method Argument"
                        ],
                        [
                            "out_c",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervisedRR/models/builder.py": {
        "torch": {
            "Identity_11": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "unsupervisedRR/models/correspondence.py": {
        "torch": {
            "topk_45": {
                "variable": {
                    "value": "(dist, idx_source)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - dists).clamp(min=1e-09)",
                            "Call"
                        ],
                        [
                            "dists",
                            "Method Argument"
                        ],
                        [
                            "dists",
                            "Method Argument"
                        ]
                    ]
                },
                "k": {
                    "value": "num_corres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_corres",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "matches_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m12_idx1, m21_idx1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_145": {
                "variable": {
                    "value": "matches_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_146": {
                "variable": {
                    "value": "matches_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m12_idx2, m21_idx2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_146": {
                "variable": {
                    "value": "matches_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "matches_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(m12_dist, m21_dist)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_147": {
                "variable": {
                    "value": "matches_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "matches_cosn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cosine_1, cosine_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_148": {
                "variable": {
                    "value": "matches_cosn",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervisedRR/models/model.py": {
        "torch": {
            "cat_98": {
                "variable": {
                    "value": "output[joint_pointcloud]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pcs_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[pc[0] for pc in pointclouds]",
                            "ListComp"
                        ],
                        [
                            "pcs_X[0:1] + pcs_X_rot",
                            "BinOp"
                        ],
                        [
                            "[pc[0] for pc in pointclouds]",
                            "ListComp"
                        ],
                        [
                            "pcs_X[0:1] + pcs_X_rot",
                            "BinOp"
                        ],
                        [
                            "[grid_to_pointcloud(K_inv, deps[i], None, grid)[0] for i in range(n_views)]",
                            "ListComp"
                        ],
                        [
                            "pcs_X[0:1] + pcs_X_rot",
                            "BinOp"
                        ],
                        [
                            "torch.cat(pcs_X, dim=1).detach().cpu()",
                            "Call"
                        ],
                        [
                            "[pc[0] for pc in pointclouds]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "output[joint_pointcloud]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pcs_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[pc[0] for pc in pointclouds]",
                            "ListComp"
                        ],
                        [
                            "pcs_X[0:1] + pcs_X_rot",
                            "BinOp"
                        ],
                        [
                            "[pc[0] for pc in pointclouds]",
                            "ListComp"
                        ],
                        [
                            "pcs_X[0:1] + pcs_X_rot",
                            "BinOp"
                        ],
                        [
                            "[grid_to_pointcloud(K_inv, deps[i], None, grid)[0] for i in range(n_views)]",
                            "ListComp"
                        ],
                        [
                            "pcs_X[0:1] + pcs_X_rot",
                            "BinOp"
                        ],
                        [
                            "torch.cat(pcs_X, dim=1).detach().cpu()",
                            "Call"
                        ],
                        [
                            "[pc[0] for pc in pointclouds]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "pcs_X_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pcs_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[pc[0] for pc in pointclouds]",
                            "ListComp"
                        ],
                        [
                            "pcs_X[0:1] + pcs_X_rot",
                            "BinOp"
                        ],
                        [
                            "[pc[0] for pc in pointclouds]",
                            "ListComp"
                        ],
                        [
                            "pcs_X[0:1] + pcs_X_rot",
                            "BinOp"
                        ],
                        [
                            "[grid_to_pointcloud(K_inv, deps[i], None, grid)[0] for i in range(n_views)]",
                            "ListComp"
                        ],
                        [
                            "pcs_X[0:1] + pcs_X_rot",
                            "BinOp"
                        ],
                        [
                            "torch.cat(pcs_X, dim=1).detach().cpu()",
                            "Call"
                        ],
                        [
                            "[pc[0] for pc in pointclouds]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "pcs_F_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pcs_F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[pc[1] for pc in pointclouds]",
                            "ListComp"
                        ],
                        [
                            "[pc[1] for pc in pointclouds]",
                            "ListComp"
                        ],
                        [
                            "[pc[1] for pc in pointclouds]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "pcs_RGB_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pcs_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[rgb.view(B, 3, -1).permute(0, 2, 1).contiguous() for rgb in rgbs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "pcs_FRGB_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pcs_F_joint, pcs_RGB_joint)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "pcs_X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pcs_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[pc[0] for pc in pointclouds]",
                            "ListComp"
                        ],
                        [
                            "pcs_X[0:1] + pcs_X_rot",
                            "BinOp"
                        ],
                        [
                            "[pc[0] for pc in pointclouds]",
                            "ListComp"
                        ],
                        [
                            "pcs_X[0:1] + pcs_X_rot",
                            "BinOp"
                        ],
                        [
                            "[grid_to_pointcloud(K_inv, deps[i], None, grid)[0] for i in range(n_views)]",
                            "ListComp"
                        ],
                        [
                            "pcs_X[0:1] + pcs_X_rot",
                            "BinOp"
                        ],
                        [
                            "torch.cat(pcs_X, dim=1).detach().cpu()",
                            "Call"
                        ],
                        [
                            "[pc[0] for pc in pointclouds]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "pcs_X_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pcs_X[0:i] + pcs_X[i + 1:n_views]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "pcs_F_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pcs_F[0:i] + pcs_F[i + 1:n_views]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "pcs_RGB_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pcs_rgb[0:i] + pcs_rgb[i + 1:n_views]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "pcs_FRGB_joint",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pcs_F_joint, pcs_RGB_joint)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervisedRR/models/model_util.py": {
        "torch": {
            "linspace_68": {
                "variable": {
                    "value": "grid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "W - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "W // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linspace_69": {
                "variable": {
                    "value": "grid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "H - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "H // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_73": {
                "variable": {
                    "value": "zs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grid_x.view(1, W).repeat(H, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_77": {
                "variable": {
                    "value": "grid_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xs, ys, zs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_94": {
                "variable": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.interpolate(depth, (H, W), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_107": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth * grid",
                            "BinOp"
                        ],
                        [
                            "nn.functional.avg_pool2d(points, 2, 2)",
                            "Call"
                        ],
                        [
                            "points.view(B, 3, H * W)",
                            "Call"
                        ],
                        [
                            "K_inv.bmm(points)",
                            "Call"
                        ],
                        [
                            "points.permute(0, 2, 1)",
                            "Call"
                        ],
                        [
                            "points",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "ndc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(-x, -y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "ndc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_109": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.functional.avg_pool2d(features, 2, 2)",
                            "Call"
                        ],
                        [
                            "features.view(B, features.shape[1], H * W)",
                            "Call"
                        ],
                        [
                            "features.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervisedRR/models/renderer.py": {
        "torch": {
            "exp_21": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * dists_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervisedRR/nnutils/pcreg_trainer.py": {
        "torch": {
            "clip_grad_norm__37": {
                "variable": {
                    "value": "_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "module.parameters()",
                            "Call"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "max_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "unsupervisedRR/nnutils/trainer.py": {
        "torch": {
            "current_device_33": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_92": {
                "variable": {
                    "value": "self.logger",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(cfg.PATHS.tensorboard_dir, self.full_exp_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_133": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_320": {
                "variable": {
                    "value": "v_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_42": {
                "seed": {
                    "value": "cfg.SYSTEM.RANDOM_SEED",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_120": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state, 'optim': optim_state, 'curr_loss': self.curr_loss, 'best_loss': self.best_loss, 'epoch': self.epoch, 'step': self.step, 'cfg': self.cfg}",
                            "Dict"
                        ],
                        [
                            "torch.load(checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.experiment_dir, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.experiment_dir, 'best_loss.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_185": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_126": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state, 'optim': optim_state, 'curr_loss': self.curr_loss, 'best_loss': self.best_loss, 'epoch': self.epoch, 'step': self.step, 'cfg': self.cfg}",
                            "Dict"
                        ],
                        [
                            "torch.load(checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.experiment_dir, name)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.experiment_dir, 'best_loss.pkl')",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_164": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "epoch_metrics[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(epoch_metrics[k], b_metrics)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_172": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_176": {
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "network.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "cfg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervisedRR/utils/losses.py": {
        "torch": {
            "l1_loss_5": {
                "variable": {
                    "value": "pixel_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervisedRR/utils/metrics.py": {
        "torch": {
            "cosine_similarity_28": {
                "variable": {
                    "value": "t_ang_error",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "pr_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pr[:, :, 3:4]",
                            "Subscript"
                        ]
                    ]
                },
                "x2": {
                    "value": "gt_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt[:, :, 3:4]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "acos_28": {
                "variable": {
                    "value": "t_ang_error",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "uvd_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pixel_loc_0, depth_0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "xyz_all_0",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xyz_0, xyz_0in1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "xyz_all_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xyz_1in0, xyz_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(valid_dep, valid_x_l, valid_x_h, valid_y_l, valid_y_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "unsupervisedRR/utils/transformations.py": {
        "torch": {
            "where_15": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "norm < 1e-09",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "w + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quat[..., 0:1]",
                            "Subscript"
                        ],
                        [
                            "torch.where(norm < 1e-09, w + 1, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_16": {
                "variable": {
                    "value": "quat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(w, quat[..., 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "point_as_quaternion",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(real_parts, point)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_60": {
                "variable": {
                    "value": "q_xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_64": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q_w, q_xyz, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_121": {
                "variable": {
                    "value": "rand_pt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "Rti",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Rinv, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "Rt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(R, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "(q, t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_7": {
                "data": {
                    "value": "[1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}