{
    "hierarchical_mpad/main.py": {
        "sklearn": {
            "LabelEncoder_59": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KFold_73": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Adam_144": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_145": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(parameters, lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_240": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_168": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train(epoch, adj_train[i], None, features_train[i], shapes_train[i], y_train[i])",
                            "Call"
                        ],
                        [
                            "train(epoch, adj_train[i], adj_s_train[i], features_train[i], shapes_train[i], y_train[i])",
                            "Call"
                        ],
                        [
                            "test(adj_test[i], None, features_test[i], shapes_test[i], y_test[i])",
                            "Call"
                        ],
                        [
                            "test(adj_test[i], adj_s_test[i], features_test[i], shapes_test[i], y_test[i])",
                            "Call"
                        ],
                        [
                            "test(adj_val[i], None, features_val[i], shapes_val[i], y_val[i])",
                            "Call"
                        ],
                        [
                            "test(adj_val[i], adj_s_val[i], features_val[i], shapes_val[i], y_val[i])",
                            "Call"
                        ],
                        [
                            "model(features, adj, adj_s, shapes)",
                            "Call"
                        ],
                        [
                            "model(features, adj, adj_s, shapes)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_175": {
                "variable": {
                    "value": "loss_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train(epoch, adj_train[i], None, features_train[i], shapes_train[i], y_train[i])",
                            "Call"
                        ],
                        [
                            "train(epoch, adj_train[i], adj_s_train[i], features_train[i], shapes_train[i], y_train[i])",
                            "Call"
                        ],
                        [
                            "test(adj_test[i], None, features_test[i], shapes_test[i], y_test[i])",
                            "Call"
                        ],
                        [
                            "test(adj_test[i], adj_s_test[i], features_test[i], shapes_test[i], y_test[i])",
                            "Call"
                        ],
                        [
                            "test(adj_val[i], None, features_val[i], shapes_val[i], y_val[i])",
                            "Call"
                        ],
                        [
                            "test(adj_val[i], adj_s_val[i], features_val[i], shapes_val[i], y_val[i])",
                            "Call"
                        ],
                        [
                            "model(features, adj, adj_s, shapes)",
                            "Call"
                        ],
                        [
                            "model(features, adj, adj_s, shapes)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_222": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "mpad/main.py": {
        "sklearn": {
            "LabelEncoder_57": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KFold_71": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Adam_109": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filter(lambda p: p.requires_grad, model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_110": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(parameters, lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "load_194": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_130": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train(epoch, adj_train[i], features_train[i], batch_n_graphs_train[i], y_train[i])",
                            "Call"
                        ],
                        [
                            "test(adj_test[i], features_test[i], batch_n_graphs_test[i], y_test[i])",
                            "Call"
                        ],
                        [
                            "test(adj_val[i], features_val[i], batch_n_graphs_val[i], y_val[i])",
                            "Call"
                        ],
                        [
                            "model(features, adj, batch_n_graphs)",
                            "Call"
                        ],
                        [
                            "model(features, adj, batch_n_graphs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_137": {
                "variable": {
                    "value": "loss_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train(epoch, adj_train[i], features_train[i], batch_n_graphs_train[i], y_train[i])",
                            "Call"
                        ],
                        [
                            "test(adj_test[i], features_test[i], batch_n_graphs_test[i], y_test[i])",
                            "Call"
                        ],
                        [
                            "test(adj_val[i], features_val[i], batch_n_graphs_val[i], y_val[i])",
                            "Call"
                        ],
                        [
                            "model(features, adj, batch_n_graphs)",
                            "Call"
                        ],
                        [
                            "model(features, adj, batch_n_graphs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_176": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_best.pth.tar",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "hierarchical_mpad/layers.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.fc1_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc2_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc1_reset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc2_reset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_34": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_update(out) + self.fc2_update(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_35": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_reset(out) + self.fc2_reset(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_36": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out) + self.fc2(r * x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhid",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhid",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_54": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t, x_in[:, -1, :].squeeze()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "hierarchical_mpad/mlp.py": {
        "torch": {
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_28": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_37": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "hierarchical_mpad/models.py": {
        "torch": {
            "Embedding_11": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "embeddings.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embeddings.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_15": {
                "variable": {
                    "value": "self.mps1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_16": {
                "variable": {
                    "value": "self.atts1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_penultimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_penultimate",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_43": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_44": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2 * n_message_passing * n_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_message_passing * n_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_28": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_message_passing * n_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_message_passing * n_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_hid",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_penultimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_penultimate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_message_passing * n_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_penultimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_penultimate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_36": {
                "variable": {
                    "value": "self.mps2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_37": {
                "variable": {
                    "value": "self.atts2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.mps1[i](x, adj)",
                            "Call"
                        ],
                        [
                            "torch.cat(lst, 1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "x.view(-1, shapes[1], x.size()[1])",
                            "Call"
                        ],
                        [
                            "self.att(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ],
                        [
                            "self.mps2[i](x, adj_s)",
                            "Call"
                        ],
                        [
                            "torch.cat(lst, 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_12": {
                "ndarray": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "hierarchical_mpad/utils.py": {
        "torch": {
            "from_numpy_167": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mpad/layers.py": {
        "torch": {
            "Linear_21": {
                "variable": {
                    "value": "self.fc1_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc2_update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.fc1_reset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc2_reset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_34": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_update(out) + self.fc2_update(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_35": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1_reset(out) + self.fc2_reset(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_36": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out) + self.fc2(r * x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_51": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ],
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_52": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhid",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhid",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nhid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nhid",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softmax_54": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_59": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t, x_in[:, -1, :].squeeze()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mpad/mlp.py": {
        "torch": {
            "Linear_24": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_28": {
                "variable": {
                    "value": "self.linears",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_29": {
                "variable": {
                    "value": "self.batch_norms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norms[layer](self.linears[layer](h))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_34": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_37": {
                "num_features": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mpad/models.py": {
        "torch": {
            "Embedding_10": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "embeddings.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embeddings.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_14": {
                "variable": {
                    "value": "self.mps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_15": {
                "variable": {
                    "value": "self.atts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_penultimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_penultimate",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_24": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "2 * n_message_passing * n_hid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * n_message_passing * n_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_penultimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_penultimate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_27": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_message_passing * n_hid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_message_passing * n_hid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_penultimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_penultimate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_48": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.mps[i](x, adj)",
                            "Call"
                        ],
                        [
                            "torch.cat(lst, 1)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_11": {
                "ndarray": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mpad/utils.py": {
        "torch": {
            "from_numpy_155": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}