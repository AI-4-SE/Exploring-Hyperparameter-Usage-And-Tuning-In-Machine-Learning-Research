{
    "MTKSD/.ipynb_checkpoints/loss-checkpoint.py": {
        "torch": {
            "PairwiseDistance_7": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_53": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(-s1 * k_x, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ],
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(-s1 * k_x, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ],
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(s1 * k_y, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_76": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(-s1 * k_x, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ],
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(-s1 * k_x, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ],
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(s1 * k_y, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_83": {
                "input": {
                    "value": "approx_dist.log_prob(sample) - target_dist.log_prob(sample)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cdist_21": {
                "x1": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "scores ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cdist_46": {
                "x1": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "s1 * s2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(scores ** 2, dim=-1) + g * d",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_52": {
                "input": {
                    "value": "s1 * s2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_75": {
                "input": {
                    "value": "s1 * s2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "MTKSD/.ipynb_checkpoints/plot-checkpoint.py": {
        "torch": {
            "linspace_31": {
                "variable": {
                    "value": "xline",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_32": {
                "variable": {
                    "value": "yline",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "y[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_33": {
                "variable": {
                    "value": "(xgrid, ygrid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "xline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(x[0], x[1], steps=n_steps)",
                            "Call"
                        ],
                        [
                            "torch.linspace(x[0], x[1], steps=n_steps)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "yline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(y[0], y[1], steps=n_steps)",
                            "Call"
                        ],
                        [
                            "torch.linspace(y[0], y[1], steps=n_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_34": {
                "variable": {
                    "value": "xyinput",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xgrid.reshape(-1, 1), ygrid.reshape(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_46": {
                "variable": {
                    "value": "xline",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_47": {
                "variable": {
                    "value": "yline",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "y[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_48": {
                "variable": {
                    "value": "(xgrid, ygrid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "xline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(x[0], x[1], steps=n_steps)",
                            "Call"
                        ],
                        [
                            "torch.linspace(x[0], x[1], steps=n_steps)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "yline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(y[0], y[1], steps=n_steps)",
                            "Call"
                        ],
                        [
                            "torch.linspace(y[0], y[1], steps=n_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_49": {
                "variable": {
                    "value": "xyinput",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xgrid.reshape(-1, 1), ygrid.reshape(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_11": {
                "variable": {
                    "value": "loss_vec_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(loss_vec.detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_67": {
                "input": {
                    "value": "sols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(sols).T",
                            "Attribute"
                        ],
                        [
                            "sols",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_11": {
                "input": {
                    "value": "loss_vec.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MTKSD/.ipynb_checkpoints/utils-checkpoint.py": {
        "torch": {
            "zeros_16": {
                "variable": {
                    "value": "loss_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_23": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transform.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "loss_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transform.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "loss_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transform.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_164": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "MTKSD/get_score.py": {
        "torch": {
            "grad_7": {
                "outputs": {
                    "value": "log_probs.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "MTKSD/loss.py": {
        "torch": {
            "PairwiseDistance_7": {
                "variable": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(-s1 * k_x, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ],
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(-s1 * k_x, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ],
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(-s1 * k_x, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ],
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(-s1 * k_x, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ],
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(s1 * k_y, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_129": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(-s1 * k_x, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ],
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(-s1 * k_x, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ],
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(-s1 * k_x, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ],
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(-s1 * k_x, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ],
                        [
                            "k * torch.sum(s1 * s2, dim=-1) + torch.sum(s1 * k_y, dim=-1) + torch.sum(s2 * k_x, dim=-1) + k_xy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_171": {
                "variable": {
                    "value": "l_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "range(order)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_137": {
                "input": {
                    "value": "approx_dist.log_prob(sample) - target_dist.log_prob(sample)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cdist_21": {
                "x1": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_28": {
                "input": {
                    "value": "scores ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cdist_46": {
                "x1": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_53": {
                "input": {
                    "value": "scores ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cdist_73": {
                "x1": {
                    "value": "g_samps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g * samples",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "g_samps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g * samples",
                            "BinOp"
                        ]
                    ]
                }
            },
            "flatten_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cdist_74": {
                "x1": {
                    "value": "g * g_samps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "g * g_samps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "flatten_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "g ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cdist_99": {
                "x1": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_165": {
                "data": {
                    "value": "range(order)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_27": {
                "input": {
                    "value": "s1 * s2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_30": {
                "input": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(scores ** 2, dim=-1) + g * d",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores ** 2, dim=-1) + g * d",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores ** 2, dim=-1) + torch.sum(g ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_52": {
                "input": {
                    "value": "s1 * s2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_78": {
                "input": {
                    "value": "g ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_80": {
                "input": {
                    "value": "s1 * s2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(scores ** 2, dim=-1) + g * d",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores ** 2, dim=-1) + g * d",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores ** 2, dim=-1) + torch.sum(g ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_105": {
                "input": {
                    "value": "s1 * s2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "s1 * s2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_176": {
                "data": {
                    "value": "range(order - l)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_56": {
                "input": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(scores ** 2, dim=-1) + g * d",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores ** 2, dim=-1) + g * d",
                            "BinOp"
                        ],
                        [
                            "torch.sum(scores ** 2, dim=-1) + torch.sum(g ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "MTKSD/neural_net_transport.py": {
        "torch": {
            "Linear_29": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.mid_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self.mid_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_34": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mid_out(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unbind_48": {
                "variable": {
                    "value": "(mean, log_scale)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "F.relu(self.input(y))",
                            "Call"
                        ],
                        [
                            "F.relu(self.linears1[i](y))",
                            "Call"
                        ],
                        [
                            "self.mid_in(y)",
                            "Call"
                        ],
                        [
                            "F.relu(self.mid_out(y))",
                            "Call"
                        ],
                        [
                            "F.relu(self.linears2[i](y))",
                            "Call"
                        ],
                        [
                            "self.output(y)",
                            "Call"
                        ],
                        [
                            "y.reshape(list(x.size()[:-1]) + [2, self.output_dim])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_49": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unbind(y, dim=-2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_40": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linears1[i](y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linears2[i](y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "hidden_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dims[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_33": {
                "in_features": {
                    "value": "hidden_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dims[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "MTKSD/plot.py": {
        "torch": {
            "linspace_31": {
                "variable": {
                    "value": "xline",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_32": {
                "variable": {
                    "value": "yline",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "y[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_33": {
                "variable": {
                    "value": "(xgrid, ygrid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "xline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(x[0], x[1], steps=n_steps)",
                            "Call"
                        ],
                        [
                            "torch.linspace(x[0], x[1], steps=n_steps)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "yline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(y[0], y[1], steps=n_steps)",
                            "Call"
                        ],
                        [
                            "torch.linspace(y[0], y[1], steps=n_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_34": {
                "variable": {
                    "value": "xyinput",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xgrid.reshape(-1, 1), ygrid.reshape(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_46": {
                "variable": {
                    "value": "xline",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_47": {
                "variable": {
                    "value": "yline",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "y[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "300",
                            "Method Argument"
                        ],
                        [
                            "300",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_48": {
                "variable": {
                    "value": "(xgrid, ygrid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "xline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(x[0], x[1], steps=n_steps)",
                            "Call"
                        ],
                        [
                            "torch.linspace(x[0], x[1], steps=n_steps)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "yline",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(y[0], y[1], steps=n_steps)",
                            "Call"
                        ],
                        [
                            "torch.linspace(y[0], y[1], steps=n_steps)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_49": {
                "variable": {
                    "value": "xyinput",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xgrid.reshape(-1, 1), ygrid.reshape(-1, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_11": {
                "variable": {
                    "value": "loss_vec_np",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(loss_vec.detach())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_67": {
                "input": {
                    "value": "sols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.squeeze(sols).T",
                            "Attribute"
                        ],
                        [
                            "sols",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_11": {
                "input": {
                    "value": "loss_vec.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "MTKSD/polynomial_transport.py": {
        "torch": {
            "zeros_7": {
                "variable": {
                    "value": "theta_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "order + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_12": {
                "variable": {
                    "value": "numer",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(1, n + r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_12": {
                "variable": {
                    "value": "numer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "theta_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "d_theta_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(numer / denom).type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_18": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta_1, theta_2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "X_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "X_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(X_1, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((X_1, zero_mat_1), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.arange(1, order + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor([0]), seq]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "combinations_43": {
                "variable": {
                    "value": "combns",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.arange(1, order + 1))",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.tensor([0]), seq])",
                            "Call"
                        ]
                    ]
                },
                "with_replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "combns_rev",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[combns_2, combns_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "combns",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[combns, combns_rev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "combns",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "combns_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "X_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "X_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(X_2, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((zero_mat_2, X_2), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_81": {
                "variable": {
                    "value": "zero_mat_1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_col_X_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_2.size()[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "zero_mat_2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n_col_X_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_1.size()[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_83": {
                "variable": {
                    "value": "X_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X_1, zero_mat_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "X_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(zero_mat_2, X_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X_1, X_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * N",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "len_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_88": {
                "variable": {
                    "value": "T_theta_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((X_1, X_2), dim=1).reshape(2 * N, len_theta)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([theta_1, theta_2])",
                            "Call"
                        ],
                        [
                            "theta.reshape(len_theta, 1)",
                            "Call"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_88": {
                "variable": {
                    "value": "T_theta_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_58": {
                "variable": {
                    "value": "(sorted_combns_i, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "combns_i[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_13": {
                "ndarray": {
                    "value": "np.arange(1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "prod_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_41": {
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "MTKSD/toy_distributions.py": {
        "torch": {
            "Categorical_29": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.ones(n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Independent_30": {
                "variable": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": []
                },
                "base_distribution": {
                    "value": "D.Normal(self.mean, self.var * torch.ones(n, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "reinterpreted_batch_ndims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_41": {
                "variable": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.Tensor([0, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_72": {
                "variable": {
                    "value": "self.dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.Tensor([0, 0])",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MixtureSameFamily_32": {
                "mixture_distribution": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D.Categorical(torch.ones(n))",
                            "Call"
                        ]
                    ]
                },
                "component_distribution": {
                    "value": "comp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D.Independent(D.Normal(self.mean, self.var * torch.ones(n, 2)), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_63": {
                "tensors": {
                    "value": "(dx1, dx2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_94": {
                "tensors": {
                    "value": "(dx1, dx2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_29": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.mean)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([np.pi * 2 * v1 * v2])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([2 * np.pi * v1 * v2])",
                            "Call"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Normal_30": {
                "loc": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.var * torch.ones(n, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_41": {},
            "eye_41": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_72": {},
            "eye_72": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_79": {
                "input": {
                    "value": "a * sampt[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_55": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.mean)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([np.pi * 2 * v1 * v2])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([2 * np.pi * v1 * v2])",
                            "Call"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_86": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.mean)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([np.pi * 2 * v1 * v2])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([2 * np.pi * v1 * v2])",
                            "Call"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_30": {
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.mean)",
                            "Call"
                        ],
                        [
                            "torch.Tensor([np.pi * 2 * v1 * v2])",
                            "Call"
                        ],
                        [
                            "torch.Tensor([2 * np.pi * v1 * v2])",
                            "Call"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_93": {
                "input": {
                    "value": "a * x1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_92": {
                "input": {
                    "value": "a * x1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_92": {
                "input": {
                    "value": "a * x1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_86": {
                "input": {
                    "value": "a * x1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "MTKSD/utils.py": {
        "torch": {
            "zeros_16": {
                "variable": {
                    "value": "loss_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_23": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transform.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_62": {
                "variable": {
                    "value": "loss_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_69": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transform.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "loss_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ],
                        [
                            "10000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_111": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "transform.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_164": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}