{
    "net/ml.py": {
        "tensorflow": {
            "concat_52": {
                "variable": {
                    "value": "self.batch_of_categories_predictions_logits_matrices_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "categories_predictions_heads_ops_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "self.batch_of_softmax_categories_predictions_matrices_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.batch_of_categories_predictions_logits_matrices_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_57": {
                "variable": {
                    "value": "self.batch_of_offsets_predictions_matrices_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "offset_predictions_heads_ops_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "VGG16_135": {
                "variable": {
                    "value": "network",
                    "type": "Name",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ResNet50_169": {
                "variable": {
                    "value": "network",
                    "type": "Name",
                    "possible_values": []
                },
                "include_top": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_216": {
                "variable": {
                    "value": "self.ops_map[train_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.ops_map['learning_rate_placeholder']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_335": {
                "variable": {
                    "value": "batch_of_categories_predictions_logits_matrices_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "ops_map['batch_of_categories_predictions_logits_matrices_op']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_340": {
                "variable": {
                    "value": "categories_predictions_logits_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ops_map['batch_of_categories_predictions_logits_matrices_op']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(default_boxes_count, categories_count)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_344": {
                "variable": {
                    "value": "offsets_predictions_matrix_op",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ops_map['batch_of_offsets_predictions_matrices_op']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(default_boxes_count, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Saver_365": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_365": {
                "obj": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Saver_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_72": {
                "filters": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.swish",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_73": {
                "filters": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.swish",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_74": {
                "filters": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.swish",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_85": {
                "filters": {
                    "value": "default_boxes_count * categories_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2D_89": {
                "filters": {
                    "value": "4 * default_boxes_count",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "tensor": {
                    "value": "categories_logits_predictions_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(filters=default_boxes_count * categories_count, kernel_size=(3, 3), padding='same')(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(tf.shape(categories_logits_predictions_op)[0], -1, categories_count)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "offsets_predictions_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(filters=4 * default_boxes_count, kernel_size=(3, 3), padding='same')(x)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(tf.shape(offsets_predictions_op)[0], -1, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "boxes_categories_placeholder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_199": {
                "shape": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate_placeholder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_203": {
                "shape": {
                    "value": "(None, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "boxes_sizes_placeholder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_205": {
                "shape": {
                    "value": "(None, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "ground_truth_offsets_placeholder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "categories_logits_predictions_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(filters=default_boxes_count * categories_count, kernel_size=(3, 3), padding='same')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_98": {
                "input": {
                    "value": "offsets_predictions_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.keras.layers.Conv2D(filters=4 * default_boxes_count, kernel_size=(3, 3), padding='same')(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "net/ssd.py": {
        "tensorflow": {
            "sparse_softmax_cross_entropy_with_logits_352": {
                "variable": {
                    "value": "raw_loss_op",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "default_boxes_categories_ids_vector_op",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "predictions_logits_matrix_op",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "ones_355": {
                "variable": {
                    "value": "all_ones_op",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(default_boxes_count,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_356": {
                "variable": {
                    "value": "all_zeros_op",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(default_boxes_count,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_359": {
                "variable": {
                    "value": "positive_losses_selector_op",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "default_boxes_categories_ids_vector_op > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "all_ones_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones(shape=(default_boxes_count,), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape=(default_boxes_count,), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "all_zeros_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros(shape=(default_boxes_count,), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape=(default_boxes_count,), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_362": {
                "variable": {
                    "value": "positive_matches_count_op",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(positive_losses_selector_op)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_381": {
                "pred": {
                    "value": "positive_matches_count_op > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.reduce_mean(tf.concat([positive_losses_op, negative_losses_op], axis=0))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "ones_423": {
                "variable": {
                    "value": "all_ones_op",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(default_boxes_count,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_424": {
                "variable": {
                    "value": "all_zeros_op",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(default_boxes_count,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_428": {
                "variable": {
                    "value": "positive_matches_selector_op",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.ops_map['default_boxes_categories_ids_vector_op'] > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "all_ones_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ones(shape=(default_boxes_count,), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape=(default_boxes_count,), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "all_zeros_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros(shape=(default_boxes_count,), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape=(default_boxes_count,), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_431": {
                "variable": {
                    "value": "positive_matches_count_op",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(positive_matches_selector_op)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_443": {
                "variable": {
                    "value": "raw_loss_op",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.ops_map['default_boxes_categories_ids_vector_op']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.ops_map['predictions_logits_matrix_op']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_476": {
                "variable": {
                    "value": "float_boxes_sizes_op",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "self.ops_map['default_boxes_sizes_op']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_480": {
                "variable": {
                    "value": "scaled_offsets_errors_op",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[offsets_errors_op[:, 0] / float_boxes_sizes_op[:, 0], offsets_errors_op[:, 1] / float_boxes_sizes_op[:, 1], offsets_errors_op[:, 2] / float_boxes_sizes_op[:, 0], offsets_errors_op[:, 3] / float_boxes_sizes_op[:, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_488": {
                "variable": {
                    "value": "raw_losses_op",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.pow(scaled_offsets_errors_op, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_350": {
                "input": {
                    "value": "default_boxes_categories_ids_vector_op",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_sum_362": {
                "input_tensor": {
                    "value": "positive_losses_selector_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(default_boxes_categories_ids_vector_op > 0, all_ones_op, all_zeros_op)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_369": {
                "values": {
                    "value": "raw_loss_op * positive_losses_selector_op",
                    "type": "BinOp",
                    "possible_values": []
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_375": {
                "values": {
                    "value": "raw_loss_op * (1.0 - positive_losses_selector_op)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_465": {
                "pred": {
                    "value": "positive_matches_count_op > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.reduce_mean(tf.concat([positive_losses_op, negative_losses_op], axis=0))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_496": {
                "pred": {
                    "value": "positive_matches_count_op > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.reduce_mean(positive_losses_op)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_421": {
                "input": {
                    "value": "self.ops_map['default_boxes_categories_ids_vector_op']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_431": {
                "input_tensor": {
                    "value": "positive_matches_selector_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.where(self.ops_map['default_boxes_categories_ids_vector_op'] > 0, all_ones_op, all_zeros_op)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_453": {
                "values": {
                    "value": "raw_loss_op * positive_matches_selector_op",
                    "type": "BinOp",
                    "possible_values": []
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_459": {
                "values": {
                    "value": "raw_loss_op * (1.0 - positive_matches_selector_op)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_488": {
                "x": {
                    "value": "scaled_offsets_errors_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([offsets_errors_op[:, 0] / float_boxes_sizes_op[:, 0], offsets_errors_op[:, 1] / float_boxes_sizes_op[:, 1], offsets_errors_op[:, 2] / float_boxes_sizes_op[:, 0], offsets_errors_op[:, 3] / float_boxes_sizes_op[:, 1]], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_492": {
                "values": {
                    "value": "raw_losses_op * positive_matches_selector_op",
                    "type": "BinOp",
                    "possible_values": []
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_383": {
                "input_tensor": {
                    "value": "tf.concat([positive_losses_op, negative_losses_op], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_384": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_383": {
                "values": {
                    "value": "[positive_losses_op, negative_losses_op]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_467": {
                "input_tensor": {
                    "value": "tf.concat([positive_losses_op, negative_losses_op], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_468": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_498": {
                "input_tensor": {
                    "value": "positive_losses_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sort(raw_loss_op * positive_losses_selector_op, direction='DESCENDING')[:positive_matches_count_op]",
                            "Subscript"
                        ],
                        [
                            "tf.sort(raw_loss_op * positive_matches_selector_op, direction='DESCENDING')[:positive_matches_count_op]",
                            "Subscript"
                        ],
                        [
                            "tf.sort(raw_losses_op * positive_matches_selector_op, direction='DESCENDING')[:positive_matches_count_op]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_499": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_467": {
                "values": {
                    "value": "[positive_losses_op, negative_losses_op]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/model_analysis.py": {
        "tensorflow": {
            "get_session_26": {
                "variable": {
                    "value": "session",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/train.py": {
        "tensorflow": {
            "global_variables_74": {
                "variable": {
                    "value": "initialized_variables",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_session_76": {
                "variable": {
                    "value": "session",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variables_initializer_81": {
                "var_list": {
                    "value": "uninitialized_variables",
                    "type": "Name",
                    "possible_values": [
                        [
                            "set(tf.global_variables()).difference(initialized_variables)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/visualize.py": {
        "tensorflow": {
            "get_session_234": {
                "variable": {
                    "value": "session",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_session_355": {
                "variable": {
                    "value": "session",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/commit_stage/unit_tests/test_ssd.py": {
        "tensorflow": {
            "Session_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_24": {
                "value": {
                    "value": "default_boxes_categories_ids_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([0, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0, 0])",
                            "Call"
                        ],
                        [
                            "np.array([2, 0, 0, 0, 0, 0, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_25": {
                "value": {
                    "value": "predictions_logits_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[0.8, 0.5], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2], [0.8, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1, 0.3], [0.4, 0.2, 0.1], [0.8, 0.2, 0.2], [0.1, 0.8, 0.2], [0.8, 0.1, 0.1], [0.3, 0.1, 0.1], [0.5, 0.3, 0.9], [0.5, 0.1, 0.9]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_48": {
                "value": {
                    "value": "default_boxes_categories_ids_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([0, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0, 0])",
                            "Call"
                        ],
                        [
                            "np.array([2, 0, 0, 0, 0, 0, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_49": {
                "value": {
                    "value": "predictions_logits_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[0.8, 0.5], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2], [0.8, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1, 0.3], [0.4, 0.2, 0.1], [0.8, 0.2, 0.2], [0.1, 0.8, 0.2], [0.8, 0.1, 0.1], [0.3, 0.1, 0.1], [0.5, 0.3, 0.9], [0.5, 0.1, 0.9]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_73": {
                "value": {
                    "value": "default_boxes_categories_ids_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([0, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0, 0])",
                            "Call"
                        ],
                        [
                            "np.array([2, 0, 0, 0, 0, 0, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_74": {
                "value": {
                    "value": "predictions_logits_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[0.8, 0.5], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2], [0.8, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1, 0.3], [0.4, 0.2, 0.1], [0.8, 0.2, 0.2], [0.1, 0.8, 0.2], [0.8, 0.1, 0.1], [0.3, 0.1, 0.1], [0.5, 0.3, 0.9], [0.5, 0.1, 0.9]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_99": {
                "value": {
                    "value": "default_boxes_categories_ids_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([0, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0, 0])",
                            "Call"
                        ],
                        [
                            "np.array([2, 0, 0, 0, 0, 0, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_100": {
                "value": {
                    "value": "predictions_logits_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[0.8, 0.5], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2], [0.8, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1, 0.3], [0.4, 0.2, 0.1], [0.8, 0.2, 0.2], [0.1, 0.8, 0.2], [0.8, 0.1, 0.1], [0.3, 0.1, 0.1], [0.5, 0.3, 0.9], [0.5, 0.1, 0.9]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_130": {
                "value": {
                    "value": "default_boxes_categories_ids_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([0, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0])",
                            "Call"
                        ],
                        [
                            "np.array([1, 0, 0])",
                            "Call"
                        ],
                        [
                            "np.array([2, 0, 0, 0, 0, 0, 0, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_131": {
                "value": {
                    "value": "predictions_logits_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[0.8, 0.5], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1], [0.4, 0.2], [0.8, 0.2]])",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.1, 0.3], [0.4, 0.2, 0.1], [0.8, 0.2, 0.2], [0.1, 0.8, 0.2], [0.8, 0.1, 0.1], [0.3, 0.1, 0.1], [0.5, 0.3, 0.9], [0.5, 0.1, 0.9]])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}