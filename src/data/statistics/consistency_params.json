{
    "multiclass_loss.py": {
        "sklearn": {
            "f1_score_69": {
                "variable": {
                    "value": "macro_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.asarray(self.all_gold)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.asarray(self.all_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_70": {
                "variable": {
                    "value": "weighted_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "np.asarray(self.all_gold)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.asarray(self.all_pred)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "NLLLoss_37": {
                "variable": {
                    "value": "crit",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "bert_adam.py": {
        "torch": {
            "cos_29": {
                "input": {
                    "value": "math.pi * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_136": {
                "variable": {
                    "value": "state[next_m]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_138": {
                "variable": {
                    "value": "state[next_v]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__145": {
                "parameters": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group['params']",
                            "Subscript"
                        ],
                        [
                            "group['params']",
                            "Subscript"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "group['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "bert_encoder.py": {
        "torch": {
            "ones_46": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.shared.batch_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.shared.sent_l1 + self.shared.sent_l2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "seg1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.shared.batch_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.shared.sent_l1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_50": {
                "variable": {
                    "value": "seg2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.shared.batch_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.shared.sent_l2 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "seg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[seg1, seg2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "bert_tok",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bert1, bert2[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bert_loader.py": {
        "torch": {}
    },
    "cache_bert_batch.py": {
        "torch": {
            "set_device_113": {
                "device": {
                    "value": "opt.gpuid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data.py": {
        "torch": {
            "from_numpy_31": {
                "variable": {
                    "value": "self.source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.source",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_33": {
                "variable": {
                    "value": "self.all_source",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.all_source",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "self.all_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.all_target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "self.bert_tok_idx1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.bert_tok_idx1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "self.bert_tok_idx2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.bert_tok_idx2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "self.third",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.third",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "self.all_third",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.all_third",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "self.bert_tok_idx3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.bert_tok_idx3",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "self.char_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.char_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_133": {
                "variable": {
                    "value": "rand_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_315": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.elmo_file['{0}.concated_batch'.format(idx)][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_325": {
                "variable": {
                    "value": "embs",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.bert_file['{0}.concated_batch'.format(idx)][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "dummy.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "token_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "token_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "seg_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "seg_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "att_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "att_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "set_device_7": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "embeddings.py": {
        "torch": {
            "Embedding_32": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_tok",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word_vecs.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "opt.word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "self.embeddings.weight.data[0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_36": {
                "variable": {
                    "value": "self.embeddings.weight.data[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "word_vecs[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "no_grad_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_167": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "extra_preprocess.py": {
        "torch": {}
    },
    "fp16_optimizer.py": {
        "torch": {
            "norm_122": {
                "input": {
                    "value": "fp16_grads_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_124": {
                "input": {
                    "value": "fp16_grads_flat.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "linear_classifier.py": {
        "torch": {
            "Sequential_17": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt.hidden_size, opt.num_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "opt.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "opt.num_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LogSoftmax_31": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "locked_dropout.py": {
        "torch": {}
    },
    "optimizer.py": {
        "torch": {
            "clip_grad_norm__24": {
                "variable": {
                    "value": "grad_norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p[1] for p in named_params]",
                            "ListComp"
                        ],
                        [
                            "[(n, p) for (n, p) in m.named_parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for (n, p) in named_params if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__44": {
                "variable": {
                    "value": "grad_norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p[1] for p in named_params]",
                            "ListComp"
                        ],
                        [
                            "[(n, p) for (n, p) in m.named_parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for (n, p) in named_params if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__209": {
                "variable": {
                    "value": "grad_norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p[1] for p in named_params]",
                            "ListComp"
                        ],
                        [
                            "[(n, p) for (n, p) in m.named_parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for (n, p) in named_params if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__228": {
                "variable": {
                    "value": "grad_norm2",
                    "type": "variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p[1] for p in named_params]",
                            "ListComp"
                        ],
                        [
                            "[(n, p) for (n, p) in m.named_parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for (n, p) in named_params if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "self.clip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adagrad_22": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p[1] for p in named_params]",
                            "ListComp"
                        ],
                        [
                            "[(n, p) for (n, p) in m.named_parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for (n, p) in named_params if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p[1] for p in named_params]",
                            "ListComp"
                        ],
                        [
                            "[(n, p) for (n, p) in m.named_parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for (n, p) in named_params if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "self.betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_164": {
                "device": {
                    "value": "self.opt.bert_gpuid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_167": {
                "device": {
                    "value": "self.opt.gpuid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_185": {
                "device": {
                    "value": "self.opt.gpuid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adamax_207": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p[1] for p in named_params]",
                            "ListComp"
                        ],
                        [
                            "[(n, p) for (n, p) in m.named_parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for (n, p) in named_params if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "self.betas",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_226": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p[1] for p in named_params]",
                            "ListComp"
                        ],
                        [
                            "[(n, p) for (n, p) in m.named_parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for (n, p) in named_params if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ],
                        [
                            "[p for p in m.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rho": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pipeline.py": {
        "torch": {
            "from_numpy_159": {
                "ndarray": {
                    "value": "param_dict[n][:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess.py": {
        "torch": {}
    },
    "rnn_classifier.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(opt.hidden_size + opt.bert_size, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rnn_enc, concated]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "opt.hidden_size + opt.bert_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogSoftmax_59": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "randperm_167": {
                "variable": {
                    "value": "batch_order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sub_idx.size()[0]",
                            "Subscript"
                        ],
                        [
                            "len(all_data)",
                            "Call"
                        ],
                        [
                            "len(all_data)",
                            "Call"
                        ],
                        [
                            "len(all_data)",
                            "Call"
                        ],
                        [
                            "val_idx.size()[0]",
                            "Subscript"
                        ],
                        [
                            "data_size + extra_val_idx.size()[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randperm_176": {
                "variable": {
                    "value": "batch_order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(all_data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_186": {
                "variable": {
                    "value": "batch_order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(all_data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_196": {
                "variable": {
                    "value": "batch_order",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(all_data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_524": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_526": {
                "device": {
                    "value": "opt.gpuid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_527": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "transition_loss.py": {
        "torch": {
            "max_25": {
                "input": {
                    "value": "self.zero",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_43": {
                "input": {
                    "value": "self.zero",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_64": {
                "input": {
                    "value": "self.zero",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_85": {
                "input": {
                    "value": "self.zero",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_106": {
                "input": {
                    "value": "log_c_alpha - log_c_beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_125": {
                "input": {
                    "value": "log_c_alpha - log_c_beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_16": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_52": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_74": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_136": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_137": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_171": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_172": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_173": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_174": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_220": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "isnan_19": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_69": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_64": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_77": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "batch_first",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}