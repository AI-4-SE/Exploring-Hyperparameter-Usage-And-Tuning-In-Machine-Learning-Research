{
    "adv_train_pgd.py": {
        "tensorflow": {
            "Session_88": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_26": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "123",
                            "Constant"
                        ]
                    ]
                }
            },
            "placeholder_70": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "features.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, y_train.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_79": {
                "input": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_node, n_node)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_node, n_node)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "attack.py": {
        "tensorflow": {
            "Session_68": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_16": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "123",
                            "Constant"
                        ]
                    ]
                }
            },
            "placeholder_50": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "features.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, y_train.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_59": {
                "input": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_node, n_node)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_53": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_node, n_node)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "inits.py": {
        "tensorflow": {
            "zeros_20": {
                "variable": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_26": {
                "variable": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_8": {
                "initial_value": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_15": {
                "initial_value": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_21": {
                "initial_value": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_27": {
                "initial_value": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=-scale, maxval=scale, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.zeros(shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones(shape, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "layers.py": {
        "tensorflow": {
            "cast_25": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "add_n_182": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "supports",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ]
                    ]
                }
            },
            "floor_25": {
                "x": {
                    "value": "random_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_120": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_170": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "sparse_dropout(x, 1 - self.dropout, self.num_features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_72": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_82": {
                "name": {
                    "value": "self.name + '/vars/' + var",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.vars[var]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_74": {
                "name": {
                    "value": "self.name + '/inputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "histogram_77": {
                "name": {
                    "value": "self.name + '/outputs'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._call(inputs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "metrics.py": {
        "tensorflow": {
            "softmax_cross_entropy_with_logits_6": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "preds",
                    "type": "Name",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_7": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_15": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(preds, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(labels, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_16": {
                "variable": {
                    "value": "accuracy_all",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(preds, 1), tf.argmax(labels, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_17": {
                "variable": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_8": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_10": {
                "input_tensor": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=preds, labels=labels)",
                            "Call"
                        ],
                        [
                            "loss * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_18": {
                "input_tensor": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "mask / tf.reduce_mean(mask)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_20": {
                "input_tensor": {
                    "value": "accuracy_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(correct_prediction, tf.float32)",
                            "Call"
                        ],
                        [
                            "accuracy_all * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_15": {
                "input": {
                    "value": "labels",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "tensorflow": {
            "get_collection_54": {
                "variable": {
                    "value": "variables",
                    "type": "Name",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_79": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_89": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_97": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "latest_checkpoint_98": {
                "variable": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_113": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_147": {
                "logits": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_186": {
                "variable": {
                    "value": "self.rowsum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.hat_A[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_187": {
                "variable": {
                    "value": "self.d_sqrt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.rowsum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reciprocal_188": {
                "variable": {
                    "value": "self.d_sqrt_inv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.d_sqrt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_190": {
                "x": {
                    "value": "self.hat_A[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.d_sqrt_inv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_195": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_228": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_268": {
                "logits": {
                    "value": "self.outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_43": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_202": {
                "variable": {
                    "value": "self.Sgrad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.attack_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.upper_S_real[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "l2_loss_120": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layers[0].vars.values()",
                            "Call"
                        ],
                        [
                            "self.layers[0].vars.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_171": {
                "value": {
                    "value": "np.triu(np.ones([self.A[0].get_shape()[0].value] * 2, dtype=np.float32), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_183": {
                "x": {
                    "value": "self.modified_A[i] + tf.eye(self.modified_A[i].get_shape().as_list()[0], self.modified_A[i].get_shape().as_list()[1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_190": {
                "a": {
                    "value": "tf.multiply(self.hat_A[0], self.d_sqrt_inv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_206": {
                "variable": {
                    "value": "real",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label * self.outputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_208": {
                "variable": {
                    "value": "other",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - label) * label_mask_expand * self.outputs - label * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_209": {
                "variable": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "(real - other + 50) * label_mask_expand[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_210": {
                "variable": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_211": {
                "variable": {
                    "value": "self.Sgrad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.upper_S_real[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "l2_loss_240": {
                "t": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.layers[0].vars.values()",
                            "Call"
                        ],
                        [
                            "self.layers[0].vars.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_173": {
                "num_rows": {
                    "value": "self.A[i].get_shape().as_list()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_columns": {
                    "value": "self.A[i].get_shape().as_list()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_180": {
                "a": {
                    "value": "self.upper_S_real[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_181": {
                "x": {
                    "value": "self.upper_S_real2[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self.C[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_216": {
                "variable": {
                    "value": "self.real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label * self.outputs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_218": {
                "variable": {
                    "value": "self.other",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - label) * label_mask_expand * self.outputs - label * 10000",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_220": {
                "variable": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.loss1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_221": {
                "variable": {
                    "value": "self.Sgrad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.upper_S_real[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_183": {
                "num_rows": {
                    "value": "self.modified_A[i].get_shape().as_list()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_columns": {
                    "value": "self.modified_A[i].get_shape().as_list()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "maximum_219": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "self.real - self.other + 0.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "Session_72": {
                "variable": {
                    "value": "sess",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_17": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "123",
                            "Constant"
                        ]
                    ]
                }
            },
            "sparse_placeholder_54": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.constant(features[2], dtype=tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "features.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, y_train.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_63": {
                "input": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_placeholder_51": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_node, n_node)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_placeholder_52": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_node, n_node)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sparse_placeholder_53": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_node, n_node)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_node, n_node)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_59": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_54": {
                "value": {
                    "value": "features[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}