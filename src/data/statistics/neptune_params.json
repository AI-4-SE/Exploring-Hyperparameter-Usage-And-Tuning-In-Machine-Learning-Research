{
    "neptune-fb15k237/main.py": {
        "torch": {
            "Adam_112": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_192": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "461",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "e1_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "r_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "e2_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sort_78": {
                "variable": {
                    "value": "(sort_values, sort_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(e1_idx, r_idx)",
                            "Call"
                        ],
                        [
                            "model.forward(e1_idx, r_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_114": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=self.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "self.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_194": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "461",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "e1_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "r_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "neptune-fb15k237/model.py": {
        "torch": {
            "Embedding_14": {
                "variable": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(d.entities)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_15": {
                "variable": {
                    "value": "self.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_16": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(d.relations)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(np.random.uniform(-0.01, 0.01, (d2, d1, d1)), dtype=torch.float, device='cuda', requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.hidden_dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['hidden_dropout1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.hidden_dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['hidden_dropout2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BCELoss_23": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_26": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "PReLU_28": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_42": {
                "variable": {
                    "value": "W_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.R(r_idx)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W.view(r.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_46": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn0(e1)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.m(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.input_dropout(self.E.weight).transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(r, self.W.view(r.size(1), -1))",
                            "Call"
                        ],
                        [
                            "W_mat.view(-1, e1.size(1), e1.size(1))",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(W_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn0(e1)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.m(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.input_dropout(self.E.weight).transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.input_dropout(self.E.weight).transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_53": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn0(e1)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(x)",
                            "Call"
                        ],
                        [
                            "self.m(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.input_dropout(self.E.weight).transpose(1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_17": {
                "data": {
                    "value": "np.random.uniform(-0.01, 0.01, (d2, d1, d1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "neptune-wn18rr/main.py": {
        "torch": {
            "Adam_112": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_192": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "e1_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "r_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "e2_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sort_78": {
                "variable": {
                    "value": "(sort_values, sort_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward(e1_idx, r_idx)",
                            "Call"
                        ],
                        [
                            "model.forward(e1_idx, r_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ExponentialLR_114": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=self.learning_rate)",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "self.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_194": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "int"
                        ]
                    ]
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "e1_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_129": {
                "variable": {
                    "value": "r_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_batch[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "neptune-wn18rr/model.py": {
        "torch": {
            "Embedding_13": {
                "variable": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(d.entities)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_14": {
                "variable": {
                    "value": "self.E1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(d.entities)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_15": {
                "variable": {
                    "value": "self.pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_16": {
                "variable": {
                    "value": "self.R",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(d.relations)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(np.random.uniform(-0.5, 0.5, (d2, d1, d1)), dtype=torch.float, device='cuda', requires_grad=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "variable": {
                    "value": "self.input_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['input_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.hidden_dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['hidden_dropout1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.hidden_dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "kwargs['hidden_dropout2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BCELoss_23": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_25": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_26": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_41": {
                "variable": {
                    "value": "W_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.R(r_idx)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W.view(r.size(1), -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn0(e1)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.input_dropout(self.E.weight).transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "W_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(r, self.W.view(r.size(1), -1))",
                            "Call"
                        ],
                        [
                            "W_mat.view(-1, e1.size(1), e1.size(1))",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout1(W_mat)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn0(e1)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.input_dropout(self.E.weight).transpose(1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_52": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn0(e1)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.input_dropout(self.E.weight).transpose(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.input_dropout(self.E.weight).transpose(1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_53": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bn0(e1)",
                            "Call"
                        ],
                        [
                            "self.input_dropout(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "torch.bmm(x, W_mat)",
                            "Call"
                        ],
                        [
                            "x.view(-1, e1.size(1))",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.hidden_dropout2(x)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "torch.mm(x, self.input_dropout(self.E.weight).transpose(1, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_17": {
                "data": {
                    "value": "np.random.uniform(-0.5, 0.5, (d2, d1, d1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}