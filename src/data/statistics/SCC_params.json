{
    "labelers/offline_gnn/utils/dataLoader.py": {
        "sklearn": {
            "PCA_56": {
                "variable": {
                    "value": "pca_50",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TSNE_58": {
                "variable": {
                    "value": "tsne",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cosine_similarity_72": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "class_text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_feature[np.where(label_set == i)]",
                            "Subscript"
                        ],
                        [
                            "text_feature[class_google_idx]",
                            "Subscript"
                        ],
                        [
                            "text_feature[class_google_idx]",
                            "Subscript"
                        ],
                        [
                            "text_feature[class_flickr_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "label_description[i].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_95": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "class_text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_feature[np.where(label_set == i)]",
                            "Subscript"
                        ],
                        [
                            "text_feature[class_google_idx]",
                            "Subscript"
                        ],
                        [
                            "text_feature[class_google_idx]",
                            "Subscript"
                        ],
                        [
                            "text_feature[class_flickr_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "label_description[i].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_120": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "class_text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_feature[np.where(label_set == i)]",
                            "Subscript"
                        ],
                        [
                            "text_feature[class_google_idx]",
                            "Subscript"
                        ],
                        [
                            "text_feature[class_google_idx]",
                            "Subscript"
                        ],
                        [
                            "text_feature[class_flickr_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "label_description[i].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_129": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "class_text",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_feature[np.where(label_set == i)]",
                            "Subscript"
                        ],
                        [
                            "text_feature[class_google_idx]",
                            "Subscript"
                        ],
                        [
                            "text_feature[class_google_idx]",
                            "Subscript"
                        ],
                        [
                            "text_feature[class_flickr_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "Y": {
                    "value": "label_description[i].reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/imagename_dataset.py": {
        "torch": {
            "rand_30": {
                "variable": {
                    "value": "sample[data]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.dummy_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/online_labeler_dataset.py": {
        "torch": {
            "rand_66": {
                "variable": {
                    "value": "sample[data]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.dummy_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "datasets/pseudo_dataset.py": {
        "torch": {
            "rand_36": {
                "variable": {
                    "value": "sample[data]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.dummy_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_63": {
                "variable": {
                    "value": "sample[data]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.dummy_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "labelers/offline_cnn/feature_extractor_patch.py": {
        "torch": {
            "empty_cache_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_76": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_network(data).detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_77": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_label * score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_78": {
                "variable": {
                    "value": "pseudo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_network(data).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_79": {
                "variable": {
                    "value": "correct_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pseudo == label",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "from_numpy_138": {
                "variable": {
                    "value": "temp_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('{}/feature_rank_{}.npy'.format(save_root, i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "temp_score",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.load('{}/score_rank_{}.npy'.format(save_root, i))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "score_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(score_tensor, temp_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "feature_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feature_tensor, temp_feature)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "labelers/offline_gnn/model/models.py": {
        "torch": {
            "Parameter_19": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(nfeat, nclass)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_28": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gc1(x, adj)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(x, adj)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_features",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gc1(x, adj)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(x, adj)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gc1(x, adj)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.gc2(x, adj)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "labelers/offline_gnn/model/train_epoch.py": {
        "torch": {
            "Adam_14": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_86": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_171": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_235": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_275": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_370": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ],
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ],
                        [
                            "weight_decay",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_28": {
                "variable": {
                    "value": "shuffle_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_180": {
                "variable": {
                    "value": "shuffle_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_289": {
                "variable": {
                    "value": "shuffle_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "randperm_379": {
                "variable": {
                    "value": "shuffle_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "data_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ],
                        [
                            "len(train_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_102": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labels.cuda()",
                            "Call"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "logits_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits_list, output_sub.detach().cpu()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "empty_cache_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_220": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_248": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labels.cuda()",
                            "Call"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_362": {
                "variable": {
                    "value": "logits_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits_list, output_sub.detach().cpu()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_418": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_32": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels[shuffle_idx].cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "train_softlabels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "output.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_106": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_softlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.size(0), output.size(1)).scatter_(1, train_labels.cpu().view(-1, 1), 1).cuda()",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "empty_cache_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_184": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels[shuffle_idx].cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_250": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labels.cuda()",
                            "Call"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ],
                        [
                            "train_labels",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_293": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels[shuffle_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_383": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels[shuffle_idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "shuffled_train_softlabels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "output.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_35": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "shuffled_train_softlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.size(0), output.size(1)).scatter_(1, train_labels[shuffle_idx].cpu().view(-1, 1), 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.size(0), output.size(1)).scatter_(1, train_labels[shuffle_idx].view(-1, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_53": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs].cuda()",
                            "Call"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs].cuda()",
                            "Call"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs]",
                            "Subscript"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_186": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels[shuffle_idx].cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_204": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs].cuda()",
                            "Call"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs].cuda()",
                            "Call"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs]",
                            "Subscript"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_295": {
                "variable": {
                    "value": "shuffled_train_softlabels",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "output.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_296": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "shuffled_train_softlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.size(0), output.size(1)).scatter_(1, train_labels[shuffle_idx].cpu().view(-1, 1), 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.size(0), output.size(1)).scatter_(1, train_labels[shuffle_idx].view(-1, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_314": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs].cuda()",
                            "Call"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs].cuda()",
                            "Call"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs]",
                            "Subscript"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_385": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels[shuffle_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_403": {
                "variable": {
                    "value": "loss_train",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs].cuda()",
                            "Call"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs].cuda()",
                            "Call"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs]",
                            "Subscript"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "train_softlabels_sub",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "output.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_56": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_softlabels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.size(0), output.size(1)).scatter_(1, train_labels_sub.cpu().view(-1, 1), 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.size(0), output.size(1)).scatter_(1, train_labels_sub.cpu().view(-1, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_206": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs].cuda()",
                            "Call"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs].cuda()",
                            "Call"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs]",
                            "Subscript"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_316": {
                "variable": {
                    "value": "train_softlabels_sub",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "output.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_317": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_softlabels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(output.size(0), output.size(1)).scatter_(1, train_labels_sub.cpu().view(-1, 1), 1).cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(output.size(0), output.size(1)).scatter_(1, train_labels_sub.cpu().view(-1, 1), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_405": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(features[idx_test].cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx].cuda())",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(train_features)",
                            "Call"
                        ],
                        [
                            "model(val_features.cuda())",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "model(features)",
                            "Call"
                        ],
                        [
                            "model(train_features[shuffle_idx])",
                            "Call"
                        ],
                        [
                            "model(val_features)",
                            "Call"
                        ],
                        [
                            "model(train_features_sub)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "train_labels_sub",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs].cuda()",
                            "Call"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs].cuda()",
                            "Call"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs]",
                            "Subscript"
                        ],
                        [
                            "train_labels[shuffle_idx][i * bs:(i + 1) * bs]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "labelers/offline_gnn/train/train.py": {
        "torch": {
            "cat_194": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature, agg_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_200": {
                "variable": {
                    "value": "sgc_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/sgc_model.pth'.format(save_root)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_215": {
                "obj": {
                    "value": "sgc_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_path).cuda()",
                            "Call"
                        ],
                        [
                            "model.get_model('SGC', features.size(1), cls_num, nhid=0, dropout=dropout, cuda=use_cuda)",
                            "Call"
                        ],
                        [
                            "model.train_regression(sgc_model, features[seed_index], label[seed_index], features[val_idx], label[val_idx], epochs_num, weight_decay, lr, loss_type, batch_size, reweight, dropout)",
                            "Call"
                        ],
                        [
                            "model.train_regression_nocuda(sgc_model, features[seed_index], label[seed_index], features[val_idx], label[val_idx], epochs_num, weight_decay, lr, loss_type, batch_size, reweight, dropout)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/sgc_model.pth'.format(save_root)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_221": {
                "data": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.test_regression(sgc_model, features, label, train_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "model.test_regression_nocuda(sgc_model, features, label, train_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "np.array(torch.tensor(pred_labels).cpu())",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_222": {
                "input": {
                    "value": "pred_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.test_regression(sgc_model, features, label, train_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "model.test_regression_nocuda(sgc_model, features, label, train_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "np.array(torch.sigmoid(pred_logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_230": {
                "data": {
                    "value": "val_pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.test_regression(sgc_model, features, label, val_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "model.test_regression_nocuda(sgc_model, features, label, val_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "np.array(torch.tensor(val_pred_labels).cpu())",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_231": {
                "input": {
                    "value": "val_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.test_regression(sgc_model, features, label, val_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "model.test_regression_nocuda(sgc_model, features, label, val_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "np.array(torch.sigmoid(val_logits))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "labelers/offline_gnn/train/train_progressive.py": {
        "torch": {
            "cat_143": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[feature, agg_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_174": {
                "obj": {
                    "value": "sgc_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.get_model('SGC', features.size(1), cls_num, nhid=0, dropout=dropout, cuda=use_cuda)",
                            "Call"
                        ],
                        [
                            "model.train_regression_with_softlabel_nocuda(sgc_model, features[new_seed_idx], seed_softlabel, features[val_idx], label[val_idx], seed_reweight_list, epochs_num, weight_decay, lr, loss_type, batch_size, dropout)",
                            "Call"
                        ],
                        [
                            "model.train_regression_with_softlabel_fast(sgc_model, features[new_seed_idx], seed_softlabel, features[val_idx], label[val_idx], seed_reweight_list, epochs_num, weight_decay, lr, loss_type, batch_size, dropout)",
                            "Call"
                        ],
                        [
                            "model.train_regression_with_softlabel(sgc_model, features[new_seed_idx], seed_softlabel, features[val_idx], label[val_idx], seed_reweight_list, epochs_num, weight_decay, lr, loss_type, batch_size, dropout)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{}/sgc_model.pth'.format(save_root)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_180": {
                "data": {
                    "value": "pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.test_regression(sgc_model, features, label, train_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "model.test_regression_nocuda(sgc_model, features, label, train_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "np.array(torch.tensor(pred_labels).cpu())",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_181": {
                "input": {
                    "value": "pred_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(args.train_score_path)",
                            "Call"
                        ],
                        [
                            "model.test_regression(sgc_model, features, label, train_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "model.test_regression_nocuda(sgc_model, features, label, train_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "np.array(torch.sigmoid(pred_logits))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_189": {
                "data": {
                    "value": "val_pred_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.test_regression(sgc_model, features, label, val_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "model.test_regression_nocuda(sgc_model, features, label, val_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "np.array(torch.tensor(val_pred_labels).cpu())",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_190": {
                "input": {
                    "value": "val_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.test_regression(sgc_model, features, label, val_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "model.test_regression_nocuda(sgc_model, features, label, val_idx, batch_size)",
                            "Call"
                        ],
                        [
                            "np.array(torch.sigmoid(val_logits))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "labelers/offline_gnn/utils/knn_utils.py": {
        "torch": {
            "from_numpy_139": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "labelers/online_cnn/distillation_patch.py": {
        "torch": {
            "no_grad_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_121": {
                "variable": {
                    "value": "pseudo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['pseudo_label']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "batch[pseudo_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "score.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "score.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_127": {
                "variable": {
                    "value": "batch[pseudo_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['pseudo_label']",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1 / self.config.distillation.label_sharpenT",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "networks/load_ckpt_unstrict.py": {
        "torch": {
            "load_5": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(torch.cuda.current_device())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_5": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "networks/resnet_modify.py": {
        "torch": {
            "avg_pool2d_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.pow(self.p)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(x.size(-2), x.size(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pow_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 / self.p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(conf.projector.n_features, conf.projector.n_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_12": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x / (torch.norm(x, p=2, dim=1, keepdim=True) + self.eps).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "x.clamp(min=self.eps)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x.pow(self.p), (x.size(-2), x.size(-1))).pow(1.0 / self.p)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "net.view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "net.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "net.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(conf.projector.n_features, conf.projector.n_features, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "conf.projector.n_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "conf.projector.n_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "conf.projector.n_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "conf.projector.projection_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "conf.projector.n_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conf.projector.n_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "conf.projector.n_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "conf.projector.n_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conf.projector.projection_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "conf.projector.projection_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pipelines/WSL/offline_SCC_patch.py": {
        "torch": {
            "pow_15": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(conf, t).float()",
                            "Call"
                        ],
                        [
                            "self.config.data[name]",
                            "Subscript"
                        ],
                        [
                            "conf",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "synchronize_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_50": {
                "variable": {
                    "value": "pseudo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['pseudo_label']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "batch[pseudo_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "score.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "score.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_57": {
                "variable": {
                    "value": "batch[pseudo_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch['pseudo_label']",
                            "Subscript"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1 / self.config.SCC_setting.label_sharpenT",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pipelines/WSL/online_SCC_patch.py": {
        "torch": {
            "pow_17": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(conf, t).float()",
                            "Call"
                        ],
                        [
                            "torch.sum(batch_teacher['soft_label'] * score, dim=1)",
                            "Call"
                        ],
                        [
                            "self.config.data[name]",
                            "Subscript"
                        ],
                        [
                            "conf",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "synchronize_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_teacher",
                    "type": "variable",
                    "possible_values": [
                        [
                            "teacher_network(batch_teacher['aux_data'])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_67": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_teacher['soft_label'] * score",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_58": {
                "variable": {
                    "value": "pseudo",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.sigmoid(logit_teacher)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "batch[pseudo_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "score.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "score.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_65": {
                "variable": {
                    "value": "batch[pseudo_label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.sigmoid(logit_teacher)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "1 / self.config.SCC_setting.label_sharpenT",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "pipelines/baseline/reweight_patch.py": {
        "torch": {
            "synchronize_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rulers/WSL/reweight_patch.py": {
        "torch": {
            "binary_cross_entropy_with_logits_13": {
                "variable": {
                    "value": "sum_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['logit']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "data['soft_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_17": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['logit']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "data['soft_label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "accu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "accu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/data/__init__.py": {
        "torch": {}
    },
    "runner_master/runner/data/dataloader.py": {
        "torch": {
            "set_device_162": {
                "device": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "set_num_threads_112": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_114": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_220": {
                "tensors": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.collate_fn([self.dataset[i] for i in indices])",
                            "Call"
                        ],
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.reorder_dict.pop(self.rcvd_idx)",
                            "Call"
                        ],
                        [
                            "self._get_batch()",
                            "Call"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ],
                        [
                            "batch",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "Event_346": {
                "variable": {
                    "value": "self.done_event",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchSampler_641": {
                "variable": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_330": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_229": {
                "tensors": {
                    "value": "[torch.from_numpy(b) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "RandomSampler_638": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SequentialSampler_640": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_229": {
                "ndarray": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "current_device_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/data/datasets/base_dataset.py": {
        "torch": {}
    },
    "runner_master/runner/data/datasets/imglist_dataset_v2.py": {
        "torch": {
            "rand_70": {
                "variable": {
                    "value": "sample[data]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.dummy_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/data/samplers/distributed_sampler.py": {
        "torch": {
            "Generator_22": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_23": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_35": {
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/distributed/misc.py": {
        "torch": {
            "device_count_168": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_35": {
                "variable": {
                    "value": "sync_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "synchronize_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_170": {
                "device": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rank % num_gpus",
                            "BinOp"
                        ]
                    ]
                }
            },
            "broadcast_89": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list",
                            "variable"
                        ],
                        [
                            "tensor_list",
                            "variable"
                        ],
                        [
                            "tensor_list",
                            "variable"
                        ],
                        [
                            "tensor_list",
                            "variable"
                        ],
                        [
                            "tensor_list",
                            "variable"
                        ],
                        [
                            "tensor_list",
                            "variable"
                        ]
                    ]
                },
                "devices": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_103": {
                "variable": {
                    "value": "gather_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "gather_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tensor.new(*tensor.size()) for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "cat_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "runner_master/runner/distributed/simple_sync.py": {
        "torch": {}
    },
    "runner_master/runner/load.py": {
        "torch": {}
    },
    "runner_master/runner/losses/__init__.py": {
        "torch": {
            "cross_entropy_11": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_13": {
                "input": {
                    "value": "torch.sum(torch.mul(F.log_softmax(outputs, dim=1), F.softmax(labels, dim=1)), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_13": {
                "input": {
                    "value": "torch.mul(F.log_softmax(outputs, dim=1), F.softmax(labels, dim=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_13": {
                "input": {
                    "value": "F.log_softmax(outputs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "F.softmax(labels, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_13": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_14": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/metrics/sce.py": {
        "torch": {}
    },
    "runner_master/runner/models/gluon/resnet.py": {
        "torch": {
            "Sequential_50": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(channels, neck_channels, kernel_size=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_groups",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_91": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_94": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_groups",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "in_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_121": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "neck_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_groups",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_123": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_124": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_126": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_127": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_154": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_155": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "in_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_157": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_158": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "neck_stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "stride",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "stride",
                            "variable"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_groups",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_160": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_161": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_203": {
                "*args": {
                    "value": "*stem",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_213": {
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_261": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_316": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_320": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_321": {
                "variable": {
                    "value": "self.view",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_322": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_200": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_201": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_202": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_253": {
                "variable": {
                    "value": "self.output_stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_255": {
                "variable": {
                    "value": "self.output_stem",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(channels[4])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_329": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.fc.in_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "num_classes",
                            "Method Argument"
                        ],
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_340": {
                "variable": {
                    "value": "new_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "old_conv.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "old_conv.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "old_conv.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "old_conv.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "old_conv.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "old_conv.groups",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "old_conv.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "old_conv.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[m * base_channels for m in mul]",
                            "ListComp"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[m * base_channels for m in mul]",
                            "ListComp"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 1, stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "*args": {
                    "value": "nn.AvgPool2d(stride, stride, ceil_mode=True, count_include_pad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "*args": {
                    "value": "nn.AvgPool2d(stride, stride, ceil_mode=True, count_include_pad=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_256": {
                "num_features": {
                    "value": "channels[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_257": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_33": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AvgPool2d_39": {
                "kernel_size": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ],
                        [
                            "stride",
                            "Method Argument"
                        ]
                    ]
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_192": {
                "num_features": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_193": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_194": {
                "in_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_195": {
                "num_features": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_196": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "in_channels": {
                    "value": "neck_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels // 2",
                            "BinOp"
                        ],
                        [
                            "max(1, channels // ratio)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ],
                        [
                            "round(out_channels / shrink)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/network_initializers/load_ckpt.py": {
        "torch": {
            "load_13": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt",
                            "Method Argument"
                        ],
                        [
                            "ckpt",
                            "Method Argument"
                        ],
                        [
                            "ckpt",
                            "Method Argument"
                        ],
                        [
                            "ckpt",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(torch.cuda.current_device())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_24": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt",
                            "Method Argument"
                        ],
                        [
                            "ckpt",
                            "Method Argument"
                        ],
                        [
                            "ckpt",
                            "Method Argument"
                        ],
                        [
                            "ckpt",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(torch.cuda.current_device())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/operators/flatten.py": {
        "torch": {
            "Flatten_12": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_18": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_20": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/operators/functional.py": {
        "torch": {}
    },
    "runner_master/runner/operators/gapool.py": {
        "torch": {
            "AdaptiveAvgPool2d_17": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_28": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "CEIL_MODE",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(input_size, stride=1, ceil_mode=CEIL_MODE)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_40": {
                "input": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_20": {
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_31": {
                "kernel_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "CEIL_MODE",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/optimizers/__init__.py": {
        "torch": {}
    },
    "runner_master/runner/optimizers/param_groups.py": {
        "torch": {}
    },
    "runner_master/runner/pipelines/eval_pipeline_v2.py": {
        "torch": {
            "no_grad_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/pipelines/learn_pipeline_v2.py": {
        "torch": {
            "load_254": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config.resume",
                            "Attribute"
                        ],
                        [
                            "fulldir / save_name",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "'cuda:{}'.format(torch.cuda.current_device())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_469": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_473": {
                "variable": {
                    "value": "fast_metric_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_576": {
                "obj": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "str(curr_path)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "synchronize_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_rng_state_276": {
                "new_state": {
                    "value": "rng_state['torch'].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_rng_state_277": {
                "new_state": {
                    "value": "rng_state['torch.cuda'].cpu()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_406": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_545": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_546": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/pipelines/rulers.py": {
        "torch": {
            "binary_cross_entropy_with_logits_58": {
                "variable": {
                    "value": "sum_bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data['logit']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "data['label']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_52": {
                "input": {
                    "value": "data['logit']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "data['label']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/record.py": {
        "torch": {
            "synchronize_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/setup.py": {
        "torch": {
            "manual_seed_36": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_37": {
                "seed": {
                    "value": "config.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/transforms/batch/default_collate.py": {
        "torch": {}
    },
    "runner_master/runner/transforms/batch/mixup.py": {
        "torch": {
            "no_grad_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_30": {
                "variable": {
                    "value": "permute_index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[first_key].size(0)",
                            "Call"
                        ],
                        [
                            "tensor.size(0)",
                            "Call"
                        ],
                        [
                            "batch['data'].size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_32": {
                "variable": {
                    "value": "permute_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "mix1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.beta(self.a, self.b, N).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_87": {
                "variable": {
                    "value": "permute_index",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch[first_key].size(0)",
                            "Call"
                        ],
                        [
                            "tensor.size(0)",
                            "Call"
                        ],
                        [
                            "batch['data'].size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_89": {
                "variable": {
                    "value": "permute_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "N - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "mix1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.beta(self.a, self.b, N).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/transforms/batch/tensor.py": {
        "torch": {}
    },
    "runner_master/runner/transforms/extra/single_label.py": {
        "torch": {
            "Tensor_34": {
                "variable": {
                    "value": "final_label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_62": {
                "variable": {
                    "value": "soft_label",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/transforms/image/fancy_pca.py": {
        "torch": {
            "Tensor_11": {
                "variable": {
                    "value": "eig_vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "t_11": {
                "variable": {
                    "value": "eig_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_17": {
                "variable": {
                    "value": "eig_val",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mm_26": {
                "variable": {
                    "value": "quatity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.eig_val.to(device) * alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.eig_vec.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_32": {
                "variable": {
                    "value": "quatity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.eig_val.to(device) * alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.eig_vec.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_25": {
                "mean": {
                    "value": "torch.zeros(1, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_31": {
                "mean": {
                    "value": "torch.zeros(batch_size, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "runner_master/runner/transforms/image/normalize.py": {
        "torch": {
            "is_tensor_11": {
                "obj": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "runner_master/runner/utils/rank0_tensor_cache.py": {
        "torch": {
            "cat_88": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(cache)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}