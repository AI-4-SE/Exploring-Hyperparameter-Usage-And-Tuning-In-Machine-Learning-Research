{
    "logger/tensorboard_logger.py": {
        "tensorflow": {
            "FileWriter_21": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Summary_25": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, simple_value=value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Summary_48": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_58": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Summary_75": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=tag, histo=hist)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "coil_core/run_drive.py": {
        "torch": {
            "load_91": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('_logs', exp_batch, exp_alias, 'checkpoints', str(checkpoint_number) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "coil_core/train.py": {
        "torch": {
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "g_conf.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_64": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('_logs', g_conf.PRELOAD_MODEL_BATCH, g_conf.PRELOAD_MODEL_ALIAS, 'checkpoints', str(g_conf.PRELOAD_MODEL_CHECKPOINT) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_74": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('_logs', exp_batch, exp_alias, 'checkpoints', str(get_latest_saved_checkpoint()))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_191": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output - dataset.extract_targets(data).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_142": {
                "input": {
                    "value": "data['rgb'].cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'iteration': iteration, 'state_dict': model.state_dict(), 'best_loss': best_loss, 'total_time': accumulated_time, 'optimizer': optimizer.state_dict(), 'best_loss_iter': best_loss_iter}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join('_logs', exp_batch, exp_alias, 'checkpoints', str(iteration) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_182": {
                "input": {
                    "value": "data['rgb']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_190": {
                "tensors": {
                    "value": "branches[0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "coil_core/validate.py": {
        "torch": {
            "DataLoader_85": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CoILDataset(full_dataset, transform=augmenter, preload_name=dataset_name)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "g_conf.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "g_conf.NUMBER_OF_LOADING_WORKERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_110": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('_logs', exp_batch, exp_alias, 'checkpoints', str(latest) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_142": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output - dataset.extract_targets(data).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_125": {
                "input": {
                    "value": "data['rgb']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_134": {
                "input": {
                    "value": "(output - dataset.extract_targets(data).cuda()) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_136": {
                "input": {
                    "value": "torch.abs(output - dataset.extract_targets(data).cuda())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_137": {
                "input": {
                    "value": "output - dataset.extract_targets(data).cuda()",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "coilutils/checking.py": {
        "torch": {
            "is_tensor_9": {
                "obj": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img",
                            "Method Argument"
                        ],
                        [
                            "img",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "drive/CoILBaseline.py": {
        "torch": {
            "load_53": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('/', os.path.join(*os.path.realpath(__file__).split('/')[:-2]), '_logs', yaml_conf.split('/')[-2], yaml_conf.split('/')[-1].split('.')[-2], 'checkpoints', str(checkpoint_number) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_103": {
                "variable": {
                    "value": "norm_speed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "sensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sensor / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_136": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_layers[layer]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_136": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "drive/coil_agent.py": {
        "torch": {
            "unsqueeze_73": {
                "variable": {
                    "value": "norm_speed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_143": {
                "variable": {
                    "value": "sensor",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sensor / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "image_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_input, sensor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_118": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_layers[layer]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_118": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "input/coil_dataset.py": {
        "torch": {
            "from_numpy_114": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.imread(img_path, cv2.IMREAD_COLOR)",
                            "Call"
                        ],
                        [
                            "self.transform(self.batch_read_number * boost, img)",
                            "Call"
                        ],
                        [
                            "img.transpose(2, 0, 1)",
                            "Call"
                        ],
                        [
                            "img.astype(np.float)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_369": {
                "tensors": {
                    "value": "targets_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_388": {
                "tensors": {
                    "value": "inputs_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_407": {
                "tensors": {
                    "value": "inputs_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([v])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_130": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.asarray([v])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "input/coil_sampler.py": {
        "torch": {
            "from_numpy_104": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_153": {
                "variable": {
                    "value": "self.optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.weights]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_168": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(self.weights)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.0 / float(len(self.keys))] * len(self.keys), dtype=torch.double)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.0 / float(len(self.keys[0]))] * len(self.keys[0]), dtype=torch.double)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.weights)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "self.iterations_to_execute",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_174": {
                "variable": {
                    "value": "obj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.weights * advantage",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multinomial_107": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(self.weights)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.0 / float(len(self.keys))] * len(self.keys), dtype=torch.double)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.0 / float(len(self.keys[0]))] * len(self.keys[0]), dtype=torch.double)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.weights)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "self.iterations_to_execute",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 / float(len(self.keys))] * len(self.keys)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(self.weights)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.0 / float(len(self.keys))] * len(self.keys), dtype=torch.double)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.0 / float(len(self.keys[0]))] * len(self.keys[0]), dtype=torch.double)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.weights)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 / float(len(self.keys))] * len(self.keys)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_114": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(self.weights)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.0 / float(len(self.keys))] * len(self.keys), dtype=torch.double)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.0 / float(len(self.keys[0]))] * len(self.keys[0]), dtype=torch.double)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.weights)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "self.iterations_to_execute",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1.0 / float(len(self.keys[0]))] * len(self.keys[0])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_118": {
                "variable": {
                    "value": "idy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(self.weights)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.0 / float(len(self.keys))] * len(self.keys), dtype=torch.double)",
                            "Call"
                        ],
                        [
                            "torch.tensor([1.0 / float(len(self.keys[0]))] * len(self.keys[0]), dtype=torch.double)",
                            "Call"
                        ],
                        [
                            "F.softmax(self.weights)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "self.iterations_to_execute",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normal_179": {
                "mean": {
                    "value": "torch.zeros(N)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "perturb * torch.ones(N)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_179": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_179": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.weights)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "input/splitter.py": {
        "torch": {
            "DataLoader_402": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "g_conf.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(keys, iteration * g_conf.BATCH_SIZE)",
                            "Call"
                        ],
                        [
                            "PreSplittedSampler(keys_splitted, iteration * g_conf.BATCH_SIZE, weights)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "number_of_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "number_of_workers",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "network/loss.py": {
        "torch": {
            "sum_58": {
                "input": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_branches_vec[0] + loss_branches_vec[1] + loss_branches_vec[2] + loss_branches_vec[3]",
                            "BinOp"
                        ],
                        [
                            "loss_function",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_59": {
                "input": {
                    "value": "speed_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_branches_vec[4] / params['branches'][0].shape[0]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "network/loss_functional.py": {
        "torch": {
            "add_29": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(loss, alpha * wdecay)",
                            "Call"
                        ],
                        [
                            "torch.add(loss, alpha * wdecay)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "alpha * wdecay",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_51": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.add(loss, alpha * wdecay)",
                            "Call"
                        ],
                        [
                            "torch.add(loss, alpha * wdecay)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "alpha * wdecay",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "variable": {
                    "value": "controls_b1",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "controls_b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "controls == 2",
                            "Compare"
                        ],
                        [
                            "torch.tensor(controls_b1, dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([controls_b1] * number_targets, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_74": {
                "variable": {
                    "value": "controls_b1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[controls_b1] * number_targets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "controls_b2",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "controls_b2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "controls == 3",
                            "Compare"
                        ],
                        [
                            "torch.tensor(controls_b2, dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([controls_b2] * number_targets, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "controls_b2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[controls_b2] * number_targets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "controls_b3",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "controls_b3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "controls == 4",
                            "Compare"
                        ],
                        [
                            "torch.tensor(controls_b3, dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([controls_b3] * number_targets, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "controls_b3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[controls_b3] * number_targets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "controls_b4",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "controls_b4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "controls == 5",
                            "Compare"
                        ],
                        [
                            "torch.tensor(controls_b4, dtype=torch.float32).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat([controls_b4] * number_targets, 1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "controls_b4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[controls_b4] * number_targets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_20": {
                "variable": {
                    "value": "(intention, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "intention_factors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intention_factors",
                            "Method Argument"
                        ],
                        [
                            "intention_factors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_42": {
                "variable": {
                    "value": "(intention, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "intention_factors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intention_factors",
                            "Method Argument"
                        ],
                        [
                            "intention_factors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_16": {
                "variable": {
                    "value": "wdecay",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(torch.abs(w))",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "wdecay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.add(torch.sum(torch.abs(w)), wdecay)",
                            "Call"
                        ],
                        [
                            "wdecay * intention.shape[0] / torch.sum(intention)",
                            "BinOp"
                        ],
                        [
                            "wdecay * torch.sum(intention) / intention.shape[0]",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.add(torch.sum(w ** 2), wdecay)",
                            "Call"
                        ],
                        [
                            "wdecay * intention.shape[0] / torch.sum(intention)",
                            "BinOp"
                        ],
                        [
                            "wdecay * torch.sum(intention) / intention.shape[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_38": {
                "variable": {
                    "value": "wdecay",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(w ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "wdecay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.add(torch.sum(torch.abs(w)), wdecay)",
                            "Call"
                        ],
                        [
                            "wdecay * intention.shape[0] / torch.sum(intention)",
                            "BinOp"
                        ],
                        [
                            "wdecay * torch.sum(intention) / intention.shape[0]",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "torch.add(torch.sum(w ** 2), wdecay)",
                            "Call"
                        ],
                        [
                            "wdecay * intention.shape[0] / torch.sum(intention)",
                            "BinOp"
                        ],
                        [
                            "wdecay * torch.sum(intention) / intention.shape[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_148": {
                "input": {
                    "value": "params['branches'][-1] - params['inputs']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_16": {
                "input": {
                    "value": "torch.abs(w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "intention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(intention_factors, 1)",
                            "Call"
                        ],
                        [
                            "(1.0 > intention).float()",
                            "Call"
                        ],
                        [
                            "torch.min(intention_factors, 1)",
                            "Call"
                        ],
                        [
                            "(1.0 > intention).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_38": {
                "input": {
                    "value": "w ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_46": {
                "input": {
                    "value": "intention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(intention_factors, 1)",
                            "Call"
                        ],
                        [
                            "(1.0 > intention).float()",
                            "Call"
                        ],
                        [
                            "torch.min(intention_factors, 1)",
                            "Call"
                        ],
                        [
                            "(1.0 > intention).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_143": {
                "input": {
                    "value": "(params['branches'][i] - params['targets']) * params['controls_mask'][i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_16": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_27": {
                "input": {
                    "value": "intention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(intention_factors, 1)",
                            "Call"
                        ],
                        [
                            "(1.0 > intention).float()",
                            "Call"
                        ],
                        [
                            "torch.min(intention_factors, 1)",
                            "Call"
                        ],
                        [
                            "(1.0 > intention).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_49": {
                "input": {
                    "value": "intention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(intention_factors, 1)",
                            "Call"
                        ],
                        [
                            "(1.0 > intention).float()",
                            "Call"
                        ],
                        [
                            "torch.min(intention_factors, 1)",
                            "Call"
                        ],
                        [
                            "(1.0 > intention).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "network/models/building_blocks/branching.py": {
        "torch": {
            "ModuleList_21": {
                "variable": {
                    "value": "self.branched_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "branched_modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "network/models/building_blocks/conv.py": {
        "torch": {
            "Sequential_49": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "params['channels'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "params['channels'][i + 1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "params['kernels'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "params['strides'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout2d_41": {
                "variable": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "params['dropouts'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_42": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "variable": {
                    "value": "bn",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "params['channels'][i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[conv, bn, dropout, relu]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "rand_77": {
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "network/models/building_blocks/fc.py": {
        "torch": {
            "Sequential_47": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "params['neurons'][i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "params['neurons'][i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout2d_38": {
                "variable": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "params['dropouts'][i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "relu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "*args": {
                    "value": "*[fc, dropout]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "*args": {
                    "value": "*[fc, dropout, relu]",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "network/models/building_blocks/join.py": {
        "torch": {
            "cat_38": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, m)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "network/models/building_blocks/resnet.py": {
        "torch": {
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_106": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_111": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "6144",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1536",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "network/models/coil_icra.py": {
        "torch": {
            "stack_140": {
                "variable": {
                    "value": "output_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.forward(x, a)[0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_156": {
                "variable": {
                    "value": "branch_number",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[branch_number, torch.cuda.LongTensor(range(0, len(branch_number)))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.perception",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[perception_convs, perception_fc]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "squeeze_152": {
                "variable": {
                    "value": "branch_number",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "branch_number.type(torch.cuda.LongTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "view_model.py": {
        "torch": {
            "load_74": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('_logs', args.folder, args.exp, 'checkpoints', str(args.checkpoint) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}