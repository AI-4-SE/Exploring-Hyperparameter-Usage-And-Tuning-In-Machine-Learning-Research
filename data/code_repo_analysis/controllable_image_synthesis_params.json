{
    "controllable_gan/config.py": {
        "torch": {
            "RMSprop_63": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "generator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_g']",
                            "Subscript"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSprop_64": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "d_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_d']",
                            "Subscript"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_198": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ObjectDataset(data_dirs, split, transforms=transforms, nlabels=nlabels)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_120": {
                "data": {
                    "value": "float(shift)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_177": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "controllable_gan/loss.py": {
        "torch": {
            "from_numpy_31": {
                "variable": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.stack((u, v, np.ones_like(u)), axis=2)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(uv).float()",
                            "Call"
                        ],
                        [
                            "uv.flatten(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.bmm(xyz, Kt)",
                            "Call"
                        ],
                        [
                            "uv[:, :, :2] / (torch.nn.functional.relu(d) + 1e-12)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bmm_57": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz - t.view(bs, 1, 3)",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(xyz, R)",
                            "Call"
                        ],
                        [
                            "depth.view(bs, -1, 1) * ray",
                            "BinOp"
                        ],
                        [
                            "self.transform(xyz, R, t)",
                            "Call"
                        ],
                        [
                            "torch.bmm(xyz, R.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "xyz + t.reshape(bs, 1, 3)",
                            "BinOp"
                        ],
                        [
                            "self.unproject(depth0, R0, t0)",
                            "Call"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_61": {
                "variable": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz - t.view(bs, 1, 3)",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(xyz, R)",
                            "Call"
                        ],
                        [
                            "depth.view(bs, -1, 1) * ray",
                            "BinOp"
                        ],
                        [
                            "self.transform(xyz, R, t)",
                            "Call"
                        ],
                        [
                            "torch.bmm(xyz, R.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "xyz + t.reshape(bs, 1, 3)",
                            "BinOp"
                        ],
                        [
                            "self.unproject(depth0, R0, t0)",
                            "Call"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Kt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.K.transpose(1, 2).expand(bs, -1, -1).to(xyz.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "L1Loss_79": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_90": {
                "variable": {
                    "value": "depth10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "depth1",
                            "Method Argument"
                        ],
                        [
                            "depth1",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "uv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.uv_transformer(depth0, R0, t0, R1, t1)",
                            "Call"
                        ],
                        [
                            "uv1.view(-1, self.H, self.W, 2)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "grid_sample_91": {
                "variable": {
                    "value": "rgb10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._x_to_input(x1, idx)",
                            "Call"
                        ],
                        [
                            "rgb1",
                            "Method Argument"
                        ],
                        [
                            "rgb1",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "uv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.uv_transformer(depth0, R0, t0, R1, t1)",
                            "Call"
                        ],
                        [
                            "uv1.view(-1, self.H, self.W, 2)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_95": {
                "variable": {
                    "value": "loss_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss_fn(rgb0.view(bs, 3, -1), rgb10.view(bs, 3, -1))",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_rgb, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "loss_rgb * mask0",
                            "BinOp"
                        ],
                        [
                            "loss_rgb * mask_clamp",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loss_rgb).mean()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_171": {
                "variable": {
                    "value": "loss_d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss_fn(d1.view(-1), depth10.view(-1))",
                            "Call"
                        ],
                        [
                            "loss_d * mask0",
                            "BinOp"
                        ],
                        [
                            "loss_d * mask_clamp",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loss_d).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_171": {
                "variable": {
                    "value": "loss_d",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "loss_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.loss_fn(rgb0.view(bs, 3, -1), rgb10.view(bs, 3, -1))",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_rgb, dim=1).view(-1)",
                            "Call"
                        ],
                        [
                            "loss_rgb * mask0",
                            "BinOp"
                        ],
                        [
                            "loss_rgb * mask_clamp",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(loss_rgb).mean()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_172": {
                "variable": {
                    "value": "loss_rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_18": {
                "input": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_out['prim_area'].clamp(min=0.1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_42": {
                "variable": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xyz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xyz - t.view(bs, 1, 3)",
                            "BinOp"
                        ],
                        [
                            "torch.bmm(xyz, R)",
                            "Call"
                        ],
                        [
                            "depth.view(bs, -1, 1) * ray",
                            "BinOp"
                        ],
                        [
                            "self.transform(xyz, R, t)",
                            "Call"
                        ],
                        [
                            "torch.bmm(xyz, R.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "xyz + t.reshape(bs, 1, 3)",
                            "BinOp"
                        ],
                        [
                            "self.unproject(depth0, R0, t0)",
                            "Call"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ],
                        [
                            "xyz",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RT[..., :3]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "R",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_160": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x['layers_depth_rescaled'].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "relu_64": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "uv[:, :, 2:3]",
                            "Subscript"
                        ],
                        [
                            "x['layers_depth_rescaled'][idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randperm_158": {
                "n": {
                    "value": "batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x['layers_depth_rescaled'].shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "controllable_gan/model.py": {
        "torch": {
            "cat_150": {
                "variable": {
                    "value": "prim",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[prim[:, :-1], depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rgb_fuse, depth_fuse]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_262": {
                "variable": {
                    "value": "img_single",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[rgb_single, depth_single]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_277": {
                "variable": {
                    "value": "obj_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x['R'].shape[0] // self.n_fg",
                            "BinOp"
                        ],
                        [
                            "x['layers_rgb'].shape[0] // self.n_fg",
                            "BinOp"
                        ],
                        [
                            "int(img_fg.shape[0] / self.n_fg)",
                            "Call"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "self.n_fg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_278": {
                "variable": {
                    "value": "n_masked",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.n_fg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(bs,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argsort_303": {
                "variable": {
                    "value": "depth_order",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "depth_fg.squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_306": {
                "variable": {
                    "value": "img_fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_fg[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_307": {
                "variable": {
                    "value": "alpha_fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_fg[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_309": {
                "variable": {
                    "value": "pixel_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs * h * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_177": {
                "variable": {
                    "value": "bg_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_bg[:, 4:5]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "img_bg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_bg[:, :4], bg_depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_256": {
                "variable": {
                    "value": "depth_bg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x['R'].shape[0] // self.n_fg",
                            "BinOp"
                        ],
                        [
                            "x['layers_rgb'].shape[0] // self.n_fg",
                            "BinOp"
                        ],
                        [
                            "int(img_fg.shape[0] / self.n_fg)",
                            "Call"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*self.imsize",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_338": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, v_tf]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_340": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, v_tf]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_244": {
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x['R'].shape[0] // self.n_fg",
                            "BinOp"
                        ],
                        [
                            "x['layers_rgb'].shape[0] // self.n_fg",
                            "BinOp"
                        ],
                        [
                            "int(img_fg.shape[0] / self.n_fg)",
                            "Call"
                        ],
                        [
                            "bs",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*self.imsize",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randperm_280": {
                "n": {
                    "value": "self.n_fg",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_289": {
                "input": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prim[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "self.depth_local_to_global(depth, center_depth, inverse=True)",
                            "Call"
                        ],
                        [
                            "img[:, 4:5]",
                            "Subscript"
                        ],
                        [
                            "self.depth_local_to_global(depth, center_depth)",
                            "Call"
                        ],
                        [
                            "depth * max_offset",
                            "BinOp"
                        ],
                        [
                            "depth + center_depth.view(*center_depth.shape, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "depth - center_depth.view(*center_depth.shape, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "depth / max_offset",
                            "BinOp"
                        ],
                        [
                            "x['layers_depth'] / 2 + 0.5",
                            "BinOp"
                        ],
                        [
                            "depth * mask",
                            "BinOp"
                        ],
                        [
                            "depth + (1 - alpha) * depth_bg.repeat(self.n_fg, 1, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "depth.view(-1, self.n_fg, 1, *self.imsize)",
                            "Call"
                        ],
                        [
                            "torch.sort(depth, dim=1)[0][:, 0]",
                            "Subscript"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ],
                        [
                            "depth",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "controllable_gan/models/generator_2d.py": {
        "torch": {
            "leaky_relu_262": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv_img_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nfilter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nf1 * 2, nfilter_max)",
                            "Call"
                        ],
                        [
                            "max(nf1 // 2, nfilter_init)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_nc",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_161": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.resnet(im)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.cat(out, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x_reshaped, running_mean, running_var, self.weight, self.bias, True, self.momentum, self.eps)",
                            "Call"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Sequential_173": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "batch_norm_207": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_reshaped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.contiguous().view(1, b * c, h, w)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_mean.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_var.repeat(b)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_235": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "is_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_155": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.resnet(im)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.cat(out, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "F.batch_norm(x_reshaped, running_mean, running_var, self.weight, self.bias, True, self.momentum, self.eps)",
                            "Call"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_237": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_240": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.conv_0, norm_layer(self.fhidden)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_241": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[self.conv_1, norm_layer(self.fout)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_169": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_193": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_194": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_171": {
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_171": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "nf0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilter",
                            "variable"
                        ],
                        [
                            "nf1",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nf1 * 2, nfilter_max)",
                            "Call"
                        ],
                        [
                            "max(nf1 // 2, nfilter_init)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_70": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "nf1_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf1",
                            "variable"
                        ],
                        [
                            "nf1",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nf1 * 2, nfilter_max)",
                            "Call"
                        ],
                        [
                            "max(nf1 // 2, nfilter_init)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "nf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nf1 * 2, nfilter_max)",
                            "Call"
                        ],
                        [
                            "max(nf1 // 2, nfilter_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_79": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_86": {
                "in_channels": {
                    "value": "nf1_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nf1",
                            "variable"
                        ],
                        [
                            "nf1",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nf1 * 2, nfilter_max)",
                            "Call"
                        ],
                        [
                            "max(nf1 // 2, nfilter_init)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "num_features": {
                    "value": "nf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nf1 * 2, nfilter_max)",
                            "Call"
                        ],
                        [
                            "max(nf1 // 2, nfilter_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_88": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "controllable_gan/models/generator_3d.py": {
        "torch": {
            "Sequential_51": {
                "variable": {
                    "value": "self.mlp_tr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mlp_tr",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.mlp_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mlp_feat",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Tanh_70": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_71": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "uv_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "uv_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_uvsampler(v.cpu().numpy(), f.cpu().numpy(), tex_size=tex_size)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(uv_sampler).float()",
                            "Call"
                        ],
                        [
                            "uv_sampler.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "uv_sampler",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.enc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nz_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nz_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "self.nc_init * self.feat_H * self.feat_W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_198": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "grid_sample_209": {
                "variable": {
                    "value": "tex_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.uvimage_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "grid": {
                    "value": "self.uv_sampler.repeat(bs, 1, 1, 1).to(feat.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.mlp_bg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim_half",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden_bg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "z_dim_half",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_45": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "in_features": {
                    "value": "n_hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_47": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "in_features": {
                    "value": "n_hidden[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_49": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "n_hidden[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_tr * n_prim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "z_dim_half",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "n_hidden[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_57": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "n_hidden[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_hidden[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LeakyReLU_59": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "n_hidden[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_feat * n_prim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "in_channels": {
                    "value": "nf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nc_init, nf_max)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nc_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "texture_channel",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "num_features": {
                    "value": "nc_final",
                    "type": "variable",
                    "possible_values": [
                        [
                            "texture_channel",
                            "variable"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_181": {
                "in_channels": {
                    "value": "nf0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nc_init, nf_max)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nc_init, nf_max)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_184": {
                "num_features": {
                    "value": "nf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nc_init, nf_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_185": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "nf0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nc_init, nf_max)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nc_init, nf_max)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_189": {
                "num_features": {
                    "value": "nf1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(nc_init, nf_max)",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_190": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_191": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "upsampling_mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'transpose'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "controllable_gan/render/point.py": {
        "torch": {
            "tensor_16": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack((vi.reshape(-1, 1), ui.reshape(-1, 1))).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_52": {
                "variable": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(v.reshape(bs, -1, 1), u.reshape(bs, -1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_63": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-distance_sq / (pts_scale.view(bs, -1, 1) * self.sigma * self.sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "uvz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(uv, points_proj[:, 2, :].reshape(bs, -1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "controllable_gan/render/square.py": {
        "torch": {
            "sum_161": {
                "variable": {
                    "value": "dot0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(p - c0) * (c1 - c0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_162": {
                "variable": {
                    "value": "dot1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(p - c1) * (c0 - c1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_164": {
                "variable": {
                    "value": "dis_c0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p - c0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_166": {
                "variable": {
                    "value": "dis_c1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p - c1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_210": {
                "variable": {
                    "value": "demon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_217": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p - p0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_218": {
                "variable": {
                    "value": "cross0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c[:, 1:2, :] - c[:, 0:1, :]).expand_as(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "p - c[:, 0:1, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_219": {
                "variable": {
                    "value": "cross1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c[:, 2:3, :] - c[:, 1:2, :]).expand_as(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "p - c[:, 1:2, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_220": {
                "variable": {
                    "value": "cross2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c[:, 3:4, :] - c[:, 2:3, :]).expand_as(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "p - c[:, 2:3, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_221": {
                "variable": {
                    "value": "cross3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(c[:, 0:1, :] - c[:, 3:4, :]).expand_as(v)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "p - c[:, 3:4, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_222": {
                "variable": {
                    "value": "dot0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cross0 * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_223": {
                "variable": {
                    "value": "dot1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cross1 * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_224": {
                "variable": {
                    "value": "dot2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cross2 * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_225": {
                "variable": {
                    "value": "dot3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cross3 * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_233": {
                "variable": {
                    "value": "(dis, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((dis0.unsqueeze(0), dis1.unsqueeze(0), dis2.unsqueeze(0), dis3.unsqueeze(0)), dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_238": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dis / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(u.unsqueeze(2), v.unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_255": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "featmap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "featmap",
                            "Method Argument"
                        ]
                    ]
                },
                "grid": {
                    "value": "uv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((u.unsqueeze(2), v.unsqueeze(2)), dim=2)",
                            "Call"
                        ],
                        [
                            "uv.view(-1, im_height, im_width, 2)",
                            "Call"
                        ]
                    ]
                },
                "padding_mode": {
                    "value": "border",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_288": {
                "variable": {
                    "value": "locations",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corners",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corners",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_319": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_320": {
                "variable": {
                    "value": "(depth, min_indice)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "depths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "project_faces(normals.view(bs * ns, -1), locations.view(bs * ns, -1), corners.view(bs * ns, *corners.shape[2:]), rays, quad_feat.view(bs * ns, *quad_feat.shape[2:]), quad2cam.view(bs * ns, 4, 4), scale.view(bs * ns, -1), sigma, far_plane)",
                            "Call"
                        ],
                        [
                            "depths.view(bs, ns, -1)",
                            "Call"
                        ],
                        [
                            "depths.clamp(min=near_plane, max=far_plane)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack((vi.reshape(-1, 1), depth, ui.reshape(-1, 1), depth)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.tensor(vec).to(K.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_37": {
                "variable": {
                    "value": "self.quad_corners",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 0.0, 1.0, 1.0], [1.0, 0.0, -1.0, 1.0], [-1.0, 0.0, -1.0, 1.0], [-1.0, 0.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "pixels",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pixels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.vstack((x + 0.5, y + 0.5, w)).transpose()",
                            "Call"
                        ],
                        [
                            "torch.tensor(pixels).float().to(K.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_66": {
                "variable": {
                    "value": "areas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "areas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(areas, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(areas, dim=1)",
                            "Call"
                        ],
                        [
                            "areas / (self.im_width * self.im_height)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(areas.view(bs, -1), dim=1) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_67": {
                "variable": {
                    "value": "areas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "areas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(areas, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.mean(areas, dim=1)",
                            "Call"
                        ],
                        [
                            "areas / (self.im_width * self.im_height)",
                            "BinOp"
                        ],
                        [
                            "torch.sum(areas.view(bs, -1), dim=1) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "RT",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(RT, torch.tensor([0.0, 0.0, 0.0, 1.0], dtype=torch.float32, device=RT.device).view(1, 1, 4).expand(bs, -1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "variable": {
                    "value": "quad2cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RT.view(bs, 1, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "quad_RT",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quad_RT",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_124": {
                "variable": {
                    "value": "pts_world",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quad_RT.view(bs * ns, 1, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.quad_pts.view(-1, 4, 1).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_126": {
                "variable": {
                    "value": "corner_world",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "quad_RT.view(bs * ns, 1, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "quad_corners.view(bs * ns, -1, 4, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_130": {
                "variable": {
                    "value": "pts_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RT.view(bs, 1, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "pts_world.view(bs, -1, 4, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_132": {
                "variable": {
                    "value": "corner_cam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "RT.view(bs, 1, 4, 4)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "corner_world.view(bs, -1, 4, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_155": {
                "variable": {
                    "value": "center_depth",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corner_cam[:, :, -1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_64": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, i, 0] * x[:, j, 1] - x[:, i, 1] * x[:, j, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_212": {
                "input": {
                    "value": "(p0 - l0) * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "tensors": {
                    "value": "(dis0.unsqueeze(0), dis1.unsqueeze(0), dis2.unsqueeze(0), dis3.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_245": {
                "input": {
                    "value": "cam2quad_R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quad2cam[:, :3, :3].transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "quad2cam[:, :3, 3].view(-1, 3, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_246": {
                "input": {
                    "value": "cam2quad_R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "quad2cam[:, :3, :3].transpose(1, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_311": {
                "input": {
                    "value": "inv_depths / gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_73": {
                "input": {
                    "value": "areas.view(bs, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_104": {
                "variable": {
                    "value": "quad_scale_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "quad_scale.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "quad_scale.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_171": {
                "input": {
                    "value": "c1 - c0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_173": {
                "input": {
                    "value": "cross[on_lineseg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_312": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alphas * torch.exp(inv_depths / gamma)",
                            "BinOp"
                        ],
                        [
                            "w / (torch.sum(w, dim=1, keepdim=True) + 0.1)",
                            "BinOp"
                        ],
                        [
                            "w * mask_near.float()",
                            "BinOp"
                        ],
                        [
                            "w.view(bs, ns, 1, *images.shape[3:])",
                            "Call"
                        ],
                        [
                            "np.ones_like(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "RT.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_49": {
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "controllable_gan/renderer.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[img_size, 0.0, img_size // 2], [0.0, img_size, img_size // 2], [0.0, 0.0, 1.0]])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(K).type(torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "im_width",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "self.RT",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "variable": {
                    "value": "self.RT[:3, :3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.eye(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "variable": {
                    "value": "self.constant",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "tr",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r_mat, t_vec)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "cuboid_RT",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tr, self.constant.view(-1, 1, 4).expand(tr.shape[0], -1, -1).to(r_mat.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image, alpha.unsqueeze(1), depth.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_172": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image, alpha.unsqueeze(1), depth.unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_200": {
                "variable": {
                    "value": "self.quad_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "texsize ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.quad_channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_202": {
                "variable": {
                    "value": "self.cuboid_edge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1], [0, 1], [0, 2], [0, 2], [1, 2], [1, 2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_261": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image, silh, depth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_287": {
                "variable": {
                    "value": "self.pts_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_pts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_340": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(image_pts, image_cuboid[:, -2:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_318": {
                "input": {
                    "value": "feature[:, :3 * self.n_pts]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_234": {
                "start": {
                    "value": "scale_vec.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "controllable_gan/transforms.py": {
        "torch": {
            "stack_53": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((N, 3), dtype=torch.bool)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ax).repeat(math.ceil(N / len(ax)), 1)",
                            "Call"
                        ],
                        [
                            "ax[torch.randperm(len(ax))[:N]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_97": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[get_rotation_from_axis_angle(axis_i, angle_i) for (axis_i, angle_i) in zip(axis.float(), angle)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "randint_39": {
                "variable": {
                    "value": "idcs",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "variable": {
                    "value": "ax",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_85": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(R0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_117": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(t0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_54": {
                "n": {
                    "value": "len(ax)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_59": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.sum().item()",
                            "Call"
                        ],
                        [
                            "mask.sum().item()",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_93": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.sum().item()",
                            "Call"
                        ],
                        [
                            "mask.sum().item()",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_125": {
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.sum().item()",
                            "Call"
                        ],
                        [
                            "mask.sum().item()",
                            "Call"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "N",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "is_available_32": {
                "variable": {
                    "value": "is_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_53": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if is_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_68": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_models(config)",
                            "Call"
                        ],
                        [
                            "generator.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_69": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_models(config)",
                            "Call"
                        ],
                        [
                            "discriminator.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_139": {
                "variable": {
                    "value": "idx_modified",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "config['generator']['n_prim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(sample_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_107": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_127": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(0, 10000, (1,))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_188": {
                "data": {
                    "value": "[0, 360.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "data": {
                    "value": "[azimuth[0], polar]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "data": {
                    "value": "[azimuth, polar[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_166": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "n_total",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(idx_modified)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "externals/pytorch_spectral_normalization_gan/main.py": {
        "torch": {
            "DataLoader_30": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10('../data/', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_52": {
                "variable": {
                    "value": "optim_disc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, discriminator.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "optim_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ExponentialLR_56": {
                "variable": {
                    "value": "scheduler_d",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim_disc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, discriminator.parameters()), lr=args.lr, betas=(0.0, 0.9))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ExponentialLR_57": {
                "variable": {
                    "value": "scheduler_g",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(generator.parameters(), lr=args.lr, betas=(0.0, 0.9))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_97": {
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "Z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "save_126": {
                "obj": {
                    "value": "discriminator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.checkpoint_dir, 'disc_{}'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_127": {
                "obj": {
                    "value": "generator.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.checkpoint_dir, 'gen_{}'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_80": {
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "Z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "randn_67": {
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "Z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_75": {
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "*size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "externals/pytorch_spectral_normalization_gan/model.py": {
        "torch": {
            "Sequential_16": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(z_dim, 512, 4, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_17": {
                "in_channels": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_20": {
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_23": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_26": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_29": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tanh_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "w_g * w_g * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_53": {
                "negative_slope": {
                    "value": "leak",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "LeakyReLU_54": {
                "negative_slope": {
                    "value": "leak",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "LeakyReLU_55": {
                "negative_slope": {
                    "value": "leak",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "LeakyReLU_56": {
                "negative_slope": {
                    "value": "leak",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "LeakyReLU_57": {
                "negative_slope": {
                    "value": "leak",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "LeakyReLU_58": {
                "negative_slope": {
                    "value": "leak",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            },
            "LeakyReLU_59": {
                "negative_slope": {
                    "value": "leak",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "externals/pytorch_spectral_normalization_gan/model_resnet.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SpectralNorm(self.conv1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AvgPool2d(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.z_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4 * 4 * GEN_SIZE",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.final",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "GEN_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ResBlockGenerator(GEN_SIZE, GEN_SIZE, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_142": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "FirstResBlockDiscriminator(input_nc, DISC_SIZE, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "DISC_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_32": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReLU()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.bypass_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self.bypass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "SpectralNorm(self.bypass_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_162": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_24": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_103": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_106": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "num_features": {
                    "value": "GEN_SIZE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_148": {
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_61": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_71": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "externals/pytorch_spectral_normalization_gan/spectral_normalization.py": {
        "torch": {
            "Parameter_53": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_30": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_31": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_30": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "externals/pytorch_spectral_normalization_gan/spectral_normalization_nondiff.py": {
        "torch": {
            "dot_34": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self.module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "l2normalize(torch.mv(w.view(height, -1).data, v))",
                            "Call"
                        ],
                        [
                            "getattr(self.module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "l2normalize(w.data.new(height).normal_(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.mv(w.view(height, -1).data, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mv_30": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(self.module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "l2normalize(torch.mv(w.view(height, -1).data, v))",
                            "Call"
                        ],
                        [
                            "getattr(self.module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "l2normalize(w.data.new(height).normal_(0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "mv_31": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2normalize(torch.mv(torch.t(w.view(height, -1).data), u))",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mv_34": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l2normalize(torch.mv(torch.t(w.view(height, -1).data), u))",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "t_30": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/examples/example1.py": {
        "torch": {
            "ones_36": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/examples/example2.py": {
        "torch": {
            "Adam_73": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.vertices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "vertices[None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_33": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_47": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image - self.image_ref[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "ndarray": {
                    "value": "imread(filename_ref).astype(np.float32).mean(-1) / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/examples/example3.py": {
        "torch": {
            "Adam_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.textures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, self.faces.shape[1], texture_size, texture_size, texture_size, 3, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_48": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image - self.image_ref) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "ndarray": {
                    "value": "imread(filename_ref).astype('float32') / 255.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_35": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_47": {
                "input": {
                    "value": "self.textures",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_85": {
                "input": {
                    "value": "model.textures",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/examples/example4.py": {
        "torch": {
            "Adam_86": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_31": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.faces.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "device": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "image_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "(imread(filename_ref).max(-1) != 0).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_39": {
                "variable": {
                    "value": "self.camera_position",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(np.array([6, 10, -14], dtype=np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(image - self.image_ref[None, :, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_65": {
                "input": {
                    "value": "model.textures",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "ndarray": {
                    "value": "np.array([6, 10, -14], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_93": {
                "input": {
                    "value": "model.textures",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/neural_renderer/get_points_from_angles.py": {
        "torch": {
            "stack_20": {
                "tensors": {
                    "value": "[distance * torch.cos(elevation) * torch.sin(azimuth), distance * torch.sin(elevation), -distance * torch.cos(elevation) * torch.cos(azimuth)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_20": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_21": {
                "input": {
                    "value": "azimuth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(azimuth)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * azimuth",
                            "BinOp"
                        ],
                        [
                            "azimuth",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_22": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(elevation)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * elevation",
                            "BinOp"
                        ],
                        [
                            "elevation",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_23": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(elevation)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * elevation",
                            "BinOp"
                        ],
                        [
                            "elevation",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cos_21": {
                "input": {
                    "value": "elevation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.radians(elevation)",
                            "Call"
                        ],
                        [
                            "math.pi / 180.0 * elevation",
                            "BinOp"
                        ],
                        [
                            "elevation",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "externals/renderer/neural_renderer/neural_renderer/lighting.py": {
        "torch": {
            "zeros_40": {
                "variable": {
                    "value": "light",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_15": {
                "variable": {
                    "value": "color_ambient",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "color_ambient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(color_ambient, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(color_ambient).float().to(device)",
                            "Call"
                        ],
                        [
                            "color_ambient[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((color_ambient, torch.ones(color_ambient.shape[0], texture_channel - color_ambient.shape[1]).cuda()), dim=1)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_19": {
                "variable": {
                    "value": "color_directional",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "color_directional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(color_directional, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(color_directional).float().to(device)",
                            "Call"
                        ],
                        [
                            "color_directional[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((color_directional, torch.ones(color_directional.shape[0], texture_channel - color_directional.shape[1]).cuda()), dim=1)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).float().to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "direction[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "(0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_33": {
                "variable": {
                    "value": "color_ambient",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(color_ambient, torch.ones(color_ambient.shape[0], texture_channel - color_ambient.shape[1]).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "color_directional",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(color_directional, torch.ones(color_directional.shape[0], texture_channel - color_directional.shape[1]).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_52": {
                "variable": {
                    "value": "normals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(v10, v12)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(normals * direction, dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_17": {
                "variable": {
                    "value": "color_ambient",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "color_ambient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(color_ambient, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(color_ambient).float().to(device)",
                            "Call"
                        ],
                        [
                            "color_ambient[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((color_ambient, torch.ones(color_ambient.shape[0], texture_channel - color_ambient.shape[1]).cuda()), dim=1)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_21": {
                "variable": {
                    "value": "color_directional",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "color_directional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(color_directional, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(color_directional).float().to(device)",
                            "Call"
                        ],
                        [
                            "color_directional[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((color_directional, torch.ones(color_directional.shape[0], texture_channel - color_directional.shape[1]).cuda()), dim=1)",
                            "Call"
                        ],
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).float().to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "direction[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "(0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_52": {
                "input": {
                    "value": "v10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces[:, 0] - faces[:, 1]",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "v12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces[:, 2] - faces[:, 1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_57": {
                "input": {
                    "value": "normals * direction",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_34": {
                "*size": {
                    "value": "color_ambient.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "texture_channel - color_ambient.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_37": {
                "*size": {
                    "value": "color_directional.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "texture_channel - color_directional.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/neural_renderer/load_obj.py": {
        "torch": {
            "from_numpy_73": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(faces).astype(np.int32) - 1",
                            "BinOp"
                        ],
                        [
                            "vertices[faces]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(faces).cuda()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.vstack(faces).astype(np.int32)).cuda() - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_125": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack(vertices).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_82": {
                "variable": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "colors.items()",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(color).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_100": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.copy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "variable": {
                    "value": "is_update",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "is_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(np.array(material_names) == material_name).astype(np.int32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(is_update).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "faces.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "texture_size",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "texture_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "texture_size",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "ndarray": {
                    "value": "np.vstack(faces).astype(np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_157": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.vstack(vertices).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.vstack(vertices).astype(np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "vertices - vertices.max(0)[0][None, :] / 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/neural_renderer/look.py": {
        "torch": {
            "normalize_39": {
                "variable": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction.to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_40": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(up, z_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_41": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(z_axis, x_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_axis[:, None, :], y_axis[:, None, :], z_axis[:, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, r.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "vertices",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "r.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_16": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction.to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_23": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :]",
                            "Subscript"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "eye",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_18": {
                "variable": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction.to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_25": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :]",
                            "Subscript"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "eye",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_40": {
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor([0, 1, 0])",
                            "Call"
                        ],
                        [
                            "up[None, :]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_41": {
                "input": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(direction, eps=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_19": {
                "obj": {
                    "value": "direction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(direction, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(direction).to(device)",
                            "Call"
                        ],
                        [
                            "direction.to(device)",
                            "Call"
                        ],
                        [
                            "direction[None, :]",
                            "Subscript"
                        ],
                        [
                            "[0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_26": {
                "obj": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :]",
                            "Subscript"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "eye",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "externals/renderer/neural_renderer/neural_renderer/look_at.py": {
        "torch": {
            "normalize_48": {
                "variable": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "at - eye",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_49": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(up, z_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normalize_50": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(z_axis, x_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_axis[:, None, :], y_axis[:, None, :], z_axis[:, None, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices - eye",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(vertices, r.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "vertices",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "r.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_17": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(at, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(at).to(device)",
                            "Call"
                        ],
                        [
                            "at[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_25": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "eye",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_20": {
                "variable": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(at, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(at).to(device)",
                            "Call"
                        ],
                        [
                            "at[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_27": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_34": {
                "variable": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "eye",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_49": {
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_50": {
                "input": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_21": {
                "obj": {
                    "value": "at",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(at, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(at).to(device)",
                            "Call"
                        ],
                        [
                            "at[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_28": {
                "obj": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(up, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(up).to(device)",
                            "Call"
                        ],
                        [
                            "up[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "[0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_35": {
                "obj": {
                    "value": "eye",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(eye, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(eye).to(device)",
                            "Call"
                        ],
                        [
                            "eye[None, :].repeat(batch_size, 1)",
                            "Call"
                        ],
                        [
                            "eye.to(device)",
                            "Call"
                        ],
                        [
                            "eye[:, None, :]",
                            "Subscript"
                        ],
                        [
                            "eye",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "externals/renderer/neural_renderer/neural_renderer/mesh.py": {
        "torch": {
            "Parameter_22": {
                "variable": {
                    "value": "self.textures",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.05 * torch.randn(*shape)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_22": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/neural_renderer/perspective.py": {
        "torch": {
            "tensor_13": {
                "variable": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "angle / 180 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tan_15": {
                "variable": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(angle / 180 * math.pi, dtype=torch.float32, device=device)",
                            "Call"
                        ],
                        [
                            "angle[None]",
                            "Subscript"
                        ],
                        [
                            "30.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_20": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/neural_renderer/projection.py": {
        "torch": {
            "sqrt_32": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_ ** 2 + y_ ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_35": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x__, y__, torch.ones_like(z)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(vertices, R.transpose(2, 1)) + t.view(-1, 1, 3)",
                            "BinOp"
                        ],
                        [
                            "torch.stack([x__, y__, torch.ones_like(z)], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(vertices, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.stack([u, v, z], dim=-1)",
                            "Call"
                        ],
                        [
                            "vertices",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "K.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_42": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[u, v, z]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_19": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(vertices, R.transpose(2, 1)) + t.view(-1, 1, 3)",
                            "BinOp"
                        ],
                        [
                            "torch.stack([x__, y__, torch.ones_like(z)], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(vertices, K.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "torch.stack([u, v, z], dim=-1)",
                            "Call"
                        ],
                        [
                            "vertices",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "R.transpose(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_35": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices[:, :, 2]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "externals/renderer/neural_renderer/neural_renderer/rasterize.py": {
        "torch": {
            "zeros_like_111": {
                "variable": {
                    "value": "grad_faces",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.clone()",
                            "Call"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_161": {
                "variable": {
                    "value": "faces_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "faces.clone()",
                            "Call"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_113": {
                "variable": {
                    "value": "grad_textures",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "textures.contiguous()",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(1).fill_(0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "textures",
                            "Method Argument"
                        ],
                        [
                            "textures",
                            "Method Argument"
                        ],
                        [
                            "textures",
                            "Method Argument"
                        ],
                        [
                            "textures",
                            "Method Argument"
                        ],
                        [
                            "textures",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_325": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Rasterize(image_size * 2, near, far, eps, background_color, return_rgb, return_alpha, return_depth, texture_channel)(*inputs)",
                            "Call"
                        ],
                        [
                            "Rasterize(image_size, near, far, eps, background_color, return_rgb, return_alpha, return_depth, texture_channel)(*inputs)",
                            "Call"
                        ],
                        [
                            "rgb.permute((0, 3, 1, 2))",
                            "Call"
                        ],
                        [
                            "rgb[:, :, list(reversed(range(rgb.shape[2]))), :]",
                            "Subscript"
                        ],
                        [
                            "F.avg_pool2d(rgb, kernel_size=(2, 2))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_122": {
                "variable": {
                    "value": "grad_rgb_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rgb_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(ctx.batch_size, ctx.image_size, ctx.image_size, texture_channel).fill_(0)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(1).fill_(0)",
                            "Call"
                        ],
                        [
                            "RasterizeFunction.forward_texture_sampling(ctx, faces, textures, face_index_map, weight_map, depth_map, rgb_map, sampling_index_map, sampling_weight_map)",
                            "Call"
                        ],
                        [
                            "RasterizeFunction.forward_background(ctx, face_index_map, rgb_map)",
                            "Call"
                        ],
                        [
                            "rgb_map * mask + (1 - mask) * background_color[None, None, None, :]",
                            "BinOp"
                        ],
                        [
                            "rgb_map * mask + (1 - mask) * background_color[:, None, None, :]",
                            "BinOp"
                        ],
                        [
                            "rgb_map",
                            "Method Argument"
                        ],
                        [
                            "rgb_map",
                            "Method Argument"
                        ],
                        [
                            "rgb_map",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_129": {
                "variable": {
                    "value": "grad_alpha_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(ctx.batch_size, ctx.image_size, ctx.image_size).fill_(0)",
                            "Call"
                        ],
                        [
                            "torch.cuda.FloatTensor(1).fill_(0)",
                            "Call"
                        ],
                        [
                            "RasterizeFunction.forward_alpha_map(ctx, alpha_map, face_index_map)",
                            "Call"
                        ],
                        [
                            "alpha_map",
                            "Method Argument"
                        ],
                        [
                            "alpha_map",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_136": {
                "variable": {
                    "value": "grad_depth_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctx.depth_map",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_327": {
                "input": {
                    "value": "alpha[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_329": {
                "input": {
                    "value": "depth[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/neural_renderer/renderer.py": {
        "torch": {
            "cat_286": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(textures, textures)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(faces, faces[:, :, list(reversed(range(faces.shape[-1])))])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_132": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(faces, faces[:, :, list(reversed(range(faces.shape[-1])))])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(faces, faces[:, :, list(reversed(range(faces.shape[-1])))])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(textures, textures.permute((0, 1, 4, 3, 2, 5)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(faces, faces[:, :, list(reversed(range(faces.shape[-1])))])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(textures, textures.permute((0, 1, 4, 3, 2, 5)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "all_259": {
                "variable": {
                    "value": "f_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_pos.__invert__()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "all_260": {
                "variable": {
                    "value": "f_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_pos.gather(dim=1, index=faces.flatten(1, 2).long()).view(faces.shape)",
                            "Call"
                        ],
                        [
                            "torch.all(f_pos, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_265": {
                "variable": {
                    "value": "idx_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.all(f_pos.__invert__(), dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_269": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "f_pos.__invert__().unsqueeze(2).expand(faces.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "neg_samples.unsqueeze(1).expand(faces.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.load_teapot_batch()",
                            "Call"
                        ],
                        [
                            "faces.cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((faces, faces[:, :, list(reversed(range(faces.shape[-1])))]), dim=1)",
                            "Call"
                        ],
                        [
                            "nr.vertices_to_faces(vertices, faces)",
                            "Call"
                        ],
                        [
                            "torch.cat((faces, faces[:, :, list(reversed(range(faces.shape[-1])))]), dim=1).detach()",
                            "Call"
                        ],
                        [
                            "nr.vertices_to_faces(vertices, faces)",
                            "Call"
                        ],
                        [
                            "torch.cat((faces, faces[:, :, list(reversed(range(faces.shape[-1])))]), dim=1).detach()",
                            "Call"
                        ],
                        [
                            "nr.vertices_to_faces(vertices, faces)",
                            "Call"
                        ],
                        [
                            "torch.cat((faces, faces[:, :, list(reversed(range(faces.shape[-1])))]), dim=1).detach()",
                            "Call"
                        ],
                        [
                            "nr.vertices_to_faces(vertices, faces)",
                            "Call"
                        ],
                        [
                            "torch.where(f_pos.__invert__().unsqueeze(2).expand(faces.shape), neg_samples.unsqueeze(1).expand(faces.shape), faces)",
                            "Call"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ],
                        [
                            "faces",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "externals/renderer/neural_renderer/neural_renderer/save_obj.py": {
        "torch": {
            "zeros_14": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tile_height * texture_size_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "tile_width * texture_size_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_faces, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_16": {
                "variable": {
                    "value": "face_nums",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "num_faces",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/neural_renderer/vertices_to_faces.py": {
        "torch": {
            "arange_19": {
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/setup.py": {
        "torch": {}
    },
    "externals/renderer/neural_renderer/tests/test_lighting.py": {
        "torch": {
            "randn_12": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_13": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/tests/test_load_obj.py": {
        "torch": {
            "allclose_33": {
                "input": {
                    "value": "torch.from_numpy(vertices_ref).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr.load_obj(obj_file, False)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(obj_file, True)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(obj_file)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(os.path.join(data_dir, '1cde62b063e14777c9152a706245d48/model.obj'), load_texture=True)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(os.path.join(data_dir, '4e49873292196f02574b5684eaec43e9/model.obj'), load_texture=True, texture_size=16)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_34": {
                "input": {
                    "value": "torch.from_numpy(faces_ref).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr.load_obj(obj_file, False)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(obj_file, True)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(obj_file)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(os.path.join(data_dir, '1cde62b063e14777c9152a706245d48/model.obj'), load_texture=True)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(os.path.join(data_dir, '4e49873292196f02574b5684eaec43e9/model.obj'), load_texture=True, texture_size=16)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_36": {
                "input": {
                    "value": "torch.from_numpy(vertices_ref).cuda() * 2 - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr.load_obj(obj_file, False)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(obj_file, True)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(obj_file)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(os.path.join(data_dir, '1cde62b063e14777c9152a706245d48/model.obj'), load_texture=True)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(os.path.join(data_dir, '4e49873292196f02574b5684eaec43e9/model.obj'), load_texture=True, texture_size=16)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_37": {
                "input": {
                    "value": "torch.from_numpy(faces_ref).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr.load_obj(obj_file, False)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(obj_file, True)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(obj_file)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(os.path.join(data_dir, '1cde62b063e14777c9152a706245d48/model.obj'), load_texture=True)",
                            "Call"
                        ],
                        [
                            "nr.load_obj(os.path.join(data_dir, '4e49873292196f02574b5684eaec43e9/model.obj'), load_texture=True, texture_size=16)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_33": {
                "ndarray": {
                    "value": "vertices_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0]], 'float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_34": {
                "ndarray": {
                    "value": "faces_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1, 3, 2], [3, 1, 0], [2, 0, 1], [0, 2, 3]], 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_37": {
                "ndarray": {
                    "value": "faces_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1, 3, 2], [3, 1, 0], [2, 0, 1], [0, 2, 3]], 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_36": {
                "ndarray": {
                    "value": "vertices_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0], [0.0, 0.0, 0.0]], 'float32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "externals/renderer/neural_renderer/tests/test_look_at.py": {
        "torch": {
            "from_numpy_21": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([1, 0, 0], np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/tests/test_perspective.py": {
        "torch": {
            "from_numpy_11": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([1, 2, 10], np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/tests/test_rasterize.py": {
        "torch": {
            "from_numpy_108": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(vertices, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_109": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(faces, dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_110": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "faces.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_111": {
                "variable": {
                    "value": "grad_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(grad_ref, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_116": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "renderer(vertices, faces, textures)",
                            "Call"
                        ],
                        [
                            "images.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "renderer(vertices, faces, textures)",
                            "Call"
                        ],
                        [
                            "images.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "renderer(vertices, faces, textures)",
                            "Call"
                        ],
                        [
                            "images.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "renderer(vertices, faces, textures)",
                            "Call"
                        ],
                        [
                            "torch.mean(images, dim=1)",
                            "Call"
                        ],
                        [
                            "renderer(vertices, faces, textures)",
                            "Call"
                        ],
                        [
                            "torch.mean(images, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_117": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(images[:, pyi, pxi] - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(vertices, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(faces, dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_147": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "faces.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "grad_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(grad_ref, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_153": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "renderer(vertices, faces, textures)",
                            "Call"
                        ],
                        [
                            "images.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "renderer(vertices, faces, textures)",
                            "Call"
                        ],
                        [
                            "images.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "renderer(vertices, faces, textures)",
                            "Call"
                        ],
                        [
                            "images.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "renderer(vertices, faces, textures)",
                            "Call"
                        ],
                        [
                            "torch.mean(images, dim=1)",
                            "Call"
                        ],
                        [
                            "renderer(vertices, faces, textures)",
                            "Call"
                        ],
                        [
                            "torch.mean(images, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_154": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(images[:, pyi, pxi])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_120": {
                "input": {
                    "value": "vertices.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[1.6725862, -0.26021874, 0.0], [1.41986704, -1.64284933, 0.0], [0.0, 0.0, 0.0]]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.array(grad_ref, dtype=np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "utils.to_minibatch((vertices, faces, textures, grad_ref))",
                            "Call"
                        ],
                        [
                            "grad_ref.cuda()",
                            "Call"
                        ],
                        [
                            "[[0.98646867, 1.04628897, 0.0], [-1.03415668, -0.10403691, 0.0], [3.00094461, -1.55173182, 0.0]]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.array(grad_ref, dtype=np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "utils.to_minibatch((vertices, faces, textures, grad_ref))",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_157": {
                "input": {
                    "value": "vertices.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[1.6725862, -0.26021874, 0.0], [1.41986704, -1.64284933, 0.0], [0.0, 0.0, 0.0]]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.array(grad_ref, dtype=np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "utils.to_minibatch((vertices, faces, textures, grad_ref))",
                            "Call"
                        ],
                        [
                            "grad_ref.cuda()",
                            "Call"
                        ],
                        [
                            "[[0.98646867, 1.04628897, 0.0], [-1.03415668, -0.10403691, 0.0], [3.00094461, -1.55173182, 0.0]]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.array(grad_ref, dtype=np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "utils.to_minibatch((vertices, faces, textures, grad_ref))",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_117": {
                "input": {
                    "value": "images[:, pyi, pxi] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_154": {
                "input": {
                    "value": "images[:, pyi, pxi]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/tests/test_rasterize_depth.py": {
        "torch": {
            "from_numpy_70": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(vertices, np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(faces, np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_76": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(images[0, 15, 20] - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "grad2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.grad.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_90": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vertices.grad.clone()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "grad2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(grad)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(images[0, 15, 20] - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/tests/test_rasterize_silhouettes.py": {
        "torch": {
            "from_numpy_58": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(vertices, np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_59": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(faces, np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_60": {
                "variable": {
                    "value": "grad_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(grad_ref, np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_64": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(images[:, pyi, pxi] - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(vertices, np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_91": {
                "variable": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(faces, np.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "grad_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(grad_ref, np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_96": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(images[:, pyi, pxi])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_67": {
                "input": {
                    "value": "vertices.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[1.6725862, -0.26021874, 0.0], [1.41986704, -1.64284933, 0.0], [0.0, 0.0, 0.0]]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.array(grad_ref, np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "utils.to_minibatch((vertices, faces, grad_ref))",
                            "Call"
                        ],
                        [
                            "[[0.98646867, 1.04628897, 0.0], [-1.03415668, -0.10403691, 0.0], [3.00094461, -1.55173182, 0.0]]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.array(grad_ref, np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "utils.to_minibatch((vertices, faces, grad_ref))",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "allclose_99": {
                "input": {
                    "value": "vertices.grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "grad_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[1.6725862, -0.26021874, 0.0], [1.41986704, -1.64284933, 0.0], [0.0, 0.0, 0.0]]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.array(grad_ref, np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "utils.to_minibatch((vertices, faces, grad_ref))",
                            "Call"
                        ],
                        [
                            "[[0.98646867, 1.04628897, 0.0], [-1.03415668, -0.10403691, 0.0], [3.00094461, -1.55173182, 0.0]]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.array(grad_ref, np.float32)).cuda()",
                            "Call"
                        ],
                        [
                            "utils.to_minibatch((vertices, faces, grad_ref))",
                            "Call"
                        ]
                    ]
                },
                "rtol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_64": {
                "input": {
                    "value": "images[:, pyi, pxi] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_96": {
                "input": {
                    "value": "images[:, pyi, pxi]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "externals/renderer/neural_renderer/tests/test_save_obj.py": {
        "torch": {
            "allclose_21": {
                "input": {
                    "value": "vertices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr.load_obj(teapot)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "vertices2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr.load_obj(teapot2)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_22": {
                "input": {
                    "value": "faces",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr.load_obj(teapot)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "faces2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nr.load_obj(teapot2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "externals/renderer/neural_renderer/tests/utils.py": {
        "torch": {
            "ones_26": {
                "variable": {
                    "value": "textures",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(faces.shape[0], 4, 4, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_15": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_18": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros_like(d)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_15": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_like_18": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "gan_training/checkpoints.py": {
        "torch": {
            "save_39": {
                "obj": {
                    "value": "outdict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs",
                            "variable"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_65": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, filename)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gan_training/config.py": {
        "torch": {
            "StepLR_118": {
                "variable": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['optimizer']",
                            "Subscript"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "config['training']['lr_anneal_every']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "config['training']['lr_anneal']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RMSprop_105": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_parameter_groups(generator.parameters(), g_gradient_scales, base_lr=lr_g)",
                            "Call"
                        ],
                        [
                            "generator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_g']",
                            "Subscript"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "RMSprop_106": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "d_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_parameter_groups(discriminator.parameters(), d_gradient_scales, base_lr=lr_d)",
                            "Call"
                        ],
                        [
                            "discriminator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_d']",
                            "Subscript"
                        ]
                    ]
                },
                "alpha": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_108": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_parameter_groups(generator.parameters(), g_gradient_scales, base_lr=lr_g)",
                            "Call"
                        ],
                        [
                            "generator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_g']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.0, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_109": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "d_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_parameter_groups(discriminator.parameters(), d_gradient_scales, base_lr=lr_d)",
                            "Call"
                        ],
                        [
                            "discriminator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_d']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.0, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_111": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "g_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_parameter_groups(generator.parameters(), g_gradient_scales, base_lr=lr_g)",
                            "Call"
                        ],
                        [
                            "generator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_g']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SGD_112": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "d_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_parameter_groups(discriminator.parameters(), d_gradient_scales, base_lr=lr_d)",
                            "Call"
                        ],
                        [
                            "discriminator.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['training']['lr_d']",
                            "Subscript"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/distributions.py": {
        "torch": {
            "zeros_25": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Categorical_26": {
                "variable": {
                    "value": "ydist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(nlabels, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "acos_38": {
                "variable": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(z1 * z2).sum(dim=-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "p / z1.pow(2).sum(dim=-1, keepdim=True).sqrt()",
                            "BinOp"
                        ],
                        [
                            "p / z2.pow(2).sum(dim=-1, keepdim=True).sqrt()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_9": {
                "variable": {
                    "value": "high",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Uniform_10": {
                "variable": {
                    "value": "zdist",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "low",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.ones(dim, device=device)",
                            "UnaryOp"
                        ]
                    ]
                },
                "high": {
                    "value": "high",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(dim, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_12": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_13": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Normal_14": {
                "variable": {
                    "value": "zdist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(dim, device=device)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(dim, device=device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_39": {
                "input": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(p)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_40": {
                "input": {
                    "value": "omega",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.acos(p)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_8": {
                "*size": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "gan_training/eval.py": {
        "torch": {
            "cat_100": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_blocks[:nblock * blocksize]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/inputs.py": {
        "torch": {
            "Tensor_54": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_14": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/metrics/fid_score.py": {
        "torch": {
            "Upsample_100": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/metrics/inception.py": {
        "torch": {
            "ModuleList_73": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_159": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "block(net)",
                            "Call"
                        ],
                        [
                            "F.dropout(net, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.flatten(net, 1)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_161": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "block(net)",
                            "Call"
                        ],
                        [
                            "F.dropout(net, training=self.training)",
                            "Call"
                        ],
                        [
                            "torch.flatten(net, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_213": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_242": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_264": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_272": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_276": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_306": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_312": {
                "variable": {
                    "value": "branch_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_218": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_247": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_281": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_316": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_85": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "*args": {
                    "value": "*block0",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "MaxPool2d_93": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "*args": {
                    "value": "*block1",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "*args": {
                    "value": "*block2",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_115": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "*args": {
                    "value": "*block3",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/metrics/inception_eval.py": {
        "torch": {
            "softmax_124": {
                "variable": {
                    "value": "probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_131": {
                "variable": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_activations(target_loader, total=total)",
                            "Call"
                        ],
                        [
                            "self.get_activations(samples, total=total)",
                            "Call"
                        ],
                        [
                            "np.concatenate(features)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(features).swapaxes(0, 1)",
                            "Call"
                        ],
                        [
                            "features[0]",
                            "Subscript"
                        ],
                        [
                            "self.model(batch)",
                            "Call"
                        ],
                        [
                            "features[0]",
                            "Subscript"
                        ],
                        [
                            "F.adaptive_avg_pool2d(features, output_size=(1, 1))",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/metrics/inception_score.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imgs",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Upsample_34": {
                "variable": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up(x)",
                            "Call"
                        ],
                        [
                            "inception_model(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/models/resnet.py": {
        "torch": {
            "leaky_relu_146": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_23": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.nf0 * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "variable": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "yz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, yembed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_60": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, self.nf0, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, self.nf0 * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.resnet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nf0 * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_124": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "is_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_51": {
                "input": {
                    "value": "yembed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(y)",
                            "Call"
                        ],
                        [
                            "y",
                            "variable"
                        ],
                        [
                            "yembed / torch.norm(yembed, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_32": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_85": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/models/resnet2.py": {
        "torch": {
            "leaky_relu_193": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "yz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, yembed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_58": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_66": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_70": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_74": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_79": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_93": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * nf * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_125": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_129": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_133": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_137": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_141": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_1(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_1(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_171": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "is_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_173": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_49": {
                "input": {
                    "value": "yembed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(y)",
                            "Call"
                        ],
                        [
                            "y",
                            "variable"
                        ],
                        [
                            "yembed / torch.norm(yembed, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/models/resnet3.py": {
        "torch": {
            "leaky_relu_152": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32 * nf * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "yz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, yembed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_42": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_45": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * nf * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_87": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_90": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_93": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_96": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_99": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_102": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 32 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "is_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_133": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/models/resnet4.py": {
        "torch": {
            "leaky_relu_156": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "z_dim + embed_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16 * nf * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_35": {
                "variable": {
                    "value": "yz",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, yembed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_41": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_44": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_47": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_50": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_53": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_59": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * nf * s0 * s0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "avg_pool2d_91": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_94": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_97": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_100": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_103": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_106": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.leaky_relu(x, 0.2)",
                            "Call"
                        ],
                        [
                            "self.fc(yz)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf, self.s0, self.s0)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.interpolate(out, scale_factor=2)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(actvn(out))",
                            "Call"
                        ],
                        [
                            "torch.tanh(out)",
                            "Call"
                        ],
                        [
                            "self.conv_img(x)",
                            "Call"
                        ],
                        [
                            "self.resnet_0_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_1_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_2_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_3_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_4_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_5_0(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 3, stride=2, padding=1)",
                            "Call"
                        ],
                        [
                            "self.resnet_6_0(out)",
                            "Call"
                        ],
                        [
                            "out.view(batch_size, 16 * self.nf * self.s0 * self.s0)",
                            "Call"
                        ],
                        [
                            "self.fc(actvn(out))",
                            "Call"
                        ],
                        [
                            "out[index, y]",
                            "Subscript"
                        ],
                        [
                            "x_s + 0.1 * dx",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "variable": {
                    "value": "self.conv_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_135": {
                "variable": {
                    "value": "self.conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fhidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "is_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.conv_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.fin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.fout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/ops.py": {
        "torch": {
            "Parameter_45": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_46": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data.new(width).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "w_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_73": {
                "variable": {
                    "value": "self.alpha_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "nfilter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilter",
                            "Method Argument"
                        ],
                        [
                            "nfilter",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_74": {
                "variable": {
                    "value": "self.beta_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "nfilter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilter",
                            "Method Argument"
                        ],
                        [
                            "nfilter",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nfilter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilter",
                            "Method Argument"
                        ],
                        [
                            "nfilter",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_105": {
                "variable": {
                    "value": "self.alpha_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "nfilter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilter",
                            "Method Argument"
                        ],
                        [
                            "nfilter",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Embedding_106": {
                "variable": {
                    "value": "self.beta_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nlabels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nlabels",
                            "Method Argument"
                        ],
                        [
                            "nlabels",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "nfilter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilter",
                            "Method Argument"
                        ],
                        [
                            "nfilter",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "InstanceNorm2d_107": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nfilter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfilter",
                            "Method Argument"
                        ],
                        [
                            "nfilter",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mv_23": {
                "input": {
                    "value": "torch.t(w.view(height, -1).data)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "u.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_25": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "v.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_23": {
                "input": {
                    "value": "w.view(height, -1).data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/train.py": {
        "torch": {
            "rand_107": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.size(0)",
                            "Call"
                        ],
                        [
                            "y.size(0)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "y.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(x_fake, y)",
                            "Call"
                        ],
                        [
                            "self.discriminator(x_fake, y)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(d_fake)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(d_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_198": {
                "variable": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "d_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(x_fake, y)",
                            "Call"
                        ],
                        [
                            "self.discriminator(x_fake, y)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(d_fake)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(d_fake)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "y_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(x_fake.shape[0] / n_tf)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_97": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.discriminator(x_interp, y)",
                            "Call"
                        ],
                        [
                            "d_out",
                            "Method Argument"
                        ],
                        [
                            "d_out",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_out.new_full(size=d_out.size(), fill_value=target)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_255": {
                "variable": {
                    "value": "y_fake_bg",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(x_fake.shape[0] / n_tf)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_271": {
                "outputs": {
                    "value": "d_out.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_209": {
                "n": {
                    "value": "x_fake.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randperm_213": {
                "n": {
                    "value": "x_fake.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "gan_training/utils.py": {
        "torch": {
            "cat_22": {
                "tensors": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(x, dim=0)[:N]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_23": {
                "tensors": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(y, dim=0)[:N]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "is_available_28": {
                "variable": {
                    "value": "is_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if is_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_60": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_models(config)",
                            "Call"
                        ],
                        [
                            "generator.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_96": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_129": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(0, 10000, (1,))[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "obj_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "evaluator.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "n_fg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['generator']['n_bbox']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_113": {
                "n": {
                    "value": "n_fg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['generator']['n_bbox']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "test_transforms.py": {
        "torch": {
            "is_available_40": {
                "variable": {
                    "value": "is_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_59": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if is_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_75": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_models(config)",
                            "Call"
                        ],
                        [
                            "generator.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_117": {
                "variable": {
                    "value": "unmasked_idcs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "obj_masks.view(sample_size, generator_test.module.n_fg, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "idx_modified",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "idx_modified",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(idx_modified)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "mask_modified",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(sample_size, config['generator']['n_prim'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "r_range",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 2 * math.pi]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_103": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "linspace_136": {
                "start": {
                    "value": "*t_range",
                    "type": "Starred",
                    "possible_values": []
                },
                "end": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linspace_151": {
                "start": {
                    "value": "*r_range",
                    "type": "Starred",
                    "possible_values": []
                },
                "end": {
                    "value": "n_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_181": {
                "start": {
                    "value": "*p_range",
                    "type": "Starred",
                    "possible_values": []
                },
                "end": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randperm_120": {
                "n": {
                    "value": "len(choices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_166": {
                "start": {
                    "value": "*a_range",
                    "type": "Starred",
                    "possible_values": []
                },
                "end": {
                    "value": "n_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_166": {
                "*size": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_181": {
                "*size": {
                    "value": "n_steps",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "manual_seed_17": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "variable": {
                    "value": "is_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if is_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_77": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_models(config)",
                            "Call"
                        ],
                        [
                            "generator.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(generator)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_78": {
                "variable": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "build_models(config)",
                            "Call"
                        ],
                        [
                            "discriminator.to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(discriminator)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_233": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/commons.py": {
        "torch": {
            "tensor_53": {
                "variable": {
                    "value": "u_cross",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, -u[2], u[1]], [u[2], 0, -u[0]], [-u[1], u[0], 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cos_57": {
                "variable": {
                    "value": "cos_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * np.pi * u",
                            "BinOp"
                        ],
                        [
                            "np.arccos(X[:, 2] / rad)",
                            "Call"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_58": {
                "variable": {
                    "value": "sin_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * np.pi * u",
                            "BinOp"
                        ],
                        [
                            "np.arccos(X[:, 2] / rad)",
                            "Call"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_67": {
                "variable": {
                    "value": "rotvec3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rotvec1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation[:, :, 0] / torch.norm(rotation[:, :, 0], dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "rotvec2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation[:, :, 1] - rotvec2_proj",
                            "BinOp"
                        ],
                        [
                            "rotvec2 / torch.norm(rotvec2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "rotmat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rotvec1.view(-1, 3, 1), rotvec2.view(-1, 3, 1), rotvec3.view(-1, 3, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_79": {
                "variable": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "at - eye",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_80": {
                "variable": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(up, z_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_81": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cross(z_axis, x_axis)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "r_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_axis.view(-1, 3, 1), y_axis.view(-1, 3, 1), z_axis.view(-1, 3, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "tcam",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[cx, -cz, cy]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_97": {
                "variable": {
                    "value": "tcam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "pts_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, -1], [0, 0, 1], [0, -1, 0], [0, 1, 0], [-1, 0, 0], [1, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "up_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_123": {
                "variable": {
                    "value": "y_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "variable": {
                    "value": "quad_RT",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_138": {
                "tensors": {
                    "value": "(Rs, ts.unsqueeze(3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_156": {
                "variable": {
                    "value": "right",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "variable"
                        ],
                        [
                            "proj_ / torch.norm(proj_)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n / torch.norm(n)",
                            "BinOp"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_159": {
                "variable": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(right.view(-1, 1), n.view(-1, 1), proj.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rot_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((right.view(-1, 1), n.view(-1, 1), proj.view(-1, 1)), dim=1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rot_mat, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "[0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_100": {
                "tensors": {
                    "value": "(rcam.transpose(1, 2), -rcam.transpose(1, 2) @ tcam.view(-1, 3, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_16": {
                "variable": {
                    "value": "RT",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "m": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_63": {
                "input": {
                    "value": "rotation[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_64": {
                "input": {
                    "value": "rotvec1 * rotation[:, :, 1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_66": {
                "input": {
                    "value": "rotvec2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rotation[:, :, 1] - rotvec2_proj",
                            "BinOp"
                        ],
                        [
                            "rotvec2 / torch.norm(rotvec2, dim=1, keepdim=True)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_80": {
                "input": {
                    "value": "up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "up.float().to(device).view(1, 3)",
                            "Call"
                        ],
                        [
                            "up.repeat(eye.shape[0] // up.shape[0], 1)",
                            "Call"
                        ],
                        [
                            "torch.tensor([0",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_81": {
                "input": {
                    "value": "z_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(at - eye, eps=1e-05, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.cross(up, z_axis), eps=1e-05, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_110": {
                "data": {
                    "value": "[[0, 0, -1], [0, 0, 1], [0, -1, 0], [0, 1, 0], [-1, 0, 0], [1, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_145": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n / torch.norm(n)",
                            "BinOp"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_150": {
                "input": {
                    "value": "proj_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u - torch.dot(u, n) / torch.dot(n, n) * n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "norm_157": {
                "input": {
                    "value": "right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cross(proj, n)",
                            "Call"
                        ],
                        [
                            "right / torch.norm(right)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_104": {
                "*size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_153": {
                "input": {
                    "value": "proj_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u - torch.dot(u, n) / torch.dot(n, n) * n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_59": {
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dot_148": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n / torch.norm(n)",
                            "BinOp"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n / torch.norm(n)",
                            "BinOp"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ],
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/io_utils.py": {
        "torch": {}
    },
    "utils/visualization.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "colors",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "colors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[color_depth_map(depth[i], depth_max)[None] for i in range(depth.shape[0])]",
                            "ListComp"
                        ],
                        [
                            "np.concatenate(colors, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(colors).float().cuda()",
                            "Call"
                        ],
                        [
                            "colors.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "colors.float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "colors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "nonzero_47": {
                "variable": {
                    "value": "idcs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_84": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "list(od.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_86": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[imgs[:, i * n_per_row:(i + 1) * n_per_row] for i in range(n_rows)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_137": {
                "variable": {
                    "value": "cmap",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "get_cmap(generator.n_fg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "cmap",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "get_cmap(generator.n_fg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "rgb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[wrap_images(rgb[:, i], cmap[i]).unsqueeze(1) for i in range(rgb.shape[1])]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_186": {
                "variable": {
                    "value": "cmap",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "get_cmap(generator.n_fg)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "[0.75, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_67": {
                "data": {
                    "value": "[0.75, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_68": {
                "tensors": {
                    "value": "[draw_box(img, mask, width, c) for (img, mask) in zip(imgs, masks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ones_193": {
                "variable": {
                    "value": "generator.renderer.renderer.light_color_ambient",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "generator.renderer.texture_channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_194": {
                "variable": {
                    "value": "generator.renderer.renderer.light_color_directional",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "generator.renderer.texture_channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_120": {
                "variable": {
                    "value": "img_fuse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_fg.view(bs * generator.n_tf, generator.n_fg, 3, *generator.imsize)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_117": {
                "*size": {
                    "value": "bs * generator.n_tf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "*generator.imsize",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    }
}