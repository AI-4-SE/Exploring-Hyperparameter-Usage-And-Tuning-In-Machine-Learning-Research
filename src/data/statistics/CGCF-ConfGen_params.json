{
    "generate.py": {
        "torch": {
            "load_37": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/cnf_edge/cnf.py": {
        "torch": {
            "arange_93": {
                "variable": {
                    "value": "indices[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(dim) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_266": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_102": {
                "variable": {
                    "value": "self.chain",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layer_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "_logpx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*x.shape[:-1]",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_159": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_192": {
                "variable": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).reshape(num_channels, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_267": {
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(x - mean, 2)",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_268": {
                "input": {
                    "value": "res / max_sqr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_42": {
                "variable": {
                    "value": "integration_times",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.tensor(0.0).to(x), self.sqrt_end_time * self.sqrt_end_time]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_46": {
                "variable": {
                    "value": "integration_times",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, self.T]",
                    "type": "List",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_164": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_195": {
                "variable": {
                    "value": "batch_ex2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "var_200": {
                "variable": {
                    "value": "batch_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.transpose(0, 1).reshape(num_channels, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_218": {
                "input": {
                    "value": "-0.5 * torch.log(used_var + self.eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_249": {
                "input": {
                    "value": "used_var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "data": {
                    "value": "torch.sqrt(torch.tensor(T))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_237": {
                "input": {
                    "value": "-weight",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_241": {
                "input": {
                    "value": "0.5 * torch.log(used_var + self.eps)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_16": {
                "input": {
                    "value": "torch.tensor(T)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_218": {
                "input": {
                    "value": "used_var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_223": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(*self.shape).expand_as(x)",
                            "Call"
                        ],
                        [
                            "self.weight.view(*self.shape).expand_as(y)",
                            "Call"
                        ],
                        [
                            "self.weight.view(*self.shape).expand(*x.size())",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_16": {
                "data": {
                    "value": "T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_241": {
                "input": {
                    "value": "used_var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "models/cnf_edge/odefunc.py": {
        "torch": {
            "grad_6": {
                "outputs": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states[0]",
                            "Subscript"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_like_47": {
                "variable": {
                    "value": "self._e",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states[0]",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_14": {
                "outputs": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "states[0]",
                            "Subscript"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_40": {
                "*size": {
                    "value": "y.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_grad_enabled_49": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_54": {
                "input": {
                    "value": "edge_attr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/cnf_edge/odegnn.py": {
        "torch": {
            "cat_85": {
                "variable": {
                    "value": "pair_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h_row * h_col, edge_attr]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([eps])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_48": {
                "input": {
                    "value": "x_j + edge_attr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_78": {
                "input": {
                    "value": "node_attr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/cnf_edge/odemlp.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self._layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self._layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in + 1 + dim_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_24": {
                "variable": {
                    "value": "x_context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self._layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "variable": {
                    "value": "self._hyper_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1 + dim_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self._layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self._hyper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1 + dim_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_48": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._hyper(context)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self._layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self._hyper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1 + dim_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self._layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self._hyper_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1 + dim_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self._hyper_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1 + dim_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_75": {
                "variable": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._hyper_gate(context)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self._layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self._hyper_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1 + dim_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self._hyper_gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1 + dim_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_dims + (input_shape[0],)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tanh_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ELU_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_161": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_162": {
                "variable": {
                    "value": "self.activation_fns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "activation_fns[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sigmoid_107": {
                "input": {
                    "value": "self.beta * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "tc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[t, context.view(y.size(0), -1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/cnf_edge/spectral_norm.py": {
        "torch": {
            "dot_45": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.matmul(weight_mat, v), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(height).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch.matmul(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_77": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.new_empty(height).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_78": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.new_empty(int(weight.numel() / height)).normal_(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "fn.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_40": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(weight_mat.t(), u)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_41": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(weight_mat, v)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "input": {
                    "value": "weight_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "variable"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "weight_mat.reshape(height, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.matmul(weight_mat.t(), u), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(int(weight.numel() / height)).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_54": {
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_orig')",
                            "Call"
                        ],
                        [
                            "weight / sigma",
                            "BinOp"
                        ],
                        [
                            "getattr(module, self.name)",
                            "Call"
                        ],
                        [
                            "module._parameters[name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_40": {
                "input": {
                    "value": "weight_mat.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_u')",
                            "Call"
                        ],
                        [
                            "normalize(torch.matmul(weight_mat, v), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(height).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_41": {
                "input": {
                    "value": "weight_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "variable"
                        ],
                        [
                            "weight_mat.permute(self.dim, *[d for d in range(weight_mat.dim()) if d != self.dim])",
                            "Call"
                        ],
                        [
                            "weight_mat.reshape(height, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(module, self.name + '_v')",
                            "Call"
                        ],
                        [
                            "normalize(torch.matmul(weight_mat.t(), u), dim=0, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "normalize(weight.new_empty(int(weight.numel() / height)).normal_(0, 1), dim=0, eps=fn.eps)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/common.py": {
        "torch": {
            "Sequential_81": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "softplus_18": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_61": {
                "*size": {
                    "value": "rgraph_edge_index.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "in_features": {
                    "value": "dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/distgeom.py": {
        "torch": {
            "Adam_11": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[pos]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8.0 if step_size is None else step_size",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "8.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "norm_24": {
                "variable": {
                    "value": "d_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos[edge_index[0]] - pos[edge_index[1]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_66": {
                "variable": {
                    "value": "d_ref",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos[edge_index[0]] - pos[edge_index[1]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_90": {
                "input": {
                    "value": "pos[edge_index[0]] - pos[edge_index[1]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_68": {
                "input": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.flatten()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "d_ref",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(pos[edge_index[0]] - pos[edge_index[1]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "atol": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.005",
                            "Method Argument"
                        ]
                    ]
                },
                "rtol": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.005",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_like_19": {
                "input": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha ** (edge_order.view(-1).float() - 1)",
                            "BinOp"
                        ],
                        [
                            "1.0",
                            "float"
                        ],
                        [
                            "torch.clamp_min(coef + noise, min=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/edgecnf.py": {
        "torch": {
            "cat_141": {
                "variable": {
                    "value": "edge_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(edge_indices, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_155": {
                "variable": {
                    "value": "d_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos[edge_indices[0]] - pos[edge_indices[1]]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "d_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "num_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Embedding_44": {
                "variable": {
                    "value": "self.node_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_45": {
                "variable": {
                    "value": "self.edge_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_111": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples * E",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "edge_index_rep",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "edge_index_rep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(edge_index_rep, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_144": {
                "variable": {
                    "value": "dg_init_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samples * data.num_nodes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_83": {
                "*size": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.size(0)",
                            "Call"
                        ],
                        [
                            "d.size(0)",
                            "Call"
                        ],
                        [
                            "data.edge_index.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.size(0)",
                            "Call"
                        ],
                        [
                            "d.size(0)",
                            "Call"
                        ],
                        [
                            "data.edge_index.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_112": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=args.lr, weight_decay=args.weight_decay, betas=(args.beta1, args.beta2))",
                            "Call"
                        ]
                    ]
                },
                "factor": {
                    "value": "args.sched_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "patience": {
                    "value": "args.sched_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "args.sched_min_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_73": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_new_log_dir(root=args.log_root, prefix='ECNF', tag=args.tag)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_125": {
                "input": {
                    "value": "batch.edge_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/chem.py": {
        "torch": {}
    },
    "utils/dataset.py": {
        "torch": {
            "tensor_24": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mol.GetConformer(0).GetPositions()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "atomic_number",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "variable": {
                    "value": "edge_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[row, col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "edge_type",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "edge_type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_type + 2 * [BOND_TYPES[bond.GetBondType()]]",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(edge_type)",
                            "Call"
                        ],
                        [
                            "edge_type[perm]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_105": {
                "variable": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_115": {
                "obj": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_124": {
                "obj": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "self.processed_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/misc.py": {
        "torch": {
            "load_107": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.save_dir, self.ckpts[idx]['file'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_116": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.save_dir, self.ckpts[idx]['file'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_151": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_80": {
                "obj": {
                    "value": "{'args': args, 'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, fname)",
                            "Call"
                        ]
                    ]
                }
            },
            "Subset_188": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/transforms.py": {
        "torch": {
            "zeros_like_26": {
                "variable": {
                    "value": "order_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "to_dense_adj(data.edge_index).squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_12": {
                "condition": {
                    "value": "x > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "torch.ones_like(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_46": {
                "variable": {
                    "value": "type_highorder",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "adj_order > 1",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.num_types + adj_order - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.zeros_like(adj_order)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_66": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos[col] - pos[row]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_12": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_12": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_21": {
                "n": {
                    "value": "adj.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_46": {
                "input": {
                    "value": "adj_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_higher_order_adj_matrix(adj, self.order)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}