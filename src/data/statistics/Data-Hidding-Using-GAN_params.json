{
    "steganogan/cli.py": {
        "torch": {}
    },
    "steganogan/critics.py": {
        "torch": {
            "mean_55": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(x.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "*args": {
                    "value": "self._conv2d(3, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LeakyReLU_26": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "steganogan/decoders.py": {
        "torch": {
            "Sequential_25": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(3, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(3, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(self.hidden_size, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_92": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(self.hidden_size * 2, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(self.hidden_size * 3, self.data_depth)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_31": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_82": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_83": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_88": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_95": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_65": {
                "tensors": {
                    "value": "x_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "steganogan/encoders.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(3, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(self.hidden_size + self.data_depth, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(3, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(self.hidden_size + self.data_depth, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(3, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(self.hidden_size + self.data_depth, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_122": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(self.hidden_size * 2 + self.data_depth, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self._conv2d(self.hidden_size * 3 + self.data_depth, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_34": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LeakyReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_93": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_94": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_114": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_115": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_119": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_120": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_124": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "x_list + [data]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "steganogan/loader.py": {
        "torch": {}
    },
    "steganogan/models.py": {
        "torch": {
            "Adam_138": {
                "variable": {
                    "value": "critic_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.critic.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_139": {
                "variable": {
                    "value": "decoder_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "_dec_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.decoder.parameters()) + list(self.encoder.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mse_loss_182": {
                "variable": {
                    "value": "encoder_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "generated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.encoder(cover, payload)",
                            "Call"
                        ],
                        [
                            "(255.0 * (generated + 1.0) / 2.0).long()",
                            "Call"
                        ],
                        [
                            "2.0 * generated.float() / 255.0 - 1.0",
                            "BinOp"
                        ],
                        [
                            "self.encoder(cover, payload)",
                            "Call"
                        ],
                        [
                            "self.encoder(cover, payload)[0].clamp(-1.0, 1.0)",
                            "Call"
                        ],
                        [
                            "(generated.permute(2, 1, 0).detach().cpu().numpy() + 1.0) * 127.5",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "cover",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cover.to(self.device)",
                            "Call"
                        ],
                        [
                            "cover.to(self.device)",
                            "Call"
                        ],
                        [
                            "cover.to(self.device)",
                            "Call"
                        ],
                        [
                            "cover.to(self.device)",
                            "Call"
                        ],
                        [
                            "imread(cover, pilmode='RGB') / 127.5 - 1.0",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(cover).permute(2, 1, 0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "cover.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_183": {
                "variable": {
                    "value": "decoder_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(generated)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "payload",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._random_data(cover)",
                            "Call"
                        ],
                        [
                            "self._random_data(cover)",
                            "Call"
                        ],
                        [
                            "message",
                            "Name"
                        ],
                        [
                            "payload + message",
                            "BinOp"
                        ],
                        [
                            "payload[:width * height * depth]",
                            "Subscript"
                        ],
                        [
                            "self._make_payload(cover_size[3], cover_size[2], self.data_depth, text)",
                            "Call"
                        ],
                        [
                            "payload.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_296": {
                "variable": {
                    "value": "cover",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_296": {
                "variable": {
                    "value": "cover",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_319": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_319": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_364": {
                "variable": {
                    "value": "steganogan",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pretrained_path, model_name)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_56": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_59": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "(N, self.data_depth, H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_134": {
                "input": {
                    "value": "self.critic(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_341": {
                "obj": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(pretrained_path, model_name)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log10_205": {
                "input": {
                    "value": "4 / encoder_mse",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "steganogan/utils.py": {
        "torch": {
            "Tensor_74": {
                "variable": {
                    "value": "gauss",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_89": {
                "variable": {
                    "value": "mu1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img1",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_90": {
                "variable": {
                    "value": "mu2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img2",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_96": {
                "input": {
                    "value": "img1 * img1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_97": {
                "input": {
                    "value": "img2 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_98": {
                "input": {
                    "value": "img1 * img2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_2D_window.expand(channel, 1, window_size, window_size).contiguous()",
                            "Call"
                        ],
                        [
                            "create_window(window_size, channel)",
                            "Call"
                        ],
                        [
                            "window.cuda(img1.get_device())",
                            "Call"
                        ],
                        [
                            "window.type_as(img1)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_size // 2",
                            "BinOp"
                        ]
                    ]
                },
                "groups": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}