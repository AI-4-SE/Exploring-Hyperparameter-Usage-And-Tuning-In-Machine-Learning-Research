{
    "bn.py": {
        "tensorflow": {
            "convert_to_tensor_10": {
                "variable": {
                    "value": "learning_phase",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape[axis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_19": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape[axis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_20": {
                "variable": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape[axis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_21": {
                "variable": {
                    "value": "moving_var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_var",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape[axis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cond_35": {
                "variable": {
                    "value": "(mu, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "pred": {
                    "value": "learning_phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(is_training)",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "update_state",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : (moving_mean, moving_var)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "batch_normalization_37": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', shape[axis], dtype=tf.float32, initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('gamma', shape[axis], dtype=tf.float32, initializer=tf.constant_initializer(1.0))",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "batch_norm",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_23": {
                "name": {
                    "value": "moving_mean",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_mean', shape[axis], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_24": {
                "name": {
                    "value": "moving_var",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "moving_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_var', shape[axis], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_27": {
                "variable": {
                    "value": "(mean, variance)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": []
                },
                "axes": {
                    "value": "reduction_axes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(ndim))",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_32": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_33": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(variance)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_18": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_19": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_20": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_21": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assign_sub_29": {
                "ref": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_mean', shape[axis], dtype=tf.float32, initializer=tf.constant_initializer(0.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "(1 - momentum) * (moving_mean - mean)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_sub_30": {
                "ref": {
                    "value": "moving_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('moving_var', shape[axis], dtype=tf.float32, initializer=tf.constant_initializer(1.0), trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "(1 - momentum) * (moving_var - variance)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_31": {
                "control_inputs": {
                    "value": "update_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assign_sub(moving_mean, (1 - momentum) * (moving_mean - mean)), tf.assign_sub(moving_var, (1 - momentum) * (moving_var - variance))]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "helper.py": {
        "tensorflow": {
            "frame_11": {
                "variable": {
                    "value": "framed_signals",
                    "type": "variable",
                    "possible_values": []
                },
                "signal": {
                    "value": "signals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.overlap_and_add(framed_signals, frame_step)",
                            "Call"
                        ],
                        [
                            "signals / window",
                            "BinOp"
                        ],
                        [
                            "tf.cast(signals, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "frame_length",
                    "type": "variable",
                    "possible_values": []
                },
                "frame_step": {
                    "value": "frame_step",
                    "type": "variable",
                    "possible_values": []
                },
                "pad_end": {
                    "value": "conf.frame_pad_end",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_26": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "framed_signals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.frame(signals, frame_length, frame_step, pad_end=conf.frame_pad_end)",
                            "Call"
                        ],
                        [
                            "framed_signals * window",
                            "BinOp"
                        ]
                    ]
                }
            },
            "overlap_and_add_34": {
                "variable": {
                    "value": "signals",
                    "type": "variable",
                    "possible_values": []
                },
                "signal": {
                    "value": "framed_signals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.frame(signals, frame_length, frame_step, pad_end=conf.frame_pad_end)",
                            "Call"
                        ],
                        [
                            "framed_signals * window",
                            "BinOp"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "frame_step",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_36": {
                "variable": {
                    "value": "signals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "signals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.overlap_and_add(framed_signals, frame_step)",
                            "Call"
                        ],
                        [
                            "signals / window",
                            "BinOp"
                        ],
                        [
                            "tf.cast(signals, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "winfunc(frame_length, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "winfunc(frame_length, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(window, [1, frame_length])",
                            "Call"
                        ],
                        [
                            "tf.tile(window, [n_frames, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.overlap_and_add(window, frame_step)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, frame_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_32": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "winfunc(frame_length, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "winfunc(frame_length, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(window, [1, frame_length])",
                            "Call"
                        ],
                        [
                            "tf.tile(window, [n_frames, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.overlap_and_add(window, frame_step)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[n_frames, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "overlap_and_add_33": {
                "variable": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": []
                },
                "signal": {
                    "value": "window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "winfunc(frame_length, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "winfunc(frame_length, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(window, [1, frame_length])",
                            "Call"
                        ],
                        [
                            "tf.tile(window, [n_frames, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.overlap_and_add(window, frame_step)",
                            "Call"
                        ]
                    ]
                },
                "frame_step": {
                    "value": "frame_step",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "infer.py": {
        "tensorflow": {
            "placeholder_25": {
                "variable": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, height]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_29": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_31": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_35": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "infer_v2.py": {
        "tensorflow": {
            "placeholder_20": {
                "variable": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_24": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_26": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_30": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "shape_52": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_105": {
                "variable": {
                    "value": "x2_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_111": {
                "variable": {
                    "value": "x1_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_112": {
                "variable": {
                    "value": "x2_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_113": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_shape - x1_shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "variable": {
                    "value": "zeros",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x2_shape - x1_shape, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_115": {
                "variable": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[zeros, diff]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_116": {
                "variable": {
                    "value": "x1_new",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([zeros, diff], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_16": {
                "variable": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "I.get_shape()[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_35": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, i_c, o_c]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.orthogonal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "variable": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable(name='Weight', shape=[k_h, k_w, i_c, o_c], initializer=tf.orthogonal_initializer(), dtype=tf.float32, trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.get_variable(name='Weight', shape=[ks[0], ks[1], o_c, i_c], initializer=tf.orthogonal_initializer(), dtype=tf.float32, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stri[0], stri[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Weight",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[ks[0], ks[1], o_c, i_c]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.orthogonal_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_transpose_64": {
                "variable": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable(name='Weight', shape=[k_h, k_w, i_c, o_c], initializer=tf.orthogonal_initializer(), dtype=tf.float32, trainable=True)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.get_variable(name='Weight', shape=[ks[0], ks[1], o_c, i_c], initializer=tf.orthogonal_initializer(), dtype=tf.float32, trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "[shape[0], out_height, out_width, o_c]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stri[0], stri[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2d_transpose",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dct_86": {
                "variable": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "framed_signals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frame(signals, frame_length, frame_step)",
                            "Call"
                        ]
                    ]
                },
                "type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_88": {
                "variable": {
                    "value": "spec_real",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.dct(framed_signals, type=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "Analysis(self.noisy_wav_batch, frame_length, frame_step)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "idct_97": {
                "variable": {
                    "value": "signal_f",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.dct(framed_signals, type=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "Analysis(self.noisy_wav_batch, frame_length, frame_step)",
                            "Call"
                        ]
                    ]
                },
                "type": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "norm": {
                    "value": "ortho",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_155": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.save_variables",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "save_relative_paths": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "slice_187": {
                "variable": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(I, W, strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(I, W, output_shape=[shape[0], out_height, out_width, o_c], strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d_transpose')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(spec, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._getModel(Output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Output, axis=-1)",
                            "Call"
                        ],
                        [
                            "Synthesis(output_spec, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "tf.slice(Output, [0, 0], [-1, wav_n_samples])",
                            "Call"
                        ],
                        [
                            "subsample(Input, 1, 45, (5, 7), (2, 2), self.is_training, name='subsample_1')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 45, 90, (5, 7), (2, 2), self.is_training, name='subsample_2')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_3')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_4')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='subsample_5')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='upsample_5')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_1')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_4')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_2')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_3')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 45, (5, 7), (2, 2), self.is_training, name='upsample_2')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_4')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 1, (5, 7), (2, 2), self.is_training, last_layer=True, name='upsample_1')",
                            "Call"
                        ],
                        [
                            "tf_trunc_as(Output, Input)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, wav_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_223": {
                "variable": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Output, res_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Concat_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_231": {
                "variable": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Output, res_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Concat_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_239": {
                "variable": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Output, res_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Concat_3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_247": {
                "variable": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[Output, res_tmp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "Concat_4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_15": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'prelu'",
                            "Method Argument"
                        ],
                        [
                            "'subsample'",
                            "Method Argument"
                        ],
                        [
                            "'upsample'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_19": {
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.get_variable('alpha', I.get_shape()[-1], initializer=tf.constant_initializer(0.0), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_33": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'prelu'",
                            "Method Argument"
                        ],
                        [
                            "'subsample'",
                            "Method Argument"
                        ],
                        [
                            "'upsample'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'prelu'",
                            "Method Argument"
                        ],
                        [
                            "'subsample'",
                            "Method Argument"
                        ],
                        [
                            "'upsample'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "name_scope_82": {
                "name": {
                    "value": "Analysis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_95": {
                "name": {
                    "value": "Synthesis",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_133": {
                "variable": {
                    "value": "half_in",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.noisy_wav_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, height // 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_134": {
                "variable": {
                    "value": "half_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.clean_wav_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, height // 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_135": {
                "variable": {
                    "value": "half_out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.enhanced_wav_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, height // 16]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_172": {
                "variable": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.dct(framed_signals, type=2, norm='ortho')",
                            "Call"
                        ],
                        [
                            "Analysis(self.noisy_wav_batch, frame_length, frame_step)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_175": {
                "variable": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(I, W, strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(I, W, output_shape=[shape[0], out_height, out_width, o_c], strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d_transpose')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(spec, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._getModel(Output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Output, axis=-1)",
                            "Call"
                        ],
                        [
                            "Synthesis(output_spec, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "tf.slice(Output, [0, 0], [-1, wav_n_samples])",
                            "Call"
                        ],
                        [
                            "subsample(Input, 1, 45, (5, 7), (2, 2), self.is_training, name='subsample_1')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 45, 90, (5, 7), (2, 2), self.is_training, name='subsample_2')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_3')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_4')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='subsample_5')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='upsample_5')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_1')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_4')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_2')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_3')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 45, (5, 7), (2, 2), self.is_training, name='upsample_2')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_4')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 1, (5, 7), (2, 2), self.is_training, last_layer=True, name='upsample_1')",
                            "Call"
                        ],
                        [
                            "tf_trunc_as(Output, Input)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_162": {
                "input": {
                    "value": "self.noisy_wav_batch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_170": {
                "name_or_scope": {
                    "value": "Model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_179": {
                "name": {
                    "value": "IRM",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_181": {
                "name": {
                    "value": "irm",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "irm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.tanh(0.5 * Output) * 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_196": {
                "input": {
                    "value": "Input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_199": {
                "input": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(I, W, strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(I, W, output_shape=[shape[0], out_height, out_width, o_c], strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d_transpose')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(spec, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._getModel(Output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Output, axis=-1)",
                            "Call"
                        ],
                        [
                            "Synthesis(output_spec, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "tf.slice(Output, [0, 0], [-1, wav_n_samples])",
                            "Call"
                        ],
                        [
                            "subsample(Input, 1, 45, (5, 7), (2, 2), self.is_training, name='subsample_1')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 45, 90, (5, 7), (2, 2), self.is_training, name='subsample_2')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_3')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_4')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='subsample_5')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='upsample_5')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_1')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_4')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_2')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_3')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 45, (5, 7), (2, 2), self.is_training, name='upsample_2')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_4')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 1, (5, 7), (2, 2), self.is_training, last_layer=True, name='upsample_1')",
                            "Call"
                        ],
                        [
                            "tf_trunc_as(Output, Input)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_203": {
                "input": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(I, W, strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(I, W, output_shape=[shape[0], out_height, out_width, o_c], strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d_transpose')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(spec, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._getModel(Output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Output, axis=-1)",
                            "Call"
                        ],
                        [
                            "Synthesis(output_spec, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "tf.slice(Output, [0, 0], [-1, wav_n_samples])",
                            "Call"
                        ],
                        [
                            "subsample(Input, 1, 45, (5, 7), (2, 2), self.is_training, name='subsample_1')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 45, 90, (5, 7), (2, 2), self.is_training, name='subsample_2')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_3')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_4')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='subsample_5')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='upsample_5')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_1')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_4')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_2')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_3')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 45, (5, 7), (2, 2), self.is_training, name='upsample_2')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_4')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 1, (5, 7), (2, 2), self.is_training, last_layer=True, name='upsample_1')",
                            "Call"
                        ],
                        [
                            "tf_trunc_as(Output, Input)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_207": {
                "input": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(I, W, strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(I, W, output_shape=[shape[0], out_height, out_width, o_c], strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d_transpose')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(spec, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._getModel(Output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Output, axis=-1)",
                            "Call"
                        ],
                        [
                            "Synthesis(output_spec, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "tf.slice(Output, [0, 0], [-1, wav_n_samples])",
                            "Call"
                        ],
                        [
                            "subsample(Input, 1, 45, (5, 7), (2, 2), self.is_training, name='subsample_1')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 45, 90, (5, 7), (2, 2), self.is_training, name='subsample_2')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_3')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_4')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='subsample_5')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='upsample_5')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_1')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_4')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_2')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_3')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 45, (5, 7), (2, 2), self.is_training, name='upsample_2')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_4')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 1, (5, 7), (2, 2), self.is_training, last_layer=True, name='upsample_1')",
                            "Call"
                        ],
                        [
                            "tf_trunc_as(Output, Input)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_212": {
                "input": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(I, W, strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(I, W, output_shape=[shape[0], out_height, out_width, o_c], strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d_transpose')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(spec, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._getModel(Output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Output, axis=-1)",
                            "Call"
                        ],
                        [
                            "Synthesis(output_spec, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "tf.slice(Output, [0, 0], [-1, wav_n_samples])",
                            "Call"
                        ],
                        [
                            "subsample(Input, 1, 45, (5, 7), (2, 2), self.is_training, name='subsample_1')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 45, 90, (5, 7), (2, 2), self.is_training, name='subsample_2')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_3')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_4')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='subsample_5')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='upsample_5')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_1')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_4')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_2')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_3')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 45, (5, 7), (2, 2), self.is_training, name='upsample_2')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_4')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 1, (5, 7), (2, 2), self.is_training, last_layer=True, name='upsample_1')",
                            "Call"
                        ],
                        [
                            "tf_trunc_as(Output, Input)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_215": {
                "input": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(I, W, strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(I, W, output_shape=[shape[0], out_height, out_width, o_c], strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d_transpose')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(spec, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._getModel(Output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Output, axis=-1)",
                            "Call"
                        ],
                        [
                            "Synthesis(output_spec, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "tf.slice(Output, [0, 0], [-1, wav_n_samples])",
                            "Call"
                        ],
                        [
                            "subsample(Input, 1, 45, (5, 7), (2, 2), self.is_training, name='subsample_1')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 45, 90, (5, 7), (2, 2), self.is_training, name='subsample_2')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_3')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_4')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='subsample_5')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='upsample_5')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_1')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_4')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_2')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_3')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 45, (5, 7), (2, 2), self.is_training, name='upsample_2')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_4')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 1, (5, 7), (2, 2), self.is_training, last_layer=True, name='upsample_1')",
                            "Call"
                        ],
                        [
                            "tf_trunc_as(Output, Input)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_218": {
                "input": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(I, W, strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(I, W, output_shape=[shape[0], out_height, out_width, o_c], strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d_transpose')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(spec, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._getModel(Output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Output, axis=-1)",
                            "Call"
                        ],
                        [
                            "Synthesis(output_spec, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "tf.slice(Output, [0, 0], [-1, wav_n_samples])",
                            "Call"
                        ],
                        [
                            "subsample(Input, 1, 45, (5, 7), (2, 2), self.is_training, name='subsample_1')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 45, 90, (5, 7), (2, 2), self.is_training, name='subsample_2')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_3')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_4')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='subsample_5')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='upsample_5')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_1')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_4')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_2')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_3')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 45, (5, 7), (2, 2), self.is_training, name='upsample_2')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_4')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 1, (5, 7), (2, 2), self.is_training, last_layer=True, name='upsample_1')",
                            "Call"
                        ],
                        [
                            "tf_trunc_as(Output, Input)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_226": {
                "input": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(I, W, strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(I, W, output_shape=[shape[0], out_height, out_width, o_c], strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d_transpose')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(spec, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._getModel(Output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Output, axis=-1)",
                            "Call"
                        ],
                        [
                            "Synthesis(output_spec, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "tf.slice(Output, [0, 0], [-1, wav_n_samples])",
                            "Call"
                        ],
                        [
                            "subsample(Input, 1, 45, (5, 7), (2, 2), self.is_training, name='subsample_1')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 45, 90, (5, 7), (2, 2), self.is_training, name='subsample_2')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_3')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_4')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='subsample_5')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='upsample_5')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_1')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_4')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_2')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_3')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 45, (5, 7), (2, 2), self.is_training, name='upsample_2')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_4')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 1, (5, 7), (2, 2), self.is_training, last_layer=True, name='upsample_1')",
                            "Call"
                        ],
                        [
                            "tf_trunc_as(Output, Input)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_234": {
                "input": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(I, W, strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(I, W, output_shape=[shape[0], out_height, out_width, o_c], strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d_transpose')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(spec, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._getModel(Output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Output, axis=-1)",
                            "Call"
                        ],
                        [
                            "Synthesis(output_spec, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "tf.slice(Output, [0, 0], [-1, wav_n_samples])",
                            "Call"
                        ],
                        [
                            "subsample(Input, 1, 45, (5, 7), (2, 2), self.is_training, name='subsample_1')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 45, 90, (5, 7), (2, 2), self.is_training, name='subsample_2')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_3')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_4')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='subsample_5')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='upsample_5')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_1')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_4')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_2')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_3')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 45, (5, 7), (2, 2), self.is_training, name='upsample_2')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_4')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 1, (5, 7), (2, 2), self.is_training, last_layer=True, name='upsample_1')",
                            "Call"
                        ],
                        [
                            "tf_trunc_as(Output, Input)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_242": {
                "input": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(I, W, strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(I, W, output_shape=[shape[0], out_height, out_width, o_c], strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d_transpose')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(spec, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._getModel(Output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Output, axis=-1)",
                            "Call"
                        ],
                        [
                            "Synthesis(output_spec, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "tf.slice(Output, [0, 0], [-1, wav_n_samples])",
                            "Call"
                        ],
                        [
                            "subsample(Input, 1, 45, (5, 7), (2, 2), self.is_training, name='subsample_1')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 45, 90, (5, 7), (2, 2), self.is_training, name='subsample_2')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_3')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_4')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='subsample_5')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='upsample_5')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_1')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_4')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_2')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_3')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 45, (5, 7), (2, 2), self.is_training, name='upsample_2')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_4')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 1, (5, 7), (2, 2), self.is_training, last_layer=True, name='upsample_1')",
                            "Call"
                        ],
                        [
                            "tf_trunc_as(Output, Input)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_250": {
                "input": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(I, W, strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(I, W, output_shape=[shape[0], out_height, out_width, o_c], strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d_transpose')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(spec, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._getModel(Output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Output, axis=-1)",
                            "Call"
                        ],
                        [
                            "Synthesis(output_spec, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "tf.slice(Output, [0, 0], [-1, wav_n_samples])",
                            "Call"
                        ],
                        [
                            "subsample(Input, 1, 45, (5, 7), (2, 2), self.is_training, name='subsample_1')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 45, 90, (5, 7), (2, 2), self.is_training, name='subsample_2')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_3')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_4')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='subsample_5')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='upsample_5')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_1')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_4')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_2')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_3')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 45, (5, 7), (2, 2), self.is_training, name='upsample_2')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_4')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 1, (5, 7), (2, 2), self.is_training, last_layer=True, name='upsample_1')",
                            "Call"
                        ],
                        [
                            "tf_trunc_as(Output, Input)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_253": {
                "input": {
                    "value": "Output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos + neg",
                            "BinOp"
                        ],
                        [
                            "tf.nn.conv2d(I, W, strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d_transpose(I, W, output_shape=[shape[0], out_height, out_width, o_c], strides=[1, stri[0], stri[1], 1], padding='SAME', name='conv2d_transpose')",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.layer_norm(Output, reuse=tf.AUTO_REUSE, scope='layer_norm')",
                            "Call"
                        ],
                        [
                            "prelu(Output, name='prelu')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(spec, axis=-1)",
                            "Call"
                        ],
                        [
                            "self._getModel(Output)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(Output, axis=-1)",
                            "Call"
                        ],
                        [
                            "Synthesis(output_spec, frame_length, frame_step)",
                            "Call"
                        ],
                        [
                            "tf.slice(Output, [0, 0], [-1, wav_n_samples])",
                            "Call"
                        ],
                        [
                            "subsample(Input, 1, 45, (5, 7), (2, 2), self.is_training, name='subsample_1')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 45, 90, (5, 7), (2, 2), self.is_training, name='subsample_2')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_3')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (2, 2), self.is_training, name='subsample_4')",
                            "Call"
                        ],
                        [
                            "subsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='subsample_5')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 90, (3, 5), (1, 2), self.is_training, name='upsample_5')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_1')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_4')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_2')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 90, (3, 5), (2, 2), self.is_training, name='upsample_3')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_3')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 180, 45, (5, 7), (2, 2), self.is_training, name='upsample_2')",
                            "Call"
                        ],
                        [
                            "tf.concat([Output, res_tmp], axis=-1, name='Concat_4')",
                            "Call"
                        ],
                        [
                            "upsample(Output, 90, 1, (5, 7), (2, 2), self.is_training, last_layer=True, name='upsample_1')",
                            "Call"
                        ],
                        [
                            "tf_trunc_as(Output, Input)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_17": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_variable_141": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_143": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(self.hparams.lr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_146": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.999",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_180": {
                "x": {
                    "value": "0.5 * Output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_22": {
                "x": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_140": {
                "name_or_scope": {
                    "value": "not_train_vars",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_145": {
                "name_or_scope": {
                    "value": "optimizer",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_142": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_144": {
                "value": {
                    "value": "self.hparams.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "py_func_26": {
                "variable": {
                    "value": "(clean, noisy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "read_pickle",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[file_path]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConfigProto_56": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_59": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "trainSpeechNames",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "train_speech_names",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_42": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.batch_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "valSpeechNames",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "val_speech_names",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_48": {
                "variable": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d.batch_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "name_scope_40": {
                "name": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "tensorflow": {
            "l2_normalize_26": {
                "variable": {
                    "value": "clean_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "clean",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "clean_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_27": {
                "variable": {
                    "value": "enhanced_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "enhanced",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "enhanced_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_28": {
                "variable": {
                    "value": "noise_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy - clean",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "noise_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "l2_normalize_29": {
                "variable": {
                    "value": "noise_n_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "noise_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy - enhanced",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "noise_n_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_31": {
                "variable": {
                    "value": "clean_norm_val",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(clean), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "clean_norm_val",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_35": {
                "variable": {
                    "value": "noise_norm_val",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(noise), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "noise_norm_val",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_20": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cosine_distance'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_31": {
                "input_tensor": {
                    "value": "tf.square(clean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_35": {
                "input_tensor": {
                    "value": "tf.square(noise)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_45": {
                "input_tensor": {
                    "value": "w_angle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * tf.reduce_sum(clean_norm * enhanced_norm, axis=-1) + (1 - alpha) * tf.reduce_sum(noise_norm * noise_n_norm, axis=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_31": {
                "x": {
                    "value": "clean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_35": {
                "x": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "noisy - clean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_42": {
                "input_tensor": {
                    "value": "clean_norm * enhanced_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_43": {
                "input_tensor": {
                    "value": "noise_norm * noise_n_norm",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}