{
    "core/Memory.py": {
        "sklearn": {
            "PCA_128": {
                "variable": {
                    "value": "pca",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pairwise_distances_96": {
                "X": {
                    "value": "memory_hidden_reps",
                    "type": "Variable",
                    "possible_values": []
                },
                "Y": {
                    "value": "query_hidden_repr",
                    "type": "Variable",
                    "possible_values": []
                },
                "metric": {
                    "value": "cosine",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "data_postp/classification.py": {
        "sklearn": {
            "LogisticRegression_43": {
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LogisticRegression_25": {
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "data_postp/classification_head.py": {
        "sklearn": {
            "train_test_split_52": {
                "variable": {
                    "value": "(X_train, X_test, Y_train, Y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_55": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_input]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_classes]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_92": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_93": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_96": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(pred, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(y, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, 'float')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_100": {
                "variable": {
                    "value": "init",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_float_13": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_14": {
                "name": {
                    "value": "training_epochs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "20000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "training_epochs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_15": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "training_epochs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_16": {
                "name": {
                    "value": "df_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "METADATA_PICKLE_FILE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/common/homes/students/rothfuss/Documents/selected_trainings/4_actNet_gdl/validate/metadata_and_hidden_rep_df_08-07-17_00-21-11_valid.pickle'",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "training_epochs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_17": {
                "name": {
                    "value": "label_column",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "category",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "name of column in df that contains the labels for the classification",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_18": {
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "keep probability dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "one_hot_40": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "[category_dict[category] for category in df['category']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "depth": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(set(df[FLAGS.label_column]))",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_41": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_41": {
                "variable": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": []
                },
                "main": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.one_hot([category_dict[category] for category in df['category']], n_classes)",
                            "Call"
                        ],
                        [
                            "tf.Session().run(Y)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_65": {
                "variable": {
                    "value": "layer_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, weights['h1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_67": {
                "variable": {
                    "value": "layer_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(x, weights['h1']), biases['b1'])",
                            "Call"
                        ],
                        [
                            "NONLINEARITY(layer_1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(layer_1, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_69": {
                "variable": {
                    "value": "layer_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(layer_1, weights['h2'])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "biases['b2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_71": {
                "variable": {
                    "value": "layer_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])",
                            "Call"
                        ],
                        [
                            "NONLINEARITY(layer_2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(layer_2, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_78": {
                "initial_value": {
                    "value": "tf.random_normal([n_input, n_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1, n_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_80": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_2, n_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_83": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "initial_value": {
                    "value": "tf.random_normal([n_hidden_2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "initial_value": {
                    "value": "tf.random_normal([n_classes])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_92": {
                "logits": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "multilayer_perceptron(x, weights, biases, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_classes])",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_96": {
                "input": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_classes])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(pred, 1), tf.argmax(y, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_65": {
                "a": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_input])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h1']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "a": {
                    "value": "layer_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(x, weights['h1']), biases['b1'])",
                            "Call"
                        ],
                        [
                            "NONLINEARITY(layer_1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(layer_1, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['h2']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "a": {
                    "value": "layer_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.add(tf.matmul(layer_1, weights['h2']), biases['b2'])",
                            "Call"
                        ],
                        [
                            "NONLINEARITY(layer_2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(layer_2, keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights['out']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data_postp/matching.py": {
        "sklearn": {
            "LogisticRegression_100": {
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "data_postp/scores.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "data_postp/similarity_computations.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "core/Initializer.py": {
        "tensorflow": {
            "group_20": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.global_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_22": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Coordinator_26": {
                "variable": {
                    "value": "self.coord",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_27": {
                "variable": {
                    "value": "self.threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "self.coord",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_39": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "latest_checkpoint_44": {
                "variable": {
                    "value": "latest_checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.pretrained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_52": {
                "variable": {
                    "value": "self.saver_restore",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "list(global_vars.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_50": {
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "train_model",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "core/Model.py": {
        "tensorflow": {
            "concat_260": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_261": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(0, losses)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(loss, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_with_default_14": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_with_default_15": {
                "variable": {
                    "value": "self.iter_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "FLAGS.num_iterations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_with_default_17": {
                "variable": {
                    "value": "self.noise_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "FLAGS.noise_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_18": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_232": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "grads",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "average_gradients(tower_grads)",
                            "Call"
                        ],
                        [
                            "self.opt.compute_gradients(tower_loss)",
                            "Call"
                        ],
                        [
                            "self.opt.compute_gradients(tower_loss, var_list=train_vars)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_233": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(0, grads)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_254": {
                "variable": {
                    "value": "expanded_l",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tower_losses",
                            "Name"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "self.elapsed_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "merge_87": {
                "variable": {
                    "value": "self.sum_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.summaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_143": {
                "variable": {
                    "value": "self.sum_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.summaries",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_226": {
                "variable": {
                    "value": "expanded_g",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_42": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'train_model'",
                            "MethodArgument"
                        ],
                        [
                            "'valid_model'",
                            "MethodArgument"
                        ],
                        [
                            "'feeding_model'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "cast_53": {
                "variable": {
                    "value": "train_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "train_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(train_batch, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_94": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'train_model'",
                            "MethodArgument"
                        ],
                        [
                            "'valid_model'",
                            "MethodArgument"
                        ],
                        [
                            "'feeding_model'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'train_model'",
                            "MethodArgument"
                        ],
                        [
                            "'valid_model'",
                            "MethodArgument"
                        ],
                        [
                            "'feeding_model'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_156": {
                "variable": {
                    "value": "self.feed_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, FLAGS.encoder_length, FLAGS.height, FLAGS.width, FLAGS.num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "feed_batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_27": {
                "name": {
                    "value": "summary_prefix + '_future_gen_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.frames_pred[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_29": {
                "name": {
                    "value": "summary_prefix + '_future_orig_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "frames[:, encoder_length + i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_32": {
                "name": {
                    "value": "summary_prefix + '_reconst_gen_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.frames_reconst[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_34": {
                "name": {
                    "value": "summary_prefix + '_reconst_orig_' + str(i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "frames[:, i, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_72": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_84": {
                "name": {
                    "value": "batch_duration",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.elapsed_time",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_86": {
                "name": {
                    "value": "summary_prefix + '_loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "reuse_scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_106": {
                "variable": {
                    "value": "val_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "val_batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.cast(val_batch, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_128": {
                "variable": {
                    "value": "self.frames_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.concat(1, frames_pred_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unstack_129": {
                "variable": {
                    "value": "self.frames_reconst",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.concat(1, frames_reconst_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_130": {
                "variable": {
                    "value": "self.hidden_repr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "hidden_repr_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "label_batch_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_132": {
                "variable": {
                    "value": "self.metadata",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "metadata_batch_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_133": {
                "variable": {
                    "value": "val_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "val_batch_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "scalar_142": {
                "name": {
                    "value": "summary_prefix + '_loss'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "reuse_scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_54": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_124": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_55": {
                "name": {
                    "value": "'%s_%d' % ('tower', i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_109": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_128": {
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "frames_pred_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_129": {
                "values": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "frames_reconst_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "name_scope_110": {
                "name": {
                    "value": "'%s_%d' % ('tower', i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_scope_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_collection_65": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FLAGS.fine_tuning_weights_list",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "core/production_op.py": {
        "tensorflow": {
            "info_37": {
                "msg": {
                    "value": " --- Starting feeding --- ",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "data_prep/TFRW2Images.py": {
        "tensorflow": {
            "string_input_producer_25": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gfile.Glob(os.path.join(inputPath, '*.tfrecords'))",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TFRecordReader_26": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_45": {
                "variable": {
                    "value": "image_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "image_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(0, image_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_48": {
                "variable": {
                    "value": "image_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_seq]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "25",
                            "Constant"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "capacity": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_initializer_65": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Glob_88": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(inputPath, '*.tfrecords')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InteractiveSession_91": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "parse_single_example_35": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{image_name: tf.FixedLenFeature([], tf.string)}",
                            "Dict"
                        ],
                        [
                            "tf.parse_single_example(serialized_example, features=features)",
                            "Call"
                        ]
                    ]
                }
            },
            "decode_raw_40": {
                "variable": {
                    "value": "image_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "features[image_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(features[image_name], out_type=tf.uint8)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.pack([1, 128, 128, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_69": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_70": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "start_queue_runners_92": {
                "sess": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.InteractiveSession()",
                            "Call"
                        ]
                    ]
                }
            },
            "run_119": {
                "main": {
                    "value": "main",
                    "type": "Variable",
                    "possible_values": []
                },
                "argv": {
                    "value": "[sys.argv[0]] + unparsed",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "initialize_all_variables_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_34": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data_prep/avi2tfrecords.py": {
        "tensorflow": {
            "DEFINE_integer_34": {
                "name": {
                    "value": "num_videos",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of videos stored in one single tfrecords file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_35": {
                "name": {
                    "value": "image_color_depth",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "np.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "help": {
                    "value": "Color depth for the images stored in the tfrecords files. Has to correspond to the source video color depth. Specified as np dtype (e.g. np.uint8).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "source",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "SOURCE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/insert/source/here'",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "Directory with video files",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_39": {
                "name": {
                    "value": "output_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "DESTINATION",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/insert/destination/here'",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "Directory for storing tf records",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Feature_44": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_47": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Glob_103": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(source_path, FILE_FILTER)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_161": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_147": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(destination_path, name + str(current_batch_number) + '_of_' + str(total_batch_number) + '.tfrecords')",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_44": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_47": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_161": {
                "feature": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "data_prep/convertToRecords.py": {
        "tensorflow": {
            "DEFINE_integer_48": {
                "name": {
                    "value": "num_video",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Number of videos stored in one single tfrecords file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_49": {
                "name": {
                    "value": "source",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "SOURCE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/PDFData/scrambled_eggs/augment/rgb/valid/'",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "Directory with avi files",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_50": {
                "name": {
                    "value": "file_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/data",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to numpy (train|valid|test) file",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_51": {
                "name": {
                    "value": "output_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "DESTINATION",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/localhome/rothfuss/data/segmented_scrambled_eggs_augmented/tfrecords_all'",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "Directory for storing tf records",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_54": {
                "name": {
                    "value": "typ",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "help": {
                    "value": "'Processing type for video data - Allowed values: ' + str(ALLOWED_TYPES)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Feature_58": {
                "int64_list": {
                    "value": "tf.train.Int64List(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_61": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Example_110": {
                "variable": {
                    "value": "example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.train.Features(feature=feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Glob_254": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(source_path, FILE_FILTER)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "run_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TFRecordWriter_93": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "path": {
                    "value": "filename",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(destination_path, name + str(current_batch_number) + '_of_' + str(total_batch_number) + '.tfrecords')",
                            "Call"
                        ]
                    ]
                }
            },
            "Int64List_58": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "BytesList_61": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Features_110": {
                "feature": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            }
        }
    },
    "data_prep/model_input.py": {
        "tensorflow": {
            "TFRecordReader_19": {
                "variable": {
                    "value": "reader",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_52": {
                "variable": {
                    "value": "image_seq",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "image_seq",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(0, image_seq)",
                            "Call"
                        ]
                    ]
                }
            },
            "Glob_86": {
                "variable": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(path, data_filter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "string_input_producer_131": {
                "variable": {
                    "value": "filename_queue_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gfile.Glob(os.path.join(path, data_filter))",
                            "Call"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "parse_single_example_37": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "serialized": {
                    "value": "serialized_example",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "feature_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{path: tf.FixedLenFeature([], tf.string), 'height': tf.FixedLenFeature([], tf.int64), 'width': tf.FixedLenFeature([], tf.int64), 'depth': tf.FixedLenFeature([], tf.int64), 'id': tf.FixedLenFeature([], tf.string), 'metadata': tf.FixedLenFeature([], tf.string)}",
                            "Dict"
                        ]
                    ]
                }
            },
            "reshape_41": {
                "variable": {
                    "value": "image_buffer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features[path]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "decode_raw_42": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_bytes": {
                    "value": "image_buffer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(features[path], shape=[])",
                            "Call"
                        ]
                    ]
                },
                "out_type": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(image_buffer, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, tf.pack([FLAGS.height, FLAGS.width, FLAGS.num_depth]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [1, FLAGS.height, FLAGS.width, FLAGS.num_depth])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.pack([FLAGS.height, FLAGS.width, FLAGS.num_depth])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.decode_raw(image_buffer, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, tf.pack([FLAGS.height, FLAGS.width, FLAGS.num_depth]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [1, FLAGS.height, FLAGS.width, FLAGS.num_depth])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, FLAGS.height, FLAGS.width, FLAGS.num_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "string_input_producer_92": {
                "variable": {
                    "value": "filename_queue",
                    "type": "Variable",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "filenames",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gfile.Glob(os.path.join(path, data_filter))",
                            "Call"
                        ]
                    ]
                },
                "num_epochs": {
                    "value": "num_epochs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "group_139": {
                "variable": {
                    "value": "init_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tf.local_variables_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Coordinator_141": {
                "variable": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_142": {
                "variable": {
                    "value": "threads",
                    "type": "Variable",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_91": {
                "name": {
                    "value": "input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_103": {
                "variable": {
                    "value": "(image_seq_batch, video_id_batch, metadata_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_seq_tensor, video_id, features['metadata']]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_number_of_records(filenames)",
                            "Call"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "FLAGS.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "100 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shuffle_batch_113": {
                "variable": {
                    "value": "(image_seq_batch, video_id_batch)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[image_seq_tensor, video_id]",
                    "type": "List",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_number_of_records(filenames)",
                            "Call"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "FLAGS.num_threads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "60 * 8 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min_after_dequeue": {
                    "value": "10 * 8 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_138": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FixedLenFeature_29": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_30": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_31": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_32": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_33": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FixedLenFeature_34": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.string",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "local_variables_initializer_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data_prep/video_preparation.py": {
        "tensorflow": {
            "Glob_409": {
                "variable": {
                    "value": "file_paths",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(video_dir, '*.avi')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "run_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_36": {
                "msg": {
                    "value": " ---  + FLAGS.mode.capitalize() +  --- ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_49": {
                "msg": {
                    "value": " ---  + FLAGS.mode.capitalize() +  --- ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_54": {
                "msg": {
                    "value": " ---  + FLAGS.mode.capitalize() +  --- ",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/conv_lstm.py": {
        "tensorflow": {
            "split_77": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_state(inputs, list(spatial_size) + [2 * num_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_78": {
                "variable": {
                    "value": "inputs_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[inputs, h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_80": {
                "variable": {
                    "value": "i_j_f_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs_h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.concat(3, [inputs, h])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "4 * num_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[filter_size, filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "Gates",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_87": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "i_j_f_o",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.conv2d(inputs_h, 4 * num_channels, [filter_size, filter_size], stride=1, activation_fn=None, scope='Gates', weights_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(h, 4 * num_channels, [filter_size, filter_size], stride=1, activation_fn=None, scope='Gates', weights_initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_105": {
                "variable": {
                    "value": "(c, h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "init_state(inputs, list(spatial_size) + [2 * num_channels])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_107": {
                "variable": {
                    "value": "i_j_f_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "4 * num_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "[filter_size, filter_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "scope": {
                    "value": "Gates",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "split_114": {
                "variable": {
                    "value": "(i, j, f, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "i_j_f_o",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.conv2d(inputs_h, 4 * num_channels, [filter_size, filter_size], stride=1, activation_fn=None, scope='Gates', weights_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(h, 4 * num_channels, [filter_size, filter_size], stride=1, activation_fn=None, scope='Gates', weights_initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_39": {
                "values": {
                    "value": "[batch_size] + state_shape",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BasicConvLstmCell",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, state]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "BasicConvLstmCell",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[state]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_32": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_90": {
                "x": {
                    "value": "new_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c * tf.sigmoid(f + forget_bias) + tf.sigmoid(i) * tf.tanh(j)",
                            "BinOp"
                        ],
                        [
                            "c * tf.sigmoid(f + forget_bias) + tf.sigmoid(i) * tf.tanh(j)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_90": {
                "x": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_92": {
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_117": {
                "x": {
                    "value": "new_c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "c * tf.sigmoid(f + forget_bias) + tf.sigmoid(i) * tf.tanh(j)",
                            "BinOp"
                        ],
                        [
                            "c * tf.sigmoid(f + forget_bias) + tf.sigmoid(i) * tf.tanh(j)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_117": {
                "x": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "concat_119": {
                "values": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "[new_c, new_h]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_89": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_89": {
                "x": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_116": {
                "x": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_116": {
                "x": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "models/loss_functions.py": {
        "tensorflow": {
            "pow_13": {
                "variable": {
                    "value": "true_pred_diff_vert",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(difference_gradient(true, vertical=True) - difference_gradient(pred, vertical=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pow_15": {
                "variable": {
                    "value": "true_pred_diff_hor",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(difference_gradient(true, vertical=False) - difference_gradient(pred, vertical=False))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_26": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_13": {
                "x": {
                    "value": "difference_gradient(true, vertical=True) - difference_gradient(pred, vertical=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_15": {
                "x": {
                    "value": "difference_gradient(true, vertical=False) - difference_gradient(pred, vertical=False)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_17": {
                "x": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_28": {
                "x": {
                    "value": "image[:, 0:s[1] - 1, :, :] - image[:, 1:s[1], :, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_30": {
                "x": {
                    "value": "image[:, :, 0:s[2] - 1, :] - image[:, :, 1:s[2], :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_40": {
                "input_tensor": {
                    "value": "tf.square(true - pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_40": {
                "x": {
                    "value": "tf.size(pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_51": {
                "x": {
                    "value": "1.0 / mean_squared_error(true, pred)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_56": {
                "input_tensor": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.square(mu) + tf.square(sigma) - tf.log(1e-08 + tf.square(sigma)) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_17": {
                "input_tensor": {
                    "value": "true_pred_diff_hor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.pow(tf.abs(difference_gradient(true, vertical=False) - difference_gradient(pred, vertical=False)), alpha)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_40": {
                "x": {
                    "value": "true - pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "size_40": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_55": {
                "x": {
                    "value": "1e-08 + tf.square(sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_55": {
                "x": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_110": {
                "input": {
                    "value": "sigm_latent",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv4.py": {
        "tensorflow": {
            "conv2d_41": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_49": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_57": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_66": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_118": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_127": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_136": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_145": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "conv2d_75": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[8, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "conv2d_transpose_108": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_repr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fc_conv",
                            "Name"
                        ],
                        [
                            "hidden4",
                            "Name"
                        ],
                        [
                            "encoder_model(frames, encoder_len, initializer, fc_conv_layer=fc_conv_layer)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[8, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv4_fc512.py": {
        "tensorflow": {
            "conv2d_41": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_49": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_57": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_66": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_118": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_127": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_136": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_145": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "conv2d_75": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[8, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_104": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "conv2d_transpose_108": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_repr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fc_conv",
                            "Name"
                        ],
                        [
                            "hidden4",
                            "Name"
                        ],
                        [
                            "encoder_model(frames, encoder_len, initializer, fc_conv_layer=fc_conv_layer)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[8, 8]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv5_fc128.py": {
        "tensorflow": {
            "conv2d_39": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_55": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_64": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_122": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_131": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_140": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_149": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm8'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_156": {
                "variable": {
                    "value": "upconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv5",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "conv2d_80": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "conv2d_transpose_112": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_repr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fc_conv",
                            "Name"
                        ],
                        [
                            "hidden5",
                            "Name"
                        ],
                        [
                            "encoder_model(frames, encoder_len, initializer, fc_conv_layer=fc_conv_layer)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv5_fc256.py": {
        "tensorflow": {
            "conv2d_39": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_55": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_64": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_72": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_122": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_131": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_140": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_149": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm8'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_156": {
                "variable": {
                    "value": "upconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv5",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "conv2d_80": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "conv2d_transpose_112": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_repr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fc_conv",
                            "Name"
                        ],
                        [
                            "hidden5",
                            "Name"
                        ],
                        [
                            "encoder_model(frames, encoder_len, initializer, fc_conv_layer=fc_conv_layer)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv5_fc_lstm2_1000_deep_64.py": {
        "tensorflow": {
            "conv2d_40": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_42": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(frame, 32, [5, 5], stride=2, scope='conv1', normalizer_fn=tf_layers.layer_norm, weights_initializer=initializer, normalizer_params={'scope': 'layer_norm1'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv1, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_47": {
                "variable": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_50": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_52": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(hidden1, hidden1.get_shape()[3], [5, 5], stride=2, scope='conv2', normalizer_fn=tf_layers.layer_norm, weights_initializer=initializer, normalizer_params={'scope': 'layer_norm3'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv2, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_57": {
                "variable": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_60": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_62": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(hidden2, hidden2.get_shape()[3], [5, 5], stride=2, scope='conv3', normalizer_fn=tf_layers.layer_norm, weights_initializer=initializer, normalizer_params={'scope': 'layer_norm5'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv3, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_67": {
                "variable": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_70": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_72": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(hidden3, hidden3.get_shape()[3], [3, 3], stride=2, scope='conv4', normalizer_fn=tf_layers.layer_norm, weights_initializer=initializer, normalizer_params={'scope': 'layer_norm7'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv4, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_77": {
                "variable": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_80": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_82": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(hidden4, hidden4.get_shape()[3], [3, 3], stride=2, scope='conv5', normalizer_fn=tf_layers.layer_norm, weights_initializer=initializer, normalizer_params={'scope': 'layer_norm9'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv5, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_87": {
                "variable": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_91": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_92": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(hidden5, FC_LAYER_SIZE, [4, 4], stride=1, scope='fc_conv', padding='VALID', weights_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fc_conv, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d_transpose(hidden0, 64, [4, 4], stride=1, scope='fc_conv', padding='VALID', weights_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fc_conv, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_129": {
                "variable": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(hidden0, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_131": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(hidden0, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_132": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(hidden5, FC_LAYER_SIZE, [4, 4], stride=1, scope='fc_conv', padding='VALID', weights_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fc_conv, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d_transpose(hidden0, 64, [4, 4], stride=1, scope='fc_conv', padding='VALID', weights_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fc_conv, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_138": {
                "variable": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_141": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_144": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(hidden1, hidden1.get_shape()[3], 3, stride=2, scope='upconv1', weights_initializer=initializer, normalizer_fn=tf_layers.layer_norm, normalizer_params={'scope': 'layer_norm2'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(upconv1, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_149": {
                "variable": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_152": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_155": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(hidden2, hidden2.get_shape()[3], 3, stride=2, scope='upconv2', weights_initializer=initializer, normalizer_fn=tf_layers.layer_norm, normalizer_params={'scope': 'layer_norm4'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(upconv2, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_160": {
                "variable": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_163": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_166": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(hidden3, hidden3.get_shape()[3], 5, stride=2, scope='upconv3', weights_initializer=initializer, normalizer_fn=tf_layers.layer_norm, normalizer_params={'scope': 'layer_norm6'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(upconv3, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_171": {
                "variable": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_174": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm8'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_175": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(hidden4, hidden4.get_shape()[3], 5, stride=2, scope='upconv4', normalizer_fn=tf_layers.layer_norm, weights_initializer=initializer, normalizer_params={'scope': 'layer_norm8'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(upconv4, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_180": {
                "variable": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_182": {
                "variable": {
                    "value": "upconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv5",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv5_fc_lstm2_1000_deep_64_vae.py": {
        "tensorflow": {
            "conv2d_41": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_43": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(frame, 32, [5, 5], stride=2, scope='conv1', normalizer_fn=tf_layers.layer_norm, weights_initializer=initializer, normalizer_params={'scope': 'layer_norm1'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv1, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_48": {
                "variable": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_51": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_53": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(hidden1, hidden1.get_shape()[3], [5, 5], stride=2, scope='conv2', normalizer_fn=tf_layers.layer_norm, weights_initializer=initializer, normalizer_params={'scope': 'layer_norm3'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv2, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_58": {
                "variable": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_61": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_63": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(hidden2, hidden2.get_shape()[3], [5, 5], stride=2, scope='conv3', normalizer_fn=tf_layers.layer_norm, weights_initializer=initializer, normalizer_params={'scope': 'layer_norm5'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv3, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_68": {
                "variable": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_73": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(hidden3, hidden3.get_shape()[3], [3, 3], stride=2, scope='conv4', normalizer_fn=tf_layers.layer_norm, weights_initializer=initializer, normalizer_params={'scope': 'layer_norm7'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv4, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_78": {
                "variable": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_83": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(hidden4, hidden4.get_shape()[3], [3, 3], stride=2, scope='conv5', normalizer_fn=tf_layers.layer_norm, weights_initializer=initializer, normalizer_params={'scope': 'layer_norm9'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(conv5, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_88": {
                "variable": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_92": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_93": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(hidden5, FC_LAYER_SIZE, [4, 4], stride=1, scope='fc_conv', padding='VALID', weights_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fc_conv, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d_transpose(hidden0, 64, [4, 4], stride=1, scope='fc_conv', padding='VALID', weights_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fc_conv, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_131": {
                "variable": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden_repr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_repr + tf.random_normal(shape=hidden_repr.get_shape(), mean=0.0, stddev=noise_std, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_132": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(hidden_repr, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_133": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d(hidden5, FC_LAYER_SIZE, [4, 4], stride=1, scope='fc_conv', padding='VALID', weights_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fc_conv, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "slim.layers.conv2d_transpose(hidden0, 64, [4, 4], stride=1, scope='fc_conv', padding='VALID', weights_initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(fc_conv, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_139": {
                "variable": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_142": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden1, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_145": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(hidden1, hidden1.get_shape()[3], 3, stride=2, scope='upconv1', weights_initializer=initializer, normalizer_fn=tf_layers.layer_norm, normalizer_params={'scope': 'layer_norm2'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(upconv1, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_150": {
                "variable": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_153": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden2, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_156": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(hidden2, hidden2.get_shape()[3], 3, stride=2, scope='upconv2', weights_initializer=initializer, normalizer_fn=tf_layers.layer_norm, normalizer_params={'scope': 'layer_norm4'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(upconv2, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_161": {
                "variable": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_164": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden3, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_167": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(hidden3, hidden3.get_shape()[3], 5, stride=2, scope='upconv3', weights_initializer=initializer, normalizer_fn=tf_layers.layer_norm, normalizer_params={'scope': 'layer_norm6'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(upconv3, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_172": {
                "variable": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_175": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden4, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm8'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "dropout_176": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.conv2d_transpose(hidden4, hidden4.get_shape()[3], 5, stride=2, scope='upconv4', normalizer_fn=tf_layers.layer_norm, weights_initializer=initializer, normalizer_params={'scope': 'layer_norm8'})",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(upconv4, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "dropout_181": {
                "variable": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "keep_prob_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ],
                        [
                            "0.9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_183": {
                "variable": {
                    "value": "upconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden5, keep_prob_dropout)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv5",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "variable_scope_130": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "shape_104": {
                "input": {
                    "value": "mu",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slim.layers.fully_connected(inputs=lstm_state6, num_outputs=VAE_REPR_SIZE, activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv5_fc_lstm2_128.py": {
        "tensorflow": {
            "conv2d_38": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_46": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_54": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_63": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_79": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_119": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_127": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_136": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_145": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_154": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm8'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_161": {
                "variable": {
                    "value": "upconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv5",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_36": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv5_fc_lstm2_800_deep_64.py": {
        "tensorflow": {
            "conv2d_40": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_82": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "800",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_120": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_128": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_137": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_146": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_155": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm8'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_161": {
                "variable": {
                    "value": "upconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv5",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv5_fc_lstm_1024.py": {
        "tensorflow": {
            "conv2d_40": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_118": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_126": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_135": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_144": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_153": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm8'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_160": {
                "variable": {
                    "value": "upconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv5",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv5_fc_lstm_1024_deep.py": {
        "tensorflow": {
            "conv2d_40": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_82": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_119": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_127": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_136": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_145": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_154": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm8'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_161": {
                "variable": {
                    "value": "upconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv5",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv5_fc_lstm_128.py": {
        "tensorflow": {
            "conv2d_40": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_118": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_126": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_135": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_144": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_153": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm8'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_160": {
                "variable": {
                    "value": "upconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv5",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv5_fc_lstm_128_noise.py": {
        "tensorflow": {
            "conv2d_40": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_120": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_128": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_137": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_146": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_155": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm8'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_162": {
                "variable": {
                    "value": "upconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv5",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv5_fc_lstm_256.py": {
        "tensorflow": {
            "conv2d_40": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_118": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_126": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_135": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_144": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_153": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm8'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_160": {
                "variable": {
                    "value": "upconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv5",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv5_fc_lstm_500_deep_64.py": {
        "tensorflow": {
            "conv2d_40": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_82": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_119": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_127": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_136": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_145": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_154": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm8'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_160": {
                "variable": {
                    "value": "upconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv5",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "models/model_zoo/model_conv5_fc_lstm_800_deep_64.py": {
        "tensorflow": {
            "conv2d_40": {
                "variable": {
                    "value": "conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "frame",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "frames[:, i, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm1'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm3'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_56": {
                "variable": {
                    "value": "conv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[5, 5]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm5'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_65": {
                "variable": {
                    "value": "conv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm7'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "variable": {
                    "value": "conv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "strides": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm9'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_82": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "FC_LAYER_SIZE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "800",
                            "Constant"
                        ]
                    ]
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_119": {
                "variable": {
                    "value": "fc_conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden0",
                    "type": "Variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "fc_conv",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_127": {
                "variable": {
                    "value": "upconv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm2')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden1, scope='layer_norm1')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden1.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv1",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm2'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_136": {
                "variable": {
                    "value": "upconv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm4')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden2, scope='layer_norm3')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden2.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv2",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm4'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_145": {
                "variable": {
                    "value": "upconv3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm6')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden3, scope='layer_norm5')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden3.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv3",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm6'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_154": {
                "variable": {
                    "value": "upconv4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden4",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm8')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden4, scope='layer_norm7')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "hidden4.get_shape()[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv4",
                    "type": "str",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "tf_layers.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                },
                "normalizer_params": {
                    "value": "{'scope': 'layer_norm8'}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "conv2d_transpose_160": {
                "variable": {
                    "value": "upconv5",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden5",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm10')",
                            "Call"
                        ],
                        [
                            "tf_layers.layer_norm(hidden5, scope='layer_norm9')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "scope": {
                    "value": "upconv5",
                    "type": "str",
                    "possible_values": []
                },
                "weights_initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf_layers.xavier_initializer(uniform=uniform_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            },
            "variable_scope_112": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "i > 0",
                            "Compare"
                        ],
                        [
                            "i > 0",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "settings.py": {
        "tensorflow": {
            "DEFINE_integer_60": {
                "name": {
                    "value": "num_images",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "NUM_IMAGES",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "specify the number of images in the tfrecords",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_61": {
                "name": {
                    "value": "num_depth",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "NUM_DEPTH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "specifies the number of depth channels in the images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_62": {
                "name": {
                    "value": "width",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "WIDTH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "specifies the width of an image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_63": {
                "name": {
                    "value": "height",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "HEIGHT",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "specifies the height of an image",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_67": {
                "name": {
                    "value": "tf_records_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "TF_RECORDS_DIR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/localhome/rothfuss/data/20bn-something/tf_records_train'",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "specify the path to where tfrecords are stored, defaults to \"../data/\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_68": {
                "name": {
                    "value": "output_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "OUT_DIR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/common/homes/students/rothfuss/Documents/selected_trainings/9_20bn_vae_no_OF/08-06-18_10-21'",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "directory for model checkpoints.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_69": {
                "name": {
                    "value": "dump_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "DUMP_DIR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/common/homes/students/rothfuss/Documents/selected_trainings/9_20bn_vae_no_OF/08-06-18_10-21'",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "directory for validation dumps such as gif and data_frames",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_72": {
                "name": {
                    "value": "train_files",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "train*.tfrecords",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Regex for filtering train tfrecords files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_73": {
                "name": {
                    "value": "valid_files",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "valid*.tfrecords",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Regex for filtering valid tfrecords files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_74": {
                "name": {
                    "value": "test_files",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "test*.tfrecords",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Regex for filtering test tfrecords files.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_75": {
                "name": {
                    "value": "num_threads",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "NUM_THREADS_QUEUERUNNER",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "specifies the number of threads for the queue runner",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_79": {
                "name": {
                    "value": "num_iterations",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "specify number of training iterations, defaults to 100000",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_80": {
                "name": {
                    "value": "loss_function",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "vae",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "specify loss function to minimize, defaults to gdl",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_81": {
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "specify the batch size, defaults to 50",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_82": {
                "name": {
                    "value": "valid_batch_size",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "specify the validation batch size, defaults to 50",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_83": {
                "name": {
                    "value": "uniform_init",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "specifies if the weights should be drawn from gaussian(false) or uniform(true) distribution",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_85": {
                "name": {
                    "value": "num_gpus",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "len(helpers.get_available_gpus())",
                    "type": "Call",
                    "possible_values": []
                },
                "help": {
                    "value": "specifies the number of available GPUs of the machine",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_87": {
                "name": {
                    "value": "image_range_start",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "parameter that controls the index of the starting image for the train/valid batch",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_89": {
                "name": {
                    "value": "overall_images_count",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "15",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "specifies the number of images that are available to create the train/valid batches",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_91": {
                "name": {
                    "value": "encoder_length",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "specifies how many images the encoder receives, defaults to 5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_92": {
                "name": {
                    "value": "decoder_future_length",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "specifies how many images the future prediction decoder receives, defaults to 5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_94": {
                "name": {
                    "value": "decoder_reconst_length",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "specifies how many images the reconstruction decoder receives, defaults to 5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_96": {
                "name": {
                    "value": "num_channels",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number of channels in the input frames",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_bool_97": {
                "name": {
                    "value": "fc_layer",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "help": {
                    "value": "indicates whether fully connected layer shall be added between encoder and decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_99": {
                "name": {
                    "value": "learning_rate_decay",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "8e-06",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "learning rate decay factor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_100": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "initial learning rate for Adam optimizer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_101": {
                "name": {
                    "value": "noise_std",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "defines standard deviation of gaussian noise to be added to the hidden representation during training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_float_103": {
                "name": {
                    "value": "keep_prob_dopout",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0.85",
                    "type": "float",
                    "possible_values": []
                },
                "help": {
                    "value": "keep probability for dropout during training, for valid automatically 1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_108": {
                "name": {
                    "value": "valid_interval",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number of training steps between each validation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_109": {
                "name": {
                    "value": "summary_interval",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number of training steps between summary is stored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_110": {
                "name": {
                    "value": "save_interval",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "number of training steps between session/model dumps",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_114": {
                "name": {
                    "value": "mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "MODE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'valid_mode'",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "Allowed modes:  + str(MODES) + . \"feeding_mode\": model is fed from numpy data directly instead of tfrecords\"valid_mode\": \"train_mode\": ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DEFINE_string_119": {
                "name": {
                    "value": "valid_mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "VALID_MODE",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'data_frame'",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "Allowed modes:  + str(VALID_MODES) + . \"vector\": encoder latent vector for each validation is exported to \"gif\": gifs are generated from the videos\"similarity\": compute (cos) similarity matrix\"data_frame\": the model output is retrieved as a df\"count_trainable_weights\": number of tr. weights is emitted to theconsole",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DEFINE_string_127": {
                "name": {
                    "value": "pretrained_model",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "PRETRAINED_MODEL",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'/common/homes/students/rothfuss/Documents/selected_trainings/9_20bn_vae_no_OF/08-06-18_10-21'",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "filepath of a pretrained model to initialize from.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_128": {
                "name": {
                    "value": "exclude_from_restoring",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "EXCLUDE_FROM_RESTORING",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "variable names to exclude from saving and restoring",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_130": {
                "name": {
                    "value": "fine_tuning_weights_list",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "FINE_TUNING_WEIGHTS_LIST",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "variable names (layer scopes) that should be trained during fine-tuning",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_134": {
                "name": {
                    "value": "feeding_input_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "INPUT_DIR",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "specify the path to where the input frames are stored",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_135": {
                "name": {
                    "value": "memory_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "MEMORY_PATH",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "''",
                            "Constant"
                        ]
                    ]
                },
                "help": {
                    "value": "specify the path to where the input frames are stored",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "utils/helpers.py": {
        "tensorflow": {}
    },
    "utils/io_handler.py": {
        "tensorflow": {
            "Glob_31": {
                "variable": {
                    "value": "file_paths",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(dir_str, file_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Glob_36": {
                "variable": {
                    "value": "file_paths",
                    "type": "Variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "os.path.join(dir_str, file_type)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Feature_48": {
                "bytes_list": {
                    "value": "tf.train.BytesList(value=[value])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BytesList_48": {
                "value": {
                    "value": "[value]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}