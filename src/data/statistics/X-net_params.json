{
    "Xnet/Main.py": {
        "sklearn": {
            "train_test_split_48": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "all_xray_df['path'].to_numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "all_xray_df['disease_vec'].to_numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2018",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_52": {
                "variable": {
                    "value": "(test_x, val_x, test_y, val_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "test_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "test_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2018",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ChestDataset(image_names=test_x, labels=test_y, transform=transforms.Compose([transforms.Scale(256), transforms.Grayscale(), transforms.ToTensor(), transforms.Normalize(mean=[0.485], std=[0.229])]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_66": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ChestDataset(train_x, train_y, transform=transforms.Compose([transforms.Scale(256), transforms.Grayscale(), transforms.ToTensor(), transforms.Normalize(mean=[0.485], std=[0.229])]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ChestDataset(val_x, val_y, transform=transforms.Compose([transforms.Scale(256), transforms.Grayscale(), transforms.ToTensor(), transforms.Normalize(mean=[0.485], std=[0.229])]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_76": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "BCELoss_78": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_79": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "best_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.state_dict()",
                            "Call"
                        ],
                        [
                            "model.state_dict()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./models/model + str(EPOCHS) + .pth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_104": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_162": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "outputs == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_130": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "model(inputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.round(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_168": {
                "input": {
                    "value": "outputs == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_134": {
                "input": {
                    "value": "outputs == labels",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "Xnet/Predictions.py": {
        "sklearn": {},
        "torch": {}
    },
    "Xnet/Xnet.py": {
        "sklearn": {},
        "torch": {}
    },
    "Xnet/ChestDataset.py": {
        "torch": {
            "tensor_28": {
                "data": {
                    "value": "np.vstack(label).astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}