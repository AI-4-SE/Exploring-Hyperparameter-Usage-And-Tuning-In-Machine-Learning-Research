{
    "utils/generic_utils.py": {
        "sklearn": {
            "minmax_scale_33": {
                "variable": {
                    "value": "emb_audio",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "emb_audio.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(min_amp, max_amp)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "minmax_scale_38": {
                "variable": {
                    "value": "clean_audio",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "clean_audio.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(min_amp_clean, max_amp_clean)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "minmax_scale_43": {
                "variable": {
                    "value": "interference",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "interference.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(min_amp_interference, max_amp_interference)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "minmax_scale_49": {
                "variable": {
                    "value": "noise_audio",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "noise_audio.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(min_noise, max_noise)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "minmax_scale_110": {
                "variable": {
                    "value": "noise_audio",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "noise_audio.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "feature_range": {
                    "value": "(min_noise, max_noise)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "save_247": {
                "obj": {
                    "value": "torch.from_numpy(clean_spec)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "clean_spec_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=1)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=2)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=3)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=4)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_248": {
                "obj": {
                    "value": "torch.from_numpy(mixed_spec)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "mixed_spec_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=1)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=2)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=3)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=4)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_263": {
                "obj": {
                    "value": "torch.from_numpy(clean_spec)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "clean_spec_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=1)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=2)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=3)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=4)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_264": {
                "obj": {
                    "value": "torch.from_numpy(mixed_spec)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "mixed_spec_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=1)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=2)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=3)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=4)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_279": {
                "obj": {
                    "value": "torch.from_numpy(clean_spec)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "clean_spec_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=1)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=2)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=3)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=4)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_280": {
                "obj": {
                    "value": "torch.from_numpy(mixed_spec)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "mixed_spec_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=1)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=2)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=3)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=4)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_295": {
                "obj": {
                    "value": "torch.from_numpy(clean_spec)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "clean_spec_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=1)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=2)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=3)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=4)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_296": {
                "obj": {
                    "value": "torch.from_numpy(mixed_spec)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "mixed_spec_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=1)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=2)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=3)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=4)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_344": {
                "obj": {
                    "value": "torch.from_numpy(clean_spec)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "clean_spec_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=1)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=2)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=3)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num, sub=4)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['target'], num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_345": {
                "obj": {
                    "value": "torch.from_numpy(mixed_spec)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "mixed_spec_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=1)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=2)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=3)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num, sub=4)",
                            "Call"
                        ],
                        [
                            "glob_re_to_filename(data_out_dir, form['mixed'], num)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_358": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_366": {
                "variable": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction + self.epsilon",
                            "BinOp"
                        ],
                        [
                            "torch.pow(prediction, self.power)",
                            "Call"
                        ],
                        [
                            "prediction",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "self.power",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_367": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.torch_inv_spectrogram(clean_spec, mixed_phase)",
                            "Call"
                        ],
                        [
                            "torch.reshape(target, [shape[0], 1] + shape[1:])",
                            "Call"
                        ],
                        [
                            "target + self.epsilon",
                            "BinOp"
                        ],
                        [
                            "torch.pow(target, self.power)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "self.power",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_449": {
                "variable": {
                    "value": "s_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source - mean_target",
                            "BinOp"
                        ],
                        [
                            "zero_mean_target * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_450": {
                "variable": {
                    "value": "s_estimate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zero_mean_estimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimate_source - mean_estimate",
                            "BinOp"
                        ],
                        [
                            "zero_mean_estimate * mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_452": {
                "variable": {
                    "value": "pair_wise_dot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s_estimate * s_target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_465": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "perms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source.new_tensor(list(permutations(range(C))), dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_468": {
                "variable": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bij,pij->bp",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "[pair_wise_si_snr, perms_one_hot]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_469": {
                "variable": {
                    "value": "max_snr_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_471": {
                "variable": {
                    "value": "(max_snr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "snr_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.einsum('bij,pij->bp', [pair_wise_si_snr, perms_one_hot])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_247": {
                "ndarray": {
                    "value": "clean_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "clean_spec.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "clean_spec.cuda()",
                            "Call"
                        ],
                        [
                            "clean_spec[0].cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "testloader",
                            "variable"
                        ],
                        [
                            "clean_spec.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_248": {
                "ndarray": {
                    "value": "mixed_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "mixed_spec.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "mixed_spec.cuda()",
                            "Call"
                        ],
                        [
                            "mixed_spec[0].cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "testloader",
                            "variable"
                        ],
                        [
                            "mixed_spec.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_263": {
                "ndarray": {
                    "value": "clean_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "clean_spec.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "clean_spec.cuda()",
                            "Call"
                        ],
                        [
                            "clean_spec[0].cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "testloader",
                            "variable"
                        ],
                        [
                            "clean_spec.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_264": {
                "ndarray": {
                    "value": "mixed_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "mixed_spec.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "mixed_spec.cuda()",
                            "Call"
                        ],
                        [
                            "mixed_spec[0].cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "testloader",
                            "variable"
                        ],
                        [
                            "mixed_spec.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_279": {
                "ndarray": {
                    "value": "clean_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "clean_spec.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "clean_spec.cuda()",
                            "Call"
                        ],
                        [
                            "clean_spec[0].cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "testloader",
                            "variable"
                        ],
                        [
                            "clean_spec.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_280": {
                "ndarray": {
                    "value": "mixed_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "mixed_spec.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "mixed_spec.cuda()",
                            "Call"
                        ],
                        [
                            "mixed_spec[0].cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "testloader",
                            "variable"
                        ],
                        [
                            "mixed_spec.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_295": {
                "ndarray": {
                    "value": "clean_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "clean_spec.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "clean_spec.cuda()",
                            "Call"
                        ],
                        [
                            "clean_spec[0].cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "testloader",
                            "variable"
                        ],
                        [
                            "clean_spec.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_296": {
                "ndarray": {
                    "value": "mixed_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "mixed_spec.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "mixed_spec.cuda()",
                            "Call"
                        ],
                        [
                            "mixed_spec[0].cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "testloader",
                            "variable"
                        ],
                        [
                            "mixed_spec.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_344": {
                "ndarray": {
                    "value": "clean_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(target_wav_path)",
                            "Call"
                        ],
                        [
                            "clean_spec.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "clean_spec.cuda()",
                            "Call"
                        ],
                        [
                            "clean_spec[0].cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "testloader",
                            "variable"
                        ],
                        [
                            "clean_spec.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_345": {
                "ndarray": {
                    "value": "mixed_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "ap.get_spec_from_audio_path(mixed_wav_path)",
                            "Call"
                        ],
                        [
                            "mixed_spec.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "mixed_spec.cuda()",
                            "Call"
                        ],
                        [
                            "mixed_spec[0].cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "testloader",
                            "variable"
                        ],
                        [
                            "mixed_spec.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_481": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_537": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_551": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.torch_inv_spectrogram(clean_spec, mixed_phase)",
                            "Call"
                        ],
                        [
                            "torch.reshape(target, [shape[0], 1] + shape[1:])",
                            "Call"
                        ],
                        [
                            "target + self.epsilon",
                            "BinOp"
                        ],
                        [
                            "torch.pow(target, self.power)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], 1] + shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_552": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.torch_inv_spectrogram(est_mag, mixed_phase)",
                            "Call"
                        ],
                        [
                            "torch.reshape(output, [shape[0], 1] + shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], 1] + shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_645": {
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "json.loads(input_str)",
                            "Call"
                        ],
                        [
                            "yaml.load(input_str, Loader=yaml.FullLoader)",
                            "Call"
                        ],
                        [
                            "read(full_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_369": {
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prediction + self.epsilon",
                            "BinOp"
                        ],
                        [
                            "torch.pow(prediction, self.power)",
                            "Call"
                        ],
                        [
                            "prediction",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_399": {
                "input": {
                    "value": "F.softplus(inp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_439": {
                "input": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source",
                            "Method Argument"
                        ],
                        [
                            "source",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_440": {
                "input": {
                    "value": "estimate_source",
                    "type": "variable",
                    "possible_values": [
                        [
                            "estimate_source * mask",
                            "BinOp"
                        ],
                        [
                            "estimate_source",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_453": {
                "input": {
                    "value": "s_target ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_458": {
                "input": {
                    "value": "e_noise ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log10_459": {
                "input": {
                    "value": "pair_wise_si_snr + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_473": {
                "input": {
                    "value": "max_snr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(snr_set, dim=1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "max_snr / C",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_399": {
                "input": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_508": {
                "ndarray": {
                    "value": "np.array([[est_wav]])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "convert.py": {
        "torch": {
            "load_25": {
                "f": {
                    "value": "os.path.join(data_path, file_name)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "generator_paper.py": {
        "torch": {
            "save_67": {
                "obj": {
                    "value": "torch.from_numpy(target_mag)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "target_mag_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "formatter(dir_, hp.form.target.mag, num)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_68": {
                "obj": {
                    "value": "torch.from_numpy(mixed_mag)",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "mixed_mag_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "formatter(dir_, hp.form.mixed.mag, num)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_67": {
                "ndarray": {
                    "value": "target_mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio.wav2spec(w1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_68": {
                "ndarray": {
                    "value": "mixed_mag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "audio.wav2spec(mixed)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/voicefilter/model.py": {
        "torch": {
            "Sequential_56": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LSTM_58": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "8 * self.audio['num_freq'] + self.config.model['emb_dim']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.config.model['lstm_dim']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.model['fc1_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.model['fc1_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.model['fc2_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, speaker_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, speaker_embedding), dim=2)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, speaker_embedding), dim=2)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_88": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, speaker_embedding), dim=2)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ZeroPad2d_19": {
                "padding": {
                    "value": "(3, 3, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_23": {
                "padding": {
                    "value": "(0, 0, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_28": {
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_33": {
                "padding": {
                    "value": "(2, 2, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_38": {
                "padding": {
                    "value": "(2, 2, 8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_43": {
                "padding": {
                    "value": "(2, 2, 16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(8, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPad2d_48": {
                "padding": {
                    "value": "(2, 2, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(16, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/voicesplit/model.py": {
        "torch": {
            "Sequential_54": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "LSTM_57": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "8 * self.audio['num_freq'] + self.config.model['emb_dim']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.config.model['lstm_dim']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.model['fc1_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.model['fc1_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.model['fc2_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, speaker_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, speaker_embedding), dim=2)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, speaker_embedding), dim=2)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_87": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), x.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, speaker_embedding), dim=2)",
                            "Call"
                        ],
                        [
                            "self.lstm(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc1(x)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "self.fc2(x)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ZeroPad2d_17": {
                "padding": {
                    "value": "(3, 3, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_21": {
                "padding": {
                    "value": "(0, 0, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(7, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_26": {
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_31": {
                "padding": {
                    "value": "(2, 2, 4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_36": {
                "padding": {
                    "value": "(2, 2, 8, 8)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_41": {
                "padding": {
                    "value": "(2, 2, 16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(8, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_46": {
                "padding": {
                    "value": "(2, 2, 32, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(16, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dilation": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "notebooks/GE2E-Seungwonpark-ExtractSpeakerEmbedding-adaptado-para-openvoicefilter.py": {
        "torch": {
            "load_92": {
                "variable": {
                    "value": "chkpt_embed",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'embedder.pt'",
                            "str"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.linear_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "lstm_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "int"
                        ],
                        [
                            "lstm_hidden",
                            "Method Argument"
                        ],
                        [
                            "lstm_hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_66": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "num_mels",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "lstm_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "lstm_layers",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "mel",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ap.get_mel(emb_wav)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "torch.from_numpy(file_embedding.reshape(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wave_file_path.replace(glob_re_wav_emb.replace('*', ''), '') + glob_re_emb.replace('*', '')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_152": {
                "ndarray": {
                    "value": "file_embedding.reshape(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_83": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(mels)",
                            "Call"
                        ],
                        [
                            "x[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self.proj(x)",
                            "Call"
                        ],
                        [
                            "x / torch.norm(x, p=2, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "x.sum(0) / x.size(0)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "preprocess_by_csv.py": {
        "torch": {}
    },
    "preprocess_by_csv_without_voice_overlay.py": {
        "torch": {}
    },
    "scripts/test_extract_audio.py": {
        "torch": {
            "save_37": {
                "obj": {
                    "value": "spectrogram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.get_spec_from_audio_path(filepath)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "new_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, filename + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/test_extract_audio_torch.py": {
        "torch": {
            "from_numpy_34": {
                "variable": {
                    "value": "spectrogram",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([spectrogram, spectrogram])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_35": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([phase, phase])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_40": {
                "obj": {
                    "value": "spectrogram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap.get_spec_from_audio(wav_in, return_phase=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array([spectrogram, spectrogram]))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "new_filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.output_dir, filename + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "Adam_34": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "c.train_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_88": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "test_all_checkpoints.py": {
        "torch": {
            "Adam_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "c.train_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "all_checkpoints[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "test_fast_all_checkpoints.py": {
        "torch": {
            "Adam_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "c.train_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "all_checkpoints[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_48": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Adam_34": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "c.train_config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_45": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_path",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_102": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainloader",
                            "variable"
                        ],
                        [
                            "target.cuda()",
                            "Call"
                        ],
                        [
                            "ap.torch_inv_spectrogram(target, spec_phase)",
                            "Call"
                        ],
                        [
                            "torch.reshape(target, [shape[0], 1] + shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], 1] + shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mixed * mask",
                            "BinOp"
                        ],
                        [
                            "ap.torch_inv_spectrogram(output, spec_phase)",
                            "Call"
                        ],
                        [
                            "torch.reshape(output, [shape[0], 1] + shape[1:])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], 1] + shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_127": {
                "obj": {
                    "value": "{'model': model.state_dict(), 'optimizer': optimizer.state_dict(), 'step': step, 'config_str': str(c)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(log_dir, 'checkpoint_%d.pt' % step)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/audio.py": {
        "torch": {
            "log_54": {
                "input": {
                    "value": "torch.clamp(x, min=clip_val) * C",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "mel_basis",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mel_basis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "librosa_mel_fn(sampling_rate, filter_length, n_mel_channels, mel_fmin, mel_fmax)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mel_basis).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_115": {
                "variable": {
                    "value": "mel_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mel_basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "magnitudes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stft_fn.transform(y)",
                            "Call"
                        ],
                        [
                            "self.stft_fn.transform(y)",
                            "Call"
                        ],
                        [
                            "magnitudes.data",
                            "Attribute"
                        ],
                        [
                            "self.spectral_de_normalize(y)",
                            "Call"
                        ],
                        [
                            "magnitudes",
                            "Method Argument"
                        ],
                        [
                            "magnitudes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_132": {
                "variable": {
                    "value": "mel_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mel_basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "magnitudes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stft_fn.transform(y)",
                            "Call"
                        ],
                        [
                            "self.stft_fn.transform(y)",
                            "Call"
                        ],
                        [
                            "magnitudes.data",
                            "Attribute"
                        ],
                        [
                            "self.spectral_de_normalize(y)",
                            "Call"
                        ],
                        [
                            "magnitudes",
                            "Method Argument"
                        ],
                        [
                            "magnitudes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_93": {
                "input": {
                    "value": "y.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_94": {
                "input": {
                    "value": "y.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_110": {
                "input": {
                    "value": "y.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_111": {
                "input": {
                    "value": "y.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_128": {
                "input": {
                    "value": "y.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_129": {
                "input": {
                    "value": "y.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/audio_processor.py": {
        "torch": {
            "squeeze_365": {
                "variable": {
                    "value": "melspec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "melspec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stft.mel_spectrogram(audio_norm)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(melspec, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_372": {
                "variable": {
                    "value": "magspec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "magspec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.stft.mag_spectrogram(audio_norm)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(magspec, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_505": {
                "variable": {
                    "value": "stft_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                },
                "exponent": {
                    "value": "S * 0.05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_507": {
                "variable": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[phase.cos(), phase.sin()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_502": {
                "input": {
                    "value": "spectrogram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spectrogram",
                            "Call"
                        ],
                        [
                            "spectrogram.T",
                            "Attribute"
                        ],
                        [
                            "self.get_mel(audio)",
                            "Call"
                        ],
                        [
                            "self.get_mag(audio)",
                            "Call"
                        ],
                        [
                            "self.get_mel(audio)",
                            "Call"
                        ],
                        [
                            "self.get_mag(audio)",
                            "Call"
                        ],
                        [
                            "spectrogram.T",
                            "Attribute"
                        ],
                        [
                            "spectrogram.T",
                            "Attribute"
                        ],
                        [
                            "spectrogram.T",
                            "Attribute"
                        ],
                        [
                            "spectrogram.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "spectrogram",
                            "Method Argument"
                        ],
                        [
                            "spectrogram",
                            "Method Argument"
                        ],
                        [
                            "spectrogram",
                            "Method Argument"
                        ],
                        [
                            "spectrogram",
                            "Method Argument"
                        ],
                        [
                            "spectrogram",
                            "Method Argument"
                        ],
                        [
                            "spectrogram",
                            "Method Argument"
                        ],
                        [
                            "spectrogram",
                            "Method Argument"
                        ],
                        [
                            "spectrogram",
                            "Method Argument"
                        ],
                        [
                            "spectrogram",
                            "Method Argument"
                        ],
                        [
                            "spectrogram",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "exp_509": {
                "input": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phase.T",
                            "Attribute"
                        ],
                        [
                            "phase.transpose(2, 1)",
                            "Call"
                        ],
                        [
                            "torch.stack([phase.cos(), phase.sin()], dim=-1).to(dtype=stft_matrix.dtype, device=stft_matrix.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "phase",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "hamming_window_509": {
                "window_length": {
                    "value": "self.win_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "periodic": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "alpha": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataset.py": {
        "torch": {
            "stack_104": {
                "variable": {
                    "value": "target_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(target_list, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(target_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "mixed_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mixed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(mixed_list, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(mixed_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_106": {
                "variable": {
                    "value": "seq_len_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_len_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(seq_len_list, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(seq_len_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_107": {
                "variable": {
                    "value": "target_wav_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_wav_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(target_wav_list, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(target_wav_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_108": {
                "variable": {
                    "value": "mixed_phase_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mixed_phase_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(mixed_phase_list, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(mixed_phase_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_139": {
                "variable": {
                    "value": "target_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(target_list, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(target_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "mixed_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mixed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(mixed_list, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(mixed_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "seq_len_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "seq_len_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(seq_len_list, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(seq_len_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_142": {
                "variable": {
                    "value": "target_wav_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target_wav_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(target_wav_list, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(target_wav_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_143": {
                "variable": {
                    "value": "mixed_phase_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mixed_phase_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(mixed_phase_list, dim=0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(mixed_phase_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_144": {
                "variable": {
                    "value": "mixed_wav_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mixed_wav_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(mixed_wav_list, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_61": {
                "dataset": {
                    "value": "Dataset(c, ap, train=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "c.train_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "c.train_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "train_collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_collate_fn",
                            "Call"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "DataLoader_71": {
                "dataset": {
                    "value": "Dataset(c, ap, train=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "test_collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_collate_fn",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "c.test_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "c.test_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "dataset": {
                    "value": "Dataset(c, ap, train=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "eval_collate_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "eval_collate_fn",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "c.test_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "c.test_config['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "embs_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(embs_list, dim=0)",
                            "Call"
                        ],
                        [
                            "embs_list",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(embs_list, dim=0)",
                            "Call"
                        ],
                        [
                            "embs_list",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "embs_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embs_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(embs_list, dim=0)",
                            "Call"
                        ],
                        [
                            "embs_list",
                            "variable"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "stack(embs_list, dim=0)",
                            "Call"
                        ],
                        [
                            "embs_list",
                            "variable"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([mixed_wav.shape[0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "mixed_phase",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(mixed_phase)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "variable": {
                    "value": "mixed_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mixed_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ap.get_spec_from_audio(mixed_wav, return_phase=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mixed_spec)",
                            "Call"
                        ],
                        [
                            "self.ap.get_spec_from_audio(mixed_wav, return_phase=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mixed_spec)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_40": {
                "variable": {
                    "value": "target_wav",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item",
                            "variable"
                        ],
                        [
                            "batch",
                            "variable"
                        ],
                        [
                            "self.ap.load_wav(self.target_wav_list[idx])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target_wav)",
                            "Call"
                        ],
                        [
                            "self.ap.load_wav(self.target_wav_list[idx])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target_wav)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_43": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.emb_list[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "target_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ap.get_spec_from_audio(target_wav, return_phase=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target_spec)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "mixed_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mixed_spec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ap.get_spec_from_audio(mixed_wav, return_phase=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mixed_spec)",
                            "Call"
                        ],
                        [
                            "self.ap.get_spec_from_audio(mixed_wav, return_phase=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mixed_spec)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "mixed_phase",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mixed_phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item",
                            "variable"
                        ],
                        [
                            "batch",
                            "variable"
                        ],
                        [
                            "self.ap.get_spec_from_audio(mixed_wav, return_phase=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(mixed_phase))",
                            "Call"
                        ],
                        [
                            "self.ap.get_spec_from_audio(mixed_wav, return_phase=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mixed_phase)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "target_wav",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target_wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "item",
                            "variable"
                        ],
                        [
                            "batch",
                            "variable"
                        ],
                        [
                            "self.ap.load_wav(self.target_wav_list[idx])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target_wav)",
                            "Call"
                        ],
                        [
                            "self.ap.load_wav(self.target_wav_list[idx])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(target_wav)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "variable": {
                    "value": "mixed_wav",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mixed_wav",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch",
                            "variable"
                        ],
                        [
                            "self.ap.load_wav(self.mixed_wav_list[idx])",
                            "Call"
                        ],
                        [
                            "self.ap.load_wav(self.mixed_wav_list[idx])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mixed_wav)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "seq_len",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([mixed_wav.shape[0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dataset_61": {
                "*args": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwds": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap",
                            "Method Argument"
                        ],
                        [
                            "ap",
                            "Method Argument"
                        ],
                        [
                            "ap",
                            "Method Argument"
                        ],
                        [
                            "ap",
                            "Method Argument"
                        ]
                    ]
                },
                "train": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dataset_71": {
                "*args": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwds": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap",
                            "Method Argument"
                        ],
                        [
                            "ap",
                            "Method Argument"
                        ],
                        [
                            "ap",
                            "Method Argument"
                        ],
                        [
                            "ap",
                            "Method Argument"
                        ]
                    ]
                },
                "train": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dataset_76": {
                "*args": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ],
                        [
                            "c",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwds": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ap",
                            "Method Argument"
                        ],
                        [
                            "ap",
                            "Method Argument"
                        ],
                        [
                            "ap",
                            "Method Argument"
                        ],
                        [
                            "ap",
                            "Method Argument"
                        ]
                    ]
                },
                "train": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_41": {
                "f": {
                    "value": "self.target_spec_list[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/stft.py": {
        "torch": {
            "pad_79": {
                "variable": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_data.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(int(self.filter_length / 2), int(self.filter_length / 2), 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_85": {
                "variable": {
                    "value": "forward_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_data.view(num_batches, 1, num_samples)",
                            "Call"
                        ],
                        [
                            "F.pad(input_data.unsqueeze(1), (int(self.filter_length / 2), int(self.filter_length / 2), 0, 0), mode='reflect')",
                            "Call"
                        ],
                        [
                            "input_data.squeeze(1)",
                            "Call"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "Variable(self.forward_basis, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.hop_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_95": {
                "variable": {
                    "value": "magnitude",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_part ** 2 + imag_part ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "recombine_magnitude_phase",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[magnitude * torch.cos(phase), magnitude * torch.sin(phase)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose1d_105": {
                "variable": {
                    "value": "inverse_transform",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recombine_magnitude_phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([magnitude * torch.cos(phase), magnitude * torch.sin(phase)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "Variable(self.inverse_basis, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.hop_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "fft_window",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fft_window",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_window(window, win_length, fftbins=True)",
                            "Call"
                        ],
                        [
                            "pad_center(fft_window, filter_length)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(fft_window).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_117": {
                "variable": {
                    "value": "approx_nonzero_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.where(window_sum > tiny(window_sum))[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_97": {
                "input": {
                    "value": "imag_part.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "real_part.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_120": {
                "ndarray": {
                    "value": "window_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "window_sumsquare(self.window, magnitude.size(-1), hop_length=self.hop_length, win_length=self.win_length, n_fft=self.filter_length, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.from_numpy(window_sum), requires_grad=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_103": {
                "input": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.atan2(imag_part.data, real_part.data))",
                            "Call"
                        ],
                        [
                            "phase",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sin_103": {
                "input": {
                    "value": "phase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.atan2(imag_part.data, real_part.data))",
                            "Call"
                        ],
                        [
                            "phase",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}