{
    "scripts/learning_curve.py": {
        "sklearn": {
            "StandardScaler_41": {
                "variable": {
                    "value": "y_trafo",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Adam_56": {
                "variable": {
                    "value": "params[optimizer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict(model='CNN', y_transform=y_trafo, feature_path=feature_path, label_path=label_path, filters=filters, n_runs=5, loss='mean_squared_error', lr=5e-05, amsgrad=False, n_epochs=40, batch_size=256)",
                            "Call"
                        ]
                    ]
                },
                "amsgrad": {
                    "value": "params['amsgrad']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "dict(model='CNN', y_transform=y_trafo, feature_path=feature_path, label_path=label_path, filters=filters, n_runs=5, loss='mean_squared_error', lr=5e-05, amsgrad=False, n_epochs=40, batch_size=256)",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MeanAbsoluteError_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "chem_eng_ml/architectures.py": {
        "tensorflow": {
            "Sequential_7": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_8": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'{}_Conv2D_0'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPooling2D_13": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_MaxPooling_0'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_15": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_Conv2D_1'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPooling2D_19": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_MaxPooling_1'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_21": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_Conv2D_2'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPooling2D_25": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_MaxPooling_2'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "rate": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_Dropout_0'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Flatten_28": {
                "name": {
                    "value": "'{}_Flatten_0'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_29": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_Dense_0'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_30": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_Dropout_1'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_31": {
                "units": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'{}_Dense_1'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "chem_eng_ml/utils/keras.py": {
        "tensorflow": {
            "sum_6": {
                "variable": {
                    "value": "SS_res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.square(y_true - y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_7": {
                "variable": {
                    "value": "SS_tot",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "K.square(y_true - K.mean(y_true))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_6": {
                "x": {
                    "value": "y_true - y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_7": {
                "x": {
                    "value": "y_true - K.mean(y_true)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_7": {
                "a": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "epsilon_8": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}