{
    "predictor.py": {
        "tensorflow": {
            "conv2d_13": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tcl.conv2d(x, num_outputs / 2, kernel_size=1, stride=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(x, num_outputs / 2, kernel_size=kernel_size, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(x, num_outputs, kernel_size=1, stride=1, activation_fn=None, padding='SAME', normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs / 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "conv2d_14": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tcl.conv2d(x, num_outputs / 2, kernel_size=1, stride=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(x, num_outputs / 2, kernel_size=kernel_size, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(x, num_outputs, kernel_size=1, stride=1, activation_fn=None, padding='SAME', normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs / 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                }
            },
            "conv2d_15": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tcl.conv2d(x, num_outputs / 2, kernel_size=1, stride=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(x, num_outputs / 2, kernel_size=kernel_size, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(x, num_outputs, kernel_size=1, stride=1, activation_fn=None, padding='SAME', normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "None",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "self.x",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.resolution_inp, self.resolution_inp, 3]",
                    "possible_values": []
                }
            },
            "Session_91": {
                "variable": {
                    "value": "self.sess",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(gpu_options=tf.GPUOptions(allow_growth=True))",
                    "possible_values": []
                }
            },
            "variable_scope_8": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "resBlock",
                    "possible_values": []
                }
            },
            "conv2d_11": {
                "variable": {
                    "value": "shortcut",
                    "possible_values": []
                },
                "input": {
                    "value": "shortcut",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tcl.conv2d(shortcut, num_outputs, kernel_size=1, stride=stride, activation_fn=None, normalizer_fn=None, scope='shortcut')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_outputs",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation_fn": {
                    "value": "None",
                    "possible_values": []
                },
                "normalizer_fn": {
                    "value": "None",
                    "possible_values": []
                },
                "scope": {
                    "value": "shortcut",
                    "possible_values": []
                }
            },
            "Saver_94": {
                "var_list": {
                    "value": "self.network.vars",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "self.name",
                    "possible_values": []
                }
            },
            "conv2d_40": {
                "variable": {
                    "value": "se",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "tcl.conv2d(x, num_outputs / 2, kernel_size=1, stride=1, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(x, num_outputs / 2, kernel_size=kernel_size, stride=stride, padding='SAME')",
                            "Call"
                        ],
                        [
                            "tcl.conv2d(x, num_outputs, kernel_size=1, stride=1, activation_fn=None, padding='SAME', normalizer_fn=None)",
                            "Call"
                        ],
                        [
                            "x + shortcut",
                            "BinOp"
                        ],
                        [
                            "normalizer_fn(x)",
                            "Call"
                        ],
                        [
                            "activation_fn(x)",
                            "Call"
                        ]
                    ]
                },
                "num_outputs": {
                    "value": "size",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_transpose_52": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "se",
                    "possible_values": [
                        [
                            "tcl.conv2d(x, num_outputs=size, kernel_size=4, stride=1)",
                            "Call"
                        ],
                        [
                            "resBlock(se, num_outputs=size * 2, kernel_size=4, stride=2)",
                            "Call"
                        ],
                        [
                            "resBlock(se, num_outputs=size * 2, kernel_size=4, stride=1)",
                            "Call"
                        ],
                        [
                            "resBlock(se, num_outputs=size * 4, kernel_size=4, stride=2)",
                            "Call"
                        ],
                        [
                            "resBlock(se, num_outputs=size * 4, kernel_size=4, stride=1)",
                            "Call"
                        ],
                        [
                            "resBlock(se, num_outputs=size * 8, kernel_size=4, stride=2)",
                            "Call"
                        ],
                        [
                            "resBlock(se, num_outputs=size * 8, kernel_size=4, stride=1)",
                            "Call"
                        ],
                        [
                            "resBlock(se, num_outputs=size * 16, kernel_size=4, stride=2)",
                            "Call"
                        ],
                        [
                            "resBlock(se, num_outputs=size * 16, kernel_size=4, stride=1)",
                            "Call"
                        ],
                        [
                            "resBlock(se, num_outputs=size * 32, kernel_size=4, stride=2)",
                            "Call"
                        ],
                        [
                            "resBlock(se, num_outputs=size * 32, kernel_size=4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size * 32",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_transpose_53": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size * 16",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "conv2d_transpose_54": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size * 16",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_transpose_55": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size * 16",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_transpose_56": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size * 8",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "conv2d_transpose_57": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size * 8",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_transpose_58": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size * 8",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_transpose_59": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size * 4",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "conv2d_transpose_60": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size * 4",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_transpose_61": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size * 4",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_transpose_63": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size * 2",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "conv2d_transpose_64": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size * 2",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_transpose_65": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "conv2d_transpose_66": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "size",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_transpose_68": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_transpose_69": {
                "variable": {
                    "value": "pd",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "conv2d_transpose_70": {
                "variable": {
                    "value": "pos",
                    "possible_values": []
                },
                "input": {
                    "value": "pd",
                    "possible_values": [
                        [
                            "tcl.conv2d_transpose(se, size * 32, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 16, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 8, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 4, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size * 2, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=2)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, size, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ],
                        [
                            "tcl.conv2d_transpose(pd, 3, 4, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "4",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "activation_fn": {
                    "value": "tf.nn.sigmoid",
                    "possible_values": []
                }
            },
            "global_variables_75": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ConfigProto_91": {
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "possible_values": []
                }
            },
            "GPUOptions_91": {
                "allow_growth": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    }
}