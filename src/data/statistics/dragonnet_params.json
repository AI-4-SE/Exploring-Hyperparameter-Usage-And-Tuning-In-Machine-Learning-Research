{
    "src/experiment/acic_main.py": {
        "sklearn": {
            "StandardScaler_36": {
                "variable": {
                    "value": "y_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StandardScaler_120": {
                "variable": {
                    "value": "y_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_58": {
                "variable": {
                    "value": "(train_index, test_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(x.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_135": {
                "variable": {
                    "value": "(train_index, test_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(x.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "set_random_seed_56": {
                "seed": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(runs)",
                            "Call"
                        ],
                        [
                            "range(runs)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_132": {
                "seed": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "range(runs)",
                            "Call"
                        ],
                        [
                            "range(runs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/experiment/data.py": {
        "sklearn": {
            "StandardScaler_25": {
                "variable": {
                    "value": "normal_scalar",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/experiment/ihdp_main.py": {
        "sklearn": {
            "StandardScaler_35": {
                "variable": {
                    "value": "y_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_59": {
                "variable": {
                    "value": "(train_index, test_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(x.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StandardScaler_120": {
                "variable": {
                    "value": "y_scaler",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "train_test_split_140": {
                "variable": {
                    "value": "(train_index, test_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(x.shape[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "set_random_seed_57": {
                "seed": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            },
            "set_random_seed_134": {
                "seed": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "src/semi_parametric_estimation/helpers.py": {
        "sklearn": {
            "LogisticRegression_17": {
                "variable": {
                    "value": "calibrator",
                    "type": "Variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "C": {
                    "value": "1000000.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/experiment/models.py": {
        "tensorflow": {
            "reduce_sum_14": {
                "variable": {
                    "value": "losst",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "K.binary_crossentropy(t_true, t_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_26": {
                "variable": {
                    "value": "loss0",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1.0 - t_true) * tf.square(y_true - y0_pred)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_27": {
                "variable": {
                    "value": "loss1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "t_true * tf.square(y_true - y1_pred)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_36": {
                "input_tensor": {
                    "value": "K.binary_crossentropy(t_true, t_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_56": {
                "x": {
                    "value": "tf.reduce_mean(epsilons)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_98": {
                "variable": {
                    "value": "targeted_regularization",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y_true - y_pert)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_56": {
                "input_tensor": {
                    "value": "epsilons",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "concat_pred[:, 3]",
                            "Subscript"
                        ],
                        [
                            "concat_pred[:, 3]",
                            "Subscript"
                        ],
                        [
                            "dl(t_predictions, name='epsilon')",
                            "Call"
                        ],
                        [
                            "dl(t_predictions, name='epsilon')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_26": {
                "x": {
                    "value": "y_true - y0_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_27": {
                "x": {
                    "value": "y_true - y1_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_98": {
                "x": {
                    "value": "y_true - y_pert",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Input(shape=(input_dim,), name='input')",
                            "Call"
                        ],
                        [
                            "Input(shape=(input_dim,), name='input')",
                            "Call"
                        ],
                        [
                            "Input(shape=(input_dim,), name='input')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}