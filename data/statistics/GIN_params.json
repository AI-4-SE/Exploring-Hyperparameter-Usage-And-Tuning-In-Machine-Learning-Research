{
    "data.py": {
        "torch": {
            "DataLoader_10": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "BasicDataset(data, target)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_47": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "emnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.EMNIST(root=root_dir, split='digits', train=train, download=False, transform=transform)",
                            "Call"
                        ],
                        [
                            "torchvision.datasets.EMNIST(root=root_dir, split='digits', train=train, download=True, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Sequential_182": {
                "variable": {
                    "value": "subnet",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(c_in, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_214": {
                "variable": {
                    "value": "subnet",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(c_in, width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_226": {
                "variable": {
                    "value": "subnet",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c_in, width, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_238": {
                "variable": {
                    "value": "subnet",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(c_in, width, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_298": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_clusters",
                            "Method Argument"
                        ]
                    ]
                },
                "size": {
                    "value": "(n_data_points,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent, torch.randn(n_data_points, 8) * 0.01]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_79": {
                "variable": {
                    "value": "sched",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(self.parameters(), self.lr)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "self.lr_schedule",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_136": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_classes, self.n_dims).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.log_sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.n_classes, self.n_dims).to(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_133": {
                "obj": {
                    "value": "{'model': state_dict}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fname",
                            "Method Argument"
                        ],
                        [
                            "fname",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_167": {
                "variable": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "latent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "latent_means[labels] + torch.randn(n_data_points, 2) * latent_stds[labels]",
                            "BinOp"
                        ],
                        [
                            "torch.cat([latent, torch.randn(n_data_points, 8) * 0.01], 1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(latent, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_168": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(target, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_170": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent[target == i].mean(0) for i in range(10)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_171": {
                "variable": {
                    "value": "self.sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent[target == i].std(0) for i in range(10)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "in_features": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_183": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_184": {
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_214": {
                "in_features": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "392",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_215": {
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "392",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "392",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_215": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "392",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_226": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "392",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_227": {
                "in_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "392",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "392",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_228": {
                "in_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "392",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_238": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ],
                        [
                            "c_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "392",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_239": {
                "in_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "392",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "392",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_240": {
                "in_channels": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "392",
                            "int"
                        ],
                        [
                            "16",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ],
                        [
                            "c_out",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_174": {
                "variable": {
                    "value": "self.mu.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent[target == i].mean(0) for i in range(10)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_175": {
                "variable": {
                    "value": "self.log_sig.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent[target == i].std(0) for i in range(10)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_175": {
                "variable": {
                    "value": "self.log_sig.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_295": {
                "*size": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_clusters",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_296": {
                "*size": {
                    "value": "n_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_clusters",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_299": {
                "*size": {
                    "value": "n_data_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_data_points",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z[target == i].std(0, unbiased=False) for i in range(self.n_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "randn_300": {
                "*size": {
                    "value": "n_data_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_data_points",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_like_92": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_transf(latent)[0].detach()",
                            "Call"
                        ],
                        [
                            "data + torch.randn_like(data) * 0.01",
                            "BinOp"
                        ],
                        [
                            "data.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.load(fname)",
                            "Call"
                        ],
                        [
                            "next(examples)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_163": {
                "input": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_transf(latent)[0].detach()",
                            "Call"
                        ],
                        [
                            "data + torch.randn_like(data) * 0.01",
                            "BinOp"
                        ],
                        [
                            "data.to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.load(fname)",
                            "Call"
                        ],
                        [
                            "next(examples)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "self.n_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_dims",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_104": {
                "input": {
                    "value": "0.5 * (z - m) ** 2 * torch.exp(-2 * ls) + ls",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_104": {
                "input": {
                    "value": "-2 * ls",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "plot.py": {
        "torch": {
            "stack_16": {
                "variable": {
                    "value": "sig",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z_reconstructed[target == i].std(0, unbiased=False) for i in range(model.n_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_18": {
                "variable": {
                    "value": "latent_sig",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent[target == i].std(0, unbiased=False) for i in range(model.n_classes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "style_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_rows",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_68": {
                "start": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_107": {
                "variable": {
                    "value": "style",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "784",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_108": {
                "variable": {
                    "value": "style[:, dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "-max_std",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "max_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "steps": {
                    "value": "n_cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "int"
                        ]
                    ]
                }
            },
            "randn_76": {
                "*size": {
                    "value": "n_rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_rows",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "n_dims_to_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(dims_to_sample)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}