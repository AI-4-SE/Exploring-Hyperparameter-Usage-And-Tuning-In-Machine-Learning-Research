{
    "code/main.py": {
        "torch": {
            "manual_seed_73": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_132": {
                "variable": {
                    "value": "lm_model_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.vanilla_lm_path, 'model_best')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_162": {
                "variable": {
                    "value": "state_dict_best",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_dir + 'model_best'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/models.py": {
        "torch": {
            "Embedding_18": {
                "variable": {
                    "value": "self.emb_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "i_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_23": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMCell_24": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_25": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.decoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "o_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_27": {
                "variable": {
                    "value": "self.sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_88": {
                "variable": {
                    "value": "self.emb_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "o_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_89": {
                "variable": {
                    "value": "self.phonetic_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "o_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTMCell_90": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_91": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.decoder_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "o_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sigmoid_93": {
                "variable": {
                    "value": "self.sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_207": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 4, kernel_size=2, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(4, 8, kernel_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sigmoid_220": {
                "variable": {
                    "value": "self.predictor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_269": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(ret)",
                            "Call"
                        ],
                        [
                            "ret.view(sz, sz)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.emb_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "o_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_38": {
                "variable": {
                    "value": "ch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "e1",
                            "Name"
                        ],
                        [
                            "self.start_idx",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "ch_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ch_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(ch)",
                            "Call"
                        ],
                        [
                            "ch_idx.cuda()",
                            "Call"
                        ],
                        [
                            "ch",
                            "Name"
                        ],
                        [
                            "torch.tensor(ch_idx)",
                            "Call"
                        ],
                        [
                            "ch_idx.cuda()",
                            "Call"
                        ],
                        [
                            "gt[i]",
                            "Subscript"
                        ],
                        [
                            "pred",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_144": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "word_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "word_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "word",
                            "Name"
                        ],
                        [
                            "torch.tensor(word_idx)",
                            "Call"
                        ],
                        [
                            "word_idx.cuda()",
                            "Call"
                        ],
                        [
                            "gt[i]",
                            "Subscript"
                        ],
                        [
                            "action_idx",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_217": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 2 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_232": {
                "variable": {
                    "value": "state_dict_best",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + 'model_best'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_67": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.softmax(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_138": {
                "ndarray": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.rand(sz, self.emsize)",
                            "Call"
                        ]
                    ]
                }
            },
            "Categorical_176": {
                "variable": {
                    "value": "torch_distribution",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "action_probs.view(batch_size, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_208": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_209": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_212": {
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_219": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * 3 * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_263": {
                "variable": {
                    "value": "t1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "measure_encodings_b_t * measure_encodings_b_t2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_264": {
                "variable": {
                    "value": "t2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(measure_encodings_b_t * measure_encodings_b_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_265": {
                "variable": {
                    "value": "t3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(measure_encodings_b_t2 * measure_encodings_b_t2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_297": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.linear_rep_H",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_333": {
                "input": {
                    "value": "prob_real + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_286": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder_layer(out)",
                            "Call"
                        ],
                        [
                            "self.decoder_layer(out)",
                            "Call"
                        ],
                        [
                            "out / temperature",
                            "BinOp"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_264": {
                "input": {
                    "value": "measure_encodings_b_t * measure_encodings_b_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_265": {
                "input": {
                    "value": "measure_encodings_b_t2 * measure_encodings_b_t2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/models_lm.py": {
        "torch": {
            "Embedding_78": {
                "variable": {
                    "value": "self._target_embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Embedding_80": {
                "variable": {
                    "value": "self._context_embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "phoneme_embeddings_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMCell_93": {
                "variable": {
                    "value": "self._lm_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self._decoder_input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self._decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self._intermediate_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._decoder_output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._target_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self._output_projection_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self._target_embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_102": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_386": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "hiddens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_399": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoded_output.view(1, decoded_output.size(1))",
                            "Call"
                        ],
                        [
                            "decoded_output.view(batch_size, seq_len, decoded_output.size(1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_400": {
                "variable": {
                    "value": "(_, predicted_classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTM_111": {
                "variable": {
                    "value": "self._encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self._encoder_input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self._encoder_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "encoder_n_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_178": {
                "variable": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._decoder_output_dim",
                            "Attribute"
                        ],
                        [
                            "output.size(2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_179": {
                "variable": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._decoder_output_dim",
                            "Attribute"
                        ],
                        [
                            "output.size(2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_184": {
                "variable": {
                    "value": "hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._decoder_output_dim",
                            "Attribute"
                        ],
                        [
                            "output.size(2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_185": {
                "variable": {
                    "value": "cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hidden_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._decoder_output_dim",
                            "Attribute"
                        ],
                        [
                            "output.size(2)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_262": {
                "variable": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoded_output.view(1, decoded_output.size(1))",
                            "Call"
                        ],
                        [
                            "decoded_output.view(batch_size, seq_len, decoded_output.size(1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_266": {
                "variable": {
                    "value": "predicted_action_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_probabilities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "variable": {
                    "value": "emb[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pretrained[word]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_261": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoded_output.view(1, decoded_output.size(1))",
                            "Call"
                        ],
                        [
                            "decoded_output.view(batch_size, seq_len, decoded_output.size(1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/solvers_merged.py": {
        "torch": {
            "zeros_478": {
                "variable": {
                    "value": "field_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[len(data), max_len]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_884": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lm_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0025",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_944": {
                "variable": {
                    "value": "best_lm_model_state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.vanilla_lm_path, 'model_' + str(best_epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_959": {
                "variable": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_999": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0025",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1001": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_1006": {
                "variable": {
                    "value": "optimizer_lm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.lm_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0025",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_1010": {
                "variable": {
                    "value": "optimizer_disc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.disc.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0025",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ],
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_1418": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1575": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_945": {
                "obj": {
                    "value": "best_lm_model_state_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(os.path.join(self.args.vanilla_lm_path, 'model_' + str(best_epoch)))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.args.vanilla_lm_path, 'model_best')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_972": {
                "variable": {
                    "value": "out_all_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_all_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "info['out_all']",
                            "Subscript"
                        ],
                        [
                            "torch.stack(out_all_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_975": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(x_i, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targets)",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_699": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dict['loss']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "np.sum(loss_this_batch)",
                            "Call"
                        ],
                        [
                            "-torch.sum(log_probs * all_rewards_numpy[q])",
                            "UnaryOp"
                        ],
                        [
                            "loss * self.args.reinforce_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_1272": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.model_dir + 'model_' + str(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_1273": {
                "obj": {
                    "value": "self.lm_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.model_dir + 'lmmodel_' + str(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_1274": {
                "obj": {
                    "value": "self.disc.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.model_dir + 'disc_' + str(epoch)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_1388": {
                "f": {
                    "value": "model_dir + 'model_' + model_epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_1394": {
                "f": {
                    "value": "model_dir + 'disc_' + model_epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_714": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dict['loss']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "np.sum(loss_this_batch)",
                            "Call"
                        ],
                        [
                            "-torch.sum(log_probs * all_rewards_numpy[q])",
                            "UnaryOp"
                        ],
                        [
                            "loss * self.args.reinforce_weight",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_721": {
                "variable": {
                    "value": "decoder_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_dict['decoder_hidden']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_722": {
                "variable": {
                    "value": "decoder_context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_dict['decoder_context']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_904": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_920": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1279": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.model_dir + 'model_best'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_1280": {
                "obj": {
                    "value": "self.lm_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.model_dir + 'lmmodel_best'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_1281": {
                "obj": {
                    "value": "self.disc.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.model_dir + 'disc_best'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_1318": {
                "variable": {
                    "value": "word_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ret",
                            "Name"
                        ],
                        [
                            "UNKNOWN",
                            "Name"
                        ],
                        [
                            "x[i][:-1]",
                            "Subscript"
                        ],
                        [
                            "x[i][:-1]",
                            "Subscript"
                        ],
                        [
                            "vocab",
                            "Name"
                        ],
                        [
                            "x_i[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_1393": {
                "f": {
                    "value": "model_dir + 'lmmodel_' + model_epoch",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_1603": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_837": {
                "variable": {
                    "value": "decoder_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_dict['decoder_hidden']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_838": {
                "variable": {
                    "value": "decoder_context",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_dict['decoder_context']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_938": {
                "obj": {
                    "value": "self.lm_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.vanilla_lm_path, 'model_' + str(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_1150": {
                "variable": {
                    "value": "word_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ret",
                            "Name"
                        ],
                        [
                            "UNKNOWN",
                            "Name"
                        ],
                        [
                            "x[i][:-1]",
                            "Subscript"
                        ],
                        [
                            "x[i][:-1]",
                            "Subscript"
                        ],
                        [
                            "vocab",
                            "Name"
                        ],
                        [
                            "x_i[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_1181": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "info['logprobs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_1200": {
                "input": {
                    "value": "log_probs * all_rewards_numpy[q]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_687": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_1549": {
                "variable": {
                    "value": "word_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ret",
                            "Name"
                        ],
                        [
                            "UNKNOWN",
                            "Name"
                        ],
                        [
                            "x[i][:-1]",
                            "Subscript"
                        ],
                        [
                            "x[i][:-1]",
                            "Subscript"
                        ],
                        [
                            "vocab",
                            "Name"
                        ],
                        [
                            "x_i[:-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_792": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "code/solvers_pretrain_disc_encoder.py": {
        "torch": {
            "CrossEntropyLoss_41": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "batch_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "batch_align_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "batch_kl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_277": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_359": {
                "variable": {
                    "value": "state_dict_best",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + 'model_best'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_237": {
                "variable": {
                    "value": "out_all_i",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out_all_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(out_all_i)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_241": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y_i, dtype=np.long)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(targets)",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_255": {
                "variable": {
                    "value": "cur_align_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(e_i - e_j) * (e_i - e_j)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_339": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + 'model_' + str(epoch % 5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_342": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_dir + 'model_best'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "code/utils.py": {
        "torch": {}
    },
    "code/utils_lm.py": {
        "torch": {
            "log_softmax_93": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_101": {
                "variable": {
                    "value": "one_hot_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_110": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(logits_flat, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "targets_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.view(-1, 1).long()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}