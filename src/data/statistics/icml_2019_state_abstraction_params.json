{
    "experiments/Lunar_dqn/build_graph.py": {
        "tensorflow": {
            "get_collection_115": {
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES if trainable_only else tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "IfExp",
                    "possible_values": []
                },
                "scope": {
                    "value": "scope if isinstance(scope, str) else scope.name",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "stochastic_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_179": {
                "variable": {
                    "value": "update_eps_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_eps",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_181": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_184": {
                "variable": {
                    "value": "deterministic_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='q_func')",
                            "Call"
                        ],
                        [
                            "q_func(observations_ph.get(), num_actions, scope='q_func')",
                            "Call"
                        ],
                        [
                            "U.function([obs_t_input], q_t)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_189": {
                "variable": {
                    "value": "stochastic_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "chose_random",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_actions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "deterministic_actions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(q_values, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(q_values_perturbed, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_191": {
                "variable": {
                    "value": "output_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "stochastic_ph",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : stochastic_actions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : deterministic_actions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_240": {
                "variable": {
                    "value": "stochastic_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "stochastic",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_241": {
                "variable": {
                    "value": "update_eps_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_eps",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_242": {
                "variable": {
                    "value": "update_param_noise_threshold_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_param_noise_threshold",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_243": {
                "variable": {
                    "value": "update_param_noise_scale_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "update_param_noise_scale",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_244": {
                "variable": {
                    "value": "reset_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "reset",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_246": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "eps",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_247": {
                "variable": {
                    "value": "param_noise_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_scale",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_248": {
                "variable": {
                    "value": "param_noise_threshold",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_noise_threshold",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.05)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_279": {
                "variable": {
                    "value": "kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax(q_values) * (tf.log(tf.nn.softmax(q_values)) - tf.log(tf.nn.softmax(q_values_adaptive)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_280": {
                "variable": {
                    "value": "mean_kl",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "kl",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.nn.softmax(q_values) * (tf.log(tf.nn.softmax(q_values)) - tf.log(tf.nn.softmax(q_values_adaptive))), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_294": {
                "variable": {
                    "value": "deterministic_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_values_perturbed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='perturbed_q_func')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "where_298": {
                "variable": {
                    "value": "stochastic_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "chose_random",
                    "type": "Compare",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=1, dtype=tf.float32) < eps",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "random_actions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(tf.stack([batch_size]), minval=0, maxval=num_actions, dtype=tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "deterministic_actions",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.argmax(q_values, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.argmax(q_values_perturbed, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cond_300": {
                "variable": {
                    "value": "output_actions",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "stochastic_ph",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.bool, (), name='stochastic')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : stochastic_actions",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : deterministic_actions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "placeholder_381": {
                "variable": {
                    "value": "act_t_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_382": {
                "variable": {
                    "value": "rew_t_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_384": {
                "variable": {
                    "value": "done_mask_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "done",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_385": {
                "variable": {
                    "value": "importance_weights_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "weight",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_389": {
                "variable": {
                    "value": "q_func_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name + '/q_func'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_collection_393": {
                "variable": {
                    "value": "target_q_func_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "tf.get_variable_scope().name + '/target_q_func'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_396": {
                "variable": {
                    "value": "q_t_selected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_t * tf.one_hot(act_t_ph, num_actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_413": {
                "variable": {
                    "value": "weighted_error",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "importance_weights_ph * errors",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_430": {
                "variable": {
                    "value": "update_target_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_target_expr",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "get_variable_scope_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'deepq'",
                            "MethodArgument"
                        ],
                        [
                            "'deepq'",
                            "MethodArgument"
                        ],
                        [
                            "'deepq'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'deepq'",
                            "MethodArgument"
                        ],
                        [
                            "'deepq'",
                            "MethodArgument"
                        ],
                        [
                            "'deepq'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_378": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'deepq'",
                            "MethodArgument"
                        ],
                        [
                            "'deepq'",
                            "MethodArgument"
                        ],
                        [
                            "'deepq'",
                            "MethodArgument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argmax_401": {
                "variable": {
                    "value": "q_tp1_best_using_online_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_tp1_using_online_net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_func(obs_tp1_input.get(), num_actions, scope='q_func', reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_402": {
                "variable": {
                    "value": "q_tp1_best",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_tp1 * tf.one_hot(q_tp1_best_using_online_net, num_actions)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_max_404": {
                "variable": {
                    "value": "q_tp1_best",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_tp1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_func(obs_tp1_input.get(), num_actions, scope='target_q_func')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_186": {
                "input": {
                    "value": "observations_ph.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_187": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_192": {
                "pred": {
                    "value": "update_eps_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_eps_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "group_272": {
                "*inputs": {
                    "value": "*perturb_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cond_283": {
                "variable": {
                    "value": "update_scale_expr",
                    "type": "Variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "mean_kl < param_noise_threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : param_noise_scale.assign(param_noise_scale * 1.01)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : param_noise_scale.assign(param_noise_scale / 1.01)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_290": {
                "pred": {
                    "value": "update_param_noise_threshold_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_param_noise_threshold_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : param_noise_threshold",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "shape_295": {
                "input": {
                    "value": "observations_ph.get()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_296": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cond_301": {
                "pred": {
                    "value": "update_eps_ph >= 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : update_eps_ph",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : eps",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_304": {
                "pred": {
                    "value": "reset_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='reset')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : perturb_vars(original_scope='q_func', perturbed_scope='perturbed_q_func')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.group(*[])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_305": {
                "pred": {
                    "value": "update_param_noise_scale_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, (), name='update_param_noise_scale')",
                            "Call"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "lambda : update_scale()",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.Variable(0.0, trainable=False)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stop_gradient_411": {
                "input": {
                    "value": "q_t_selected_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rew_t_ph + gamma * q_tp1_best_masked",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_initializer_181": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_188": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_246": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_247": {
                "value": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_248": {
                "value": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "assign_266": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "perturbed_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var + tf.random_normal(shape=tf.shape(var), mean=0.0, stddev=param_noise_scale)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_269": {
                "variable": {
                    "value": "op",
                    "type": "Variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "perturbed_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_279": {
                "logits": {
                    "value": "q_values_adaptive",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_func(observations_ph.get(), num_actions, scope='adaptive_q_func')",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_282": {
                "control_inputs": {
                    "value": "[perturb_for_adaption]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_297": {
                "values": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_396": {
                "indices": {
                    "value": "act_t_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None], name='action')",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_actions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_279": {
                "x": {
                    "value": "tf.nn.softmax(q_values_adaptive)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_304": {
                "*inputs": {
                    "value": "*[]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Variable_305": {
                "initial_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_402": {
                "indices": {
                    "value": "q_tp1_best_using_online_net",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(q_tp1_using_online_net, 1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_actions",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "get_variable_scope_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_393": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_norm_420": {
                "t": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "grad_norm_clipping",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_266": {
                "input": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Lunar_dqn/deepq.py": {
        "tensorflow": {
            "Session_34": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_207": {
                "learning_rate": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0005",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "latest_checkpoint_252": {
                "checkpoint_dir": {
                    "value": "td",
                    "type": "Name",
                    "possible_values": [
                        [
                            "checkpoint_path or td",
                            "BoolOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/Lunar_dqn/dqn-LunarLander-v2.py": {
        "tensorflow": {
            "placeholder_92": {
                "variable": {
                    "value": "state_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, state_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "next_state_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, state_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_94": {
                "variable": {
                    "value": "action_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "reward_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "is_not_terminal_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "is_training_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "episodes",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "episodes",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_126": {
                "variable": {
                    "value": "q_network_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "q_network",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_collection_127": {
                "variable": {
                    "value": "slow_target_network_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "slow_target_network",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_135": {
                "variable": {
                    "value": "update_slow_target_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_slow_target_ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "update_slow_target",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_nd_145": {
                "variable": {
                    "value": "estim_taken_action_vales",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "q_action_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "generate_network(state_ph, trainable=True, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.stack((tf.range(minibatch_size), action_ph), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_148": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(targets - estim_taken_action_vales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_154": {
                "variable": {
                    "value": "train_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr * lr_decay ** episodes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_157": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_158": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_105": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "h1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dense",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_106": {
                "variable": {
                    "value": "hidden_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(s, h1, activation=tf.nn.relu, trainable=trainable, name='dense', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "training": {
                    "value": "trainable & is_training_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_107": {
                "variable": {
                    "value": "hidden_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden_drop",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dropout(hidden, rate=dropout, training=trainable & is_training_ph)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_1",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_108": {
                "variable": {
                    "value": "hidden_drop_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(hidden_drop, h2, activation=tf.nn.relu, trainable=trainable, name='dense_1', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "training": {
                    "value": "trainable & is_training_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_109": {
                "variable": {
                    "value": "hidden_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "hidden_drop_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dropout(hidden_2, rate=dropout, training=trainable & is_training_ph)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_2",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "dropout_110": {
                "variable": {
                    "value": "hidden_drop_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dense(hidden_drop_2, h3, activation=tf.nn.relu, trainable=trainable, name='dense_2', reuse=reuse)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "training": {
                    "value": "trainable & is_training_ph",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_111": {
                "variable": {
                    "value": "action_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.dense(hidden_drop_3, n_actions, trainable=trainable, name='dense_3', reuse=reuse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_118": {
                "variable": {
                    "value": "q_action_values_next",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "generate_network(next_state_ph, trainable=False, reuse=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_123": {
                "variable": {
                    "value": "slow_target_action_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "generate_network(next_state_ph, trainable=False, reuse=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "q_network",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "slow_target_network",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_145": {
                "values": {
                    "value": "(tf.range(minibatch_size), action_ph)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_148": {
                "x": {
                    "value": "targets - estim_taken_action_vales",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_111": {
                "inputs": {
                    "value": "hidden_drop_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.layers.dropout(hidden_3, rate=dropout, training=trainable & is_training_ph)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_actions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "env.action_space.n",
                            "Attribute"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_3",
                    "type": "Constant",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "gather_nd_142": {
                "params": {
                    "value": "slow_target_action_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(generate_network(next_state_ph, trainable=False, reuse=False))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.stack((tf.range(minibatch_size), tf.cast(tf.argmax(q_action_values_next, axis=1), tf.int32)), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_142": {
                "values": {
                    "value": "(tf.range(minibatch_size), tf.cast(tf.argmax(q_action_values_next, axis=1), tf.int32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "l2_loss_151": {
                "t": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "q_network_vars",
                            "Name"
                        ]
                    ]
                }
            },
            "cast_142": {
                "x": {
                    "value": "tf.argmax(q_action_values_next, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_142": {
                "input": {
                    "value": "q_action_values_next",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(generate_network(next_state_ph, trainable=False, reuse=True))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Lunar_dqn/interact.py": {
        "tensorflow": {
            "import_meta_graph_10": {
                "variable": {
                    "value": "imported_meta",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "models/my_dqn_model-1000.meta",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_default_graph_11": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_13": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Lunar_dqn/lunar_demonstrator.py": {
        "tensorflow": {
            "Graph_8": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_9": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "import_meta_graph_11": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "Lunar_dqn/models/my_dqn_model-1000.meta",
                    "type": "Constant",
                    "possible_values": []
                },
                "clear_devices": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Lunar_dqn/models.py": {
        "tensorflow": {
            "flatten_46": {
                "variable": {
                    "value": "conv_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "input_",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_12": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input_",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "input_",
                            "Name"
                        ],
                        [
                            "layers.convolution2d(out, num_outputs=num_outputs, kernel_size=kernel_size, stride=stride, activation_fn=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_65": {
                "variable": {
                    "value": "action_scores_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.fully_connected(action_out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_113": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "latent",
                    "type": "Call",
                    "possible_values": [
                        [
                            "network(input_placeholder)",
                            "Call"
                        ],
                        [
                            "layers.flatten(latent)",
                            "Call"
                        ],
                        [
                            "latent[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "convnet",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "action_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "action_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "conv_out",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(action_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(action_out)",
                            "Call"
                        ],
                        [
                            "latent",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(action_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(action_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_133": {
                "variable": {
                    "value": "action_scores_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "action_scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "layers.fully_connected(action_out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=num_actions, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "state_value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "state_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "state_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "conv_out",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(state_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(state_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(state_out)",
                            "Call"
                        ],
                        [
                            "latent",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(state_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(state_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(state_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_66": {
                "input": {
                    "value": "action_scores_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_115": {
                "name_or_scope": {
                    "value": "action_value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "action_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "action_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "conv_out",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(action_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(action_out)",
                            "Call"
                        ],
                        [
                            "latent",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(action_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(action_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(action_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_125": {
                "name_or_scope": {
                    "value": "state_value",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_131": {
                "variable": {
                    "value": "state_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "state_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "conv_out",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(state_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(state_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(state_out)",
                            "Call"
                        ],
                        [
                            "latent",
                            "Name"
                        ],
                        [
                            "layers.fully_connected(state_out, num_outputs=hidden, activation_fn=None)",
                            "Call"
                        ],
                        [
                            "layers.layer_norm(state_out, center=True, scale=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(state_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_134": {
                "input": {
                    "value": "action_scores_mean",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(action_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/NNStateAbstrClass.py": {
        "tensorflow": {}
    },
    "experiments/abstraction_network.py": {
        "tensorflow": {
            "placeholder_12": {
                "variable": {
                    "value": "self.obs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.obs_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "obs",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_13": {
                "variable": {
                    "value": "self.Pr_a_given_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.num_abstract_states]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "prob_of_all_a_given_z",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_21": {
                "variable": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.obs",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(inputs=h, units=params['abstraction_network_hidden_nodes'], activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_abstract_states",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_25": {
                "variable": {
                    "value": "self.Pr_z_given_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_26": {
                "variable": {
                    "value": "self.Pr_z_given_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "t": {
                    "value": "self.Pr_z_given_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.9999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_36": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "abstraction_scope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dense_16": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.obs",
                            "Attribute"
                        ],
                        [
                            "tf.layers.dense(inputs=h, units=params['abstraction_network_hidden_nodes'], activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "params['abstraction_network_hidden_nodes']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_32": {
                "input_tensor": {
                    "value": "tf.multiply(self.Pr_a_given_z, tf.log(self.Pr_z_given_s))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_32": {
                "x": {
                    "value": "self.Pr_a_given_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.log(self.Pr_z_given_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_32": {
                "x": {
                    "value": "self.Pr_z_given_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/cartpole_visuals.py": {
        "tensorflow": {
            "Session_48": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/cartpole_visuals3D.py": {
        "tensorflow": {
            "Session_48": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/experiment_utils.py": {
        "tensorflow": {
            "Saver_261": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/run_learning_experiment_lunar.py": {
        "tensorflow": {
            "Session_48": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/run_learning_experiment_puddle.py": {
        "tensorflow": {}
    },
    "experiments/simple_rl/agents/func_approx/DQNAgentClass.py": {
        "tensorflow": {
            "Session_108": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_119": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "self.targetQ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "targetQ",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argmax_143": {
                "variable": {
                    "value": "self.predict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamOptimizer_147": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "flattened_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.num_channels * self.x_dim * self.y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_159": {
                "variable": {
                    "value": "actions_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_160": {
                "variable": {
                    "value": "Q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "actions_onehot * self.out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "trainable_variables_35": {
                "variable": {
                    "value": "vs",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dense_154": {
                "variable": {
                    "value": "curr_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "curr_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "flattened_input",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(curr_layer, units=layer_size, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "layer_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_156": {
                "inputs": {
                    "value": "curr_layer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "flattened_input",
                            "Name"
                        ],
                        [
                            "tf.layers.dense(curr_layer, units=layer_size, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.num_actions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_161": {
                "input_tensor": {
                    "value": "tf.square(self.targetQ - Q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "square_161": {
                "x": {
                    "value": "self.targetQ - Q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lunar_demonstrator.py": {
        "tensorflow": {
            "Graph_8": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_9": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "import_meta_graph_11": {
                "variable": {
                    "value": "saver",
                    "type": "Variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "Lunar_dqn/models/my_dqn_model-1000.meta",
                    "type": "Constant",
                    "possible_values": []
                },
                "clear_devices": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mac/actor_network.py": {
        "tensorflow": {
            "reduce_mean_11": {
                "input_tensor": {
                    "value": "tf.multiply(y_true, y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_11": {
                "x": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "mac/critic_network.py": {
        "tensorflow": {}
    },
    "mac/run.py": {
        "tensorflow": {
            "ConfigProto_74": {
                "variable": {
                    "value": "session_conf",
                    "type": "Variable",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Session_77": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph": {
                    "value": "tf.get_default_graph()",
                    "type": "Call",
                    "possible_values": []
                },
                "config": {
                    "value": "session_conf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_76": {
                "seed": {
                    "value": "meta_params['seed_number']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_default_graph_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}