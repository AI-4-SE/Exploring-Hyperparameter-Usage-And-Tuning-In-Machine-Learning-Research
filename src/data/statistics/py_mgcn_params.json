{
    "code/train.py": {
        "sklearn": {},
        "torch": {
            "BCEWithLogitsLoss_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_260": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lrs",
                            "variable"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_96": {
                "*size": {
                    "value": "final_real.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_98": {
                "*size": {
                    "value": "final_real.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_99": {
                "pos_weight": {
                    "value": "pw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pos_weights[i] * torch.ones(final_real.size()).cuda()",
                            "BinOp"
                        ],
                        [
                            "pos_weights[i] * torch.ones(final_real.size())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "code/utils.py": {
        "sklearn": {
            "train_test_split_103": {
                "variable": {
                    "value": "(idx_train_temp, idx_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "range(N)",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "test_size",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "random_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_107": {
                "variable": {
                    "value": "(idx_train, idx_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx_train_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "val_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "val_size",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "random_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "accuracy_score_203": {
                "y_true": {
                    "value": "labels.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.max(1)[1].type_as(labels)",
                            "Call"
                        ],
                        [
                            "output.max(1)[1].type_as(labels)",
                            "Call"
                        ],
                        [
                            "output.data.clone()",
                            "Call"
                        ],
                        [
                            "output.data.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_208": {
                "y_true": {
                    "value": "labels.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.max(1)[1].type_as(labels)",
                            "Call"
                        ],
                        [
                            "output.max(1)[1].type_as(labels)",
                            "Call"
                        ],
                        [
                            "output.data.clone()",
                            "Call"
                        ],
                        [
                            "output.data.clone()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'micro'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'micro'",
                            "Method Argument"
                        ],
                        [
                            "type",
                            "Method Argument"
                        ],
                        [
                            "type",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "accuracy_score_217": {
                "y_true": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real.data.clone()",
                            "Call"
                        ],
                        [
                            "real.data.clone()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.max(1)[1].type_as(labels)",
                            "Call"
                        ],
                        [
                            "output.max(1)[1].type_as(labels)",
                            "Call"
                        ],
                        [
                            "output.data.clone()",
                            "Call"
                        ],
                        [
                            "output.data.clone()",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_226": {
                "y_true": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real.data.clone()",
                            "Call"
                        ],
                        [
                            "real.data.clone()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.max(1)[1].type_as(labels)",
                            "Call"
                        ],
                        [
                            "output.max(1)[1].type_as(labels)",
                            "Call"
                        ],
                        [
                            "output.data.clone()",
                            "Call"
                        ],
                        [
                            "output.data.clone()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "type",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'micro'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "'micro'",
                            "Method Argument"
                        ],
                        [
                            "type",
                            "Method Argument"
                        ],
                        [
                            "type",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_249": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_251": {
                "variable": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sparse_mx.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "code/layers.py": {
        "torch": {
            "Parameter_17": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_53": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(L1_dim, L2_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_55": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(L2_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_68": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L1_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L1_features",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_69": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(L1_features, self.weight)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(L2_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_73": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "L1_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L1_features",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(L2_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_69": {
                "input": {
                    "value": "L2_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L2_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "t_73": {
                "input": {
                    "value": "L2_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "L2_features",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "code/models.py": {
        "torch": {
            "ModuleList_19": {
                "variable": {
                    "value": "self.gc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.in_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "temp_in_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_56": {
                "variable": {
                    "value": "self.bet_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "temp_bet_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.in_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "temp_in_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "relu_25": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gc[i](x, adj)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.gc[i](x, adj))",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_69": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_layer[i](xs[i], adjs[i])",
                            "Call"
                        ],
                        [
                            "self.in_layer[i](xs[i], adjs[i])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_110": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_layer[i](xs[i], adjs[i])",
                            "Call"
                        ],
                        [
                            "self.in_layer[i](xs[i], adjs[i])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.t(feature)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_29": {
                "input": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gc[-1](x, adj)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_69": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_layer[i](xs[i], adjs[i])",
                            "Call"
                        ],
                        [
                            "self.in_layer[i](xs[i], adjs[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "t_110": {
                "input": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.in_layer[i](xs[i], adjs[i])",
                            "Call"
                        ],
                        [
                            "self.in_layer[i](xs[i], adjs[i])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}