{
    "dataloader.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "dataLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True if is_test == False else False",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_29": {
                "data": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "torch": {
            "Sigmoid_12": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.tail",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules_tail",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.proj_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2 * mid_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "2 * mid_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.mid_size",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_26": {
                "in_features": {
                    "value": "mid_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.mid_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "mid_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "mid_size // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "mid_size // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "mid_size // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "projection_2d_1d.py": {
        "torch": {
            "matmul_61": {
                "variable": {
                    "value": "projs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.W_tensor[angle_index, :]",
                            "Subscript"
                        ],
                        [
                            "W_tmp.cuda()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "image.flatten()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_14": {
                "ndarray": {
                    "value": "values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat.data",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "run_2d.py": {
        "torch": {
            "tensor_54": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scipy.io.loadmat('../astra-toolbox/samples/python/phantom.mat')['phantom256']",
                            "Subscript"
                        ],
                        [
                            "downsample(image, args.dl_scale)",
                            "Call"
                        ],
                        [
                            "cv2.imread(os.path.join('./data/', args.image_file + '.png'), 0)",
                            "Call"
                        ],
                        [
                            "cv2.resize(image, (image_sz, image_sz)).astype('float')",
                            "Call"
                        ],
                        [
                            "image / projs_clean.max()",
                            "BinOp"
                        ],
                        [
                            "torch.tensor(image).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_89": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_abstract_2d.py": {
        "torch": {
            "Sigmoid_28": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((image_sz, image_sz))",
                            "Call"
                        ],
                        [
                            "torch.rand((image_sz, image_sz)) * 0.1",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_60": {
                "variable": {
                    "value": "self.logger_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(self.args.log_path, self.args.exp_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(image_sz, image_sz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Softmax_64": {
                "variable": {
                    "value": "self.Softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.args.angle_disc,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_70": {
                "variable": {
                    "value": "self.optim_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.x.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lrate_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.wdecay_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_71": {
                "variable": {
                    "value": "self.optim_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lrate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_80": {
                "variable": {
                    "value": "self.scheduler_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optim_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.args.iter_change_lr_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.args.gamma_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_82": {
                "variable": {
                    "value": "self.scheduler_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optim_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.args.iter_change_lr_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_85": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optim_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.args.iter_change_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_99": {
                "obj": {
                    "value": "self.net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.modelSavePath, self.args.expName)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "self.optim_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.x.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lrate_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.wdecay_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_74": {
                "variable": {
                    "value": "self.optim_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lrate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_87": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optim_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.args.iter_change_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_40": {
                "*size": {
                    "value": "syn_meas_clean.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_76": {
                "variable": {
                    "value": "self.optim_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.x.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lrate_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.wdecay_x",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_77": {
                "variable": {
                    "value": "self.optim_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lrate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.args.wdecay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "(image_sz, image_sz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "trainer_2d.py": {
        "torch": {
            "mean_62": {
                "variable": {
                    "value": "loss_real",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.net(real_meas)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_63": {
                "variable": {
                    "value": "loss_syn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.net(syn_meas)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_51": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(real_meas.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_56": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__69": {
                "parameters": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_102": {
                "variable": {
                    "value": "angle_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.args.angle_disc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__123": {
                "parameters": {
                    "value": "self.x.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_140": {
                "variable": {
                    "value": "total_v_pdf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pdf.detach().cpu() - self.args.pdf_vec",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "total_v_pdf",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_96": {
                "input": {
                    "value": "self.net(syn_meas_noisy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_111": {
                "input": {
                    "value": "angle_probs * out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_112": {
                "input": {
                    "value": "self.pdf ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_134": {
                "input": {
                    "value": "grad_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "self.p.grad",
                            "Attribute"
                        ],
                        [
                            "grad_p / torch.norm(grad_p)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "grad_56": {
                "outputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(int_meas)",
                            "Call"
                        ],
                        [
                            "self.net(syn_meas_noisy).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "int_meas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(tmp.data, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "int_meas.cuda()",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(out.shape).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_56": {
                "*size": {
                    "value": "out.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "sum_53": {
                "variable": {
                    "value": "reg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(x[:-1] - x[1:])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_meas,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_meas,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "shift_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_meas, len(pdf))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_102": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(pdf) + g",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_102": {
                "variable": {
                    "value": "shifts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_40": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_41": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_42": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_116": {
                "obj": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_117": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "sig_len",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(sig_len,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_53": {
                "input": {
                    "value": "x[:-1] - x[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "torch.abs(image[:-1, :] - image[1:, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_97": {
                "input": {
                    "value": "torch.rand(size=(num_meas, len(pdf)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_103": {
                "input": {
                    "value": "(torch.log(pdf) + g) / tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "torch.exp((torch.log(pdf) + g) / tau)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_103": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_63": {
                "input": {
                    "value": "image[:-1, :] - image[1:, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_97": {
                "size": {
                    "value": "(num_meas, len(pdf))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_103": {
                "input": {
                    "value": "pdf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sin_120": {
                "input": {
                    "value": "1 * np.pi * count * t / sig_len",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_102": {
                "input": {
                    "value": "pdf",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}