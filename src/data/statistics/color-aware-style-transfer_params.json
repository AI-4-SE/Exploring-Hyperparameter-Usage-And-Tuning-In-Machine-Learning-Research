{
    "cams_loss.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_40": {
                "variable": {
                    "value": "cnn_normalization_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_41": {
                "variable": {
                    "value": "cnn_normalization_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_53": {
                "variable": {
                    "value": "x_cord",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                }
            },
            "stack_56": {
                "variable": {
                    "value": "xy_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_grid, y_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "interpolate_456": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(masks, size=(c, d), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, self.color_palette.shape[0], self.insz, self.insz, device=DEVICE)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(c, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_458": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "a * b * a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_549": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "normalization",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_599": {
                "variable": {
                    "value": "final_palette",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_palette, target_palette]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_605": {
                "variable": {
                    "value": "final_palette",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_palette",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([input_palette, target_palette], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([final_palette, black_white], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unique(final_palette, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_425": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_426": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.insz, self.insz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_428": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.color_palette.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.insz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.insz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_464": {
                "variable": {
                    "value": "num_elements",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks[:, i, :, :].view(a, c * d)",
                            "Call"
                        ],
                        [
                            "(mask_values - torch.min(mask_values)) / (torch.max(mask_values) - torch.min(mask_values))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_467": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features * mask_values",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weighted_features.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_527": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_528": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_601": {
                "variable": {
                    "value": "black_white",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 0.0], [1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_603": {
                "variable": {
                    "value": "final_palette",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_palette, black_white]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_65": {
                "input": {
                    "value": "-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2 * variance)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "gaussian_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (2.0 * math.pi * variance) * torch.exp(-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2 * variance))",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel / torch.sum(gaussian_kernel)",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel.view(1, 1, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "gaussian_kernel.to(device=DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_440": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((I - color) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_441": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * (dist / self.sigma) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_491": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(k, a * b * a * b, device=DEVICE)",
                            "Call"
                        ],
                        [
                            "masked_gram_matrix(input, self.input_masks)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_516": {
                "data": {
                    "value": "colors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "color_bins[hist_positive, :]",
                            "Subscript"
                        ],
                        [
                            "np.clip(colors, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "palette_selection._palette_colors",
                            "Attribute"
                        ]
                    ]
                }
            },
            "conv2d_443": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(weight, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "gaussian_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (2.0 * math.pi * variance) * torch.exp(-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2 * variance))",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel / torch.sum(gaussian_kernel)",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel.view(1, 1, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "gaussian_kernel.to(device=DEVICE)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_475": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_562": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_440": {
                "input": {
                    "value": "(I - color) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_462": {
                "input": {
                    "value": "mask_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks[:, i, :, :].view(a, c * d)",
                            "Call"
                        ],
                        [
                            "(mask_values - torch.min(mask_values)) / (torch.max(mask_values) - torch.min(mask_values))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_463": {
                "input": {
                    "value": "mask_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks[:, i, :, :].view(a, c * d)",
                            "Call"
                        ],
                        [
                            "(mask_values - torch.min(mask_values)) / (torch.max(mask_values) - torch.min(mask_values))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_463": {
                "input": {
                    "value": "mask_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks[:, i, :, :].view(a, c * d)",
                            "Call"
                        ],
                        [
                            "(mask_values - torch.min(mask_values)) / (torch.max(mask_values) - torch.min(mask_values))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_66": {
                "input": {
                    "value": "(xy_grid - mean) ** 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_433": {
                "input": {
                    "value": "torch.sum(I, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_443": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-1 * (dist / self.sigma) ** 2)",
                            "Call"
                        ],
                        [
                            "nn.functional.conv2d(torch.unsqueeze(weight, dim=0), gaussian_kernel, bias=None, stride=1, padding=7)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_433": {
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(self.insz, self.insz), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "I[:, :3, :, :]",
                            "Subscript"
                        ],
                        [
                            "I / (torch.unsqueeze(torch.sum(I, dim=1), dim=1) + EPS)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_438": {
                "input": {
                    "value": "torch.sum(color, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_438": {
                "input": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.color_palette[c, :].view(1, 3, 1, 1)",
                            "Call"
                        ],
                        [
                            "color / (torch.unsqueeze(torch.sum(color, dim=1), dim=1) + EPS)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "color_aware_st.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_792": {
                "variable": {
                    "value": "style_img_color_palette_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 20, 50 * PALETTE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_794": {
                "variable": {
                    "value": "content_img_color_palette_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 20, 50 * PALETTE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_902": {
                "variable": {
                    "value": "cnn_normalization_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_903": {
                "variable": {
                    "value": "cnn_normalization_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_437": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(a * b, c * d)",
                            "Call"
                        ],
                        [
                            "input.view(a * b, c * d)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "features.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "interpolate_445": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(masks, size=(c, d), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "torch.zeros(1, self.color_palette.shape[0], self.insz, self.insz, device=DEVICE)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(c, d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_447": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "a * b * a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_605": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "normalization",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_661": {
                "variable": {
                    "value": "x_cord",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                }
            },
            "stack_664": {
                "variable": {
                    "value": "xy_grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_grid, y_grid]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_843": {
                "variable": {
                    "value": "style_img_color_palette_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 20, 50 * PALETTE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_845": {
                "variable": {
                    "value": "content_img_color_palette_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 20, 50 * PALETTE_SIZE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_867": {
                "variable": {
                    "value": "final_palette",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[style_palette, content_palette]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_873": {
                "variable": {
                    "value": "final_palette",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_palette",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([style_palette, content_palette], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat([final_palette, black_white], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.unique(final_palette, dim=0)",
                            "Call"
                        ],
                        [
                            "content_palette.clone()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_874": {
                "variable": {
                    "value": "final_color_palette_vis",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 50, 50 * final_palette.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_405": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_406": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(1, -1)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.insz, self.insz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_408": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.color_palette.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.insz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.insz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_454": {
                "variable": {
                    "value": "num_elements",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks[:, i, :, :].view(a, c * d)",
                            "Call"
                        ],
                        [
                            "(mask_values - torch.min(mask_values)) / (torch.max(mask_values) - torch.min(mask_values))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mm_457": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features * mask_values",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weighted_features.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_561": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) / 2.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_562": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LBFGS_573": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_img.requires_grad_()]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "tensor_869": {
                "variable": {
                    "value": "black_white",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.0, 0.0, 0.0], [1.0, 1.0, 1.0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_871": {
                "variable": {
                    "value": "final_palette",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[final_palette, black_white]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_420": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum((I - color) ** 2, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_421": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1 * (dist / self.sigma) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_471": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_504": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(features, features.t())",
                            "Call"
                        ],
                        [
                            "torch.zeros(k, a * b * a * b, device=DEVICE)",
                            "Call"
                        ],
                        [
                            "masked_gram_matrix(input, self.input_masks)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_534": {
                "data": {
                    "value": "colors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "color_bins[hist_positive, :]",
                            "Subscript"
                        ],
                        [
                            "np.clip(colors, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "palette_selection._palette_colors",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_575": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_img.requires_grad_()]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "exp_673": {
                "input": {
                    "value": "-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2 * variance)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_677": {
                "input": {
                    "value": "gaussian_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (2.0 * math.pi * variance) * torch.exp(-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2 * variance))",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel / torch.sum(gaussian_kernel)",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel.view(1, 1, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "gaussian_kernel.to(device=DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_423": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(weight, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "gaussian_kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 / (2.0 * math.pi * variance) * torch.exp(-torch.sum((xy_grid - mean) ** 2.0, dim=-1) / (2 * variance))",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel / torch.sum(gaussian_kernel)",
                            "BinOp"
                        ],
                        [
                            "gaussian_kernel.view(1, 1, kernel_size, kernel_size)",
                            "Call"
                        ],
                        [
                            "gaussian_kernel.to(device=DEVICE)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_484": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adagrad_577": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[input_img.requires_grad_()]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "LR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "float"
                        ]
                    ]
                }
            },
            "ReLU_618": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_420": {
                "input": {
                    "value": "(I - color) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_451": {
                "input": {
                    "value": "mask_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks[:, i, :, :].view(a, c * d)",
                            "Call"
                        ],
                        [
                            "(mask_values - torch.min(mask_values)) / (torch.max(mask_values) - torch.min(mask_values))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_452": {
                "input": {
                    "value": "mask_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks[:, i, :, :].view(a, c * d)",
                            "Call"
                        ],
                        [
                            "(mask_values - torch.min(mask_values)) / (torch.max(mask_values) - torch.min(mask_values))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_452": {
                "input": {
                    "value": "mask_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "masks[:, i, :, :].view(a, c * d)",
                            "Call"
                        ],
                        [
                            "(mask_values - torch.min(mask_values)) / (torch.max(mask_values) - torch.min(mask_values))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_413": {
                "input": {
                    "value": "torch.sum(I, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_423": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-1 * (dist / self.sigma) ** 2)",
                            "Call"
                        ],
                        [
                            "nn.functional.conv2d(torch.unsqueeze(weight, dim=0), gaussian_kernel, bias=None, stride=1, padding=7)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_674": {
                "input": {
                    "value": "(xy_grid - mean) ** 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_413": {
                "input": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(self.insz, self.insz), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "I[:, :3, :, :]",
                            "Subscript"
                        ],
                        [
                            "I / (torch.unsqueeze(torch.sum(I, dim=1), dim=1) + EPS)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_418": {
                "input": {
                    "value": "torch.sum(color, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_418": {
                "input": {
                    "value": "color",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.color_palette[c, :].view(1, 3, 1, 1)",
                            "Call"
                        ],
                        [
                            "color / (torch.unsqueeze(torch.sum(color, dim=1), dim=1) + EPS)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "content_loss.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "cnn_normalization_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "cnn_normalization_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "normalization",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_51": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "preprocessing(input)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_63": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "style_loss.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "variable": {
                    "value": "cnn_normalization_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.485, 0.456, 0.406]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "cnn_normalization_std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.229, 0.224, 0.225]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mm_45": {
                "variable": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(a * b, c * d)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "features.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "normalization",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_57": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "G",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(features, features.t())",
                            "Call"
                        ],
                        [
                            "gram_matrix(input)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "self.target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "x * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_123": {
                "variable": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}