{
    "CoTr_package/CoTr/training/network_training/network_trainer.py": {
        "sklearn": {
            "KFold_159": {
                "variable": {
                    "value": "kfold",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_314": {
                "variable": {
                    "value": "saved_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_287": {
                "obj": {
                    "value": "save_this",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch + 1, 'state_dict': state_dict, 'optimizer_state_dict': optimizer_state_dict, 'lr_scheduler_state_dict': lr_sched_state_dct, 'plot_stuff': (self.all_tr_losses, self.all_val_losses, self.all_val_losses_tr_mode, self.all_val_eval_metrics), 'best_stuff': (self.best_epoch_based_on_MA_tr_loss, self.best_MA_tr_loss_for_patience, self.best_val_eval_criterion_MA)}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GradScaler_397": {
                "variable": {
                    "value": "self.amp_grad_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_625": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_66": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_314": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_632": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CoTr_package/CoTr/training/network_training/nnUNetTrainerV2_ResTrans.py": {
        "sklearn": {},
        "torch": {
            "SGD_148": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__236": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__246": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/dataset_conversion/Task017_BeyondCranialVaultAbdominalOrganSegmentation.py": {
        "sklearn": {}
    },
    "nnUNet/nnunet/dataset_conversion/Task027_AutomaticCardiacDetectionChallenge.py": {
        "sklearn": {
            "KFold_98": {
                "variable": {
                    "value": "kf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/network_trainer.py": {
        "sklearn": {
            "KFold_159": {
                "variable": {
                    "value": "kfold",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_314": {
                "variable": {
                    "value": "saved_model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_287": {
                "obj": {
                    "value": "save_this",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{'epoch': self.epoch + 1, 'state_dict': state_dict, 'optimizer_state_dict': optimizer_state_dict, 'lr_scheduler_state_dict': lr_sched_state_dct, 'plot_stuff': (self.all_tr_losses, self.all_val_losses, self.all_val_losses_tr_mode, self.all_val_eval_metrics), 'best_stuff': (self.best_epoch_based_on_MA_tr_loss, self.best_MA_tr_loss_for_patience, self.best_val_eval_criterion_MA)}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "fname",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GradScaler_397": {
                "variable": {
                    "value": "self.amp_grad_scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_411": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_625": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_64": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_412": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_66": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_314": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_452": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_632": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNetTrainerV2.py": {
        "sklearn": {
            "KFold_294": {
                "variable": {
                    "value": "kfold",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SGD_165": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__252": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__262": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CoTr_package/CoTr/network_architecture/CNNBackbone.py": {
        "torch": {
            "sqrt_23": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.var(weight.view(weight.size(0), -1), dim=1) + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm3d_39": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv3d_25": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.norm1(x)",
                            "Call"
                        ],
                        [
                            "self.nonlin(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight - weight_mean",
                            "BinOp"
                        ],
                        [
                            "weight / std.expand_as(weight)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_33": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SyncBatchNorm_41": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3x3(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False, weight_std=weight_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_137": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "GroupNorm_43": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_45": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "var_23": {
                "input": {
                    "value": "weight.view(weight.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CoTr_package/CoTr/network_architecture/DeTrans/DeformableTrans.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self.level_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_feature_levels, d_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "valid_D",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~mask[:, :, 0, 0]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_49": {
                "variable": {
                    "value": "valid_H",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~mask[:, 0, :, 0]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_50": {
                "variable": {
                    "value": "valid_W",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "~mask[:, 0, 0, :]",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "valid_ratio",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[valid_ratio_d, valid_ratio_w, valid_ratio_h]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "src_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "src_flatten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(src_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "mask_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mask_flatten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(mask_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "lvl_pos_embed_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lvl_pos_embed_flatten",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(lvl_pos_embed_flatten, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_79": {
                "variable": {
                    "value": "spatial_shapes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "spatial_shapes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.as_tensor(spatial_shapes, dtype=torch.long, device=src_flatten.device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "src_flatten.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "level_start_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(spatial_shapes.new_zeros((1,)), spatial_shapes.prod(1).cumsum(0)[:-1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_81": {
                "variable": {
                    "value": "valid_ratios",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.get_valid_ratio(m) for m in masks]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_99": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_100": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_ffn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_105": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ffn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_107": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_108": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_153": {
                "variable": {
                    "value": "reference_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reference_points_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_167": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "meshgrid_143": {
                "variable": {
                    "value": "(ref_d, ref_y, ref_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.linspace(0.5, D_ - 0.5, D_, dtype=torch.float32, device=device)",
                    "type": "Call",
                    "possible_values": []
                },
                "indexing": {
                    "value": "torch.linspace(0.5, H_ - 0.5, H_, dtype=torch.float32, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_151": {
                "variable": {
                    "value": "ref",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ref_d, ref_x, ref_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linspace_143": {
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "D_ - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "D_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_144": {
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "H_ - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "H_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_145": {
                "start": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "W_ - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "W_",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "CoTr_package/CoTr/network_architecture/DeTrans/ops/functions/ms_deform_attn_func.py": {
        "torch": {
            "grid_sample_28": {
                "input": {
                    "value": "value_l_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "value_list[lid_].flatten(2).transpose(1, 2).reshape(N_ * M_, D_, T_, H_, W_)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "sampling_grid_l_.to(dtype=value_l_.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_31": {
                "tensors": {
                    "value": "sampling_value_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_31": {
                "input": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "CoTr_package/CoTr/network_architecture/DeTrans/ops/modules/ms_deform_attn.py": {
        "torch": {
            "Linear_42": {
                "variable": {
                    "value": "self.sampling_offsets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_heads * n_levels * n_points * 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_43": {
                "variable": {
                    "value": "self.attention_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_heads * n_levels * n_points",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.value_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_45": {
                "variable": {
                    "value": "self.output_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_52": {
                "variable": {
                    "value": "grid_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[thetas.cos(), thetas.sin() * thetas.cos(), thetas.sin() * thetas.sin()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.attention_weights(query).view(N, Len_q, self.n_heads, self.n_levels * self.n_points)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_weights, -1).view(N, Len_q, self.n_heads, self.n_levels, self.n_points)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.sampling_offsets.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "grid_init.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "offset_normalizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_spatial_shapes[..., 0], input_spatial_shapes[..., 2], input_spatial_shapes[..., 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_51": {
                "start": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CoTr_package/CoTr/network_architecture/DeTrans/position_encoding.py": {
        "torch": {
            "zeros_28": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_40": {
                "variable": {
                    "value": "dim_tx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_pos_feats[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_43": {
                "variable": {
                    "value": "dim_ty",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_pos_feats[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_46": {
                "variable": {
                    "value": "dim_td",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_pos_feats[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_53": {
                "variable": {
                    "value": "pos_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_x[:, :, :, :, 0::2].sin(), pos_x[:, :, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_53": {
                "variable": {
                    "value": "pos_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "pos_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_y[:, :, :, :, 0::2].sin(), pos_y[:, :, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_54": {
                "variable": {
                    "value": "pos_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "pos_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_d[:, :, :, :, 0::2].sin(), pos_d[:, :, :, :, 1::2].cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_55": {
                "variable": {
                    "value": "pos_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_d, pos_y, pos_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_57": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CoTr_package/CoTr/network_architecture/ResTranUnet.py": {
        "torch": {
            "sqrt_24": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.var(weight.view(weight.size(0), -1), dim=1) + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm3d_40": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Upsample_95": {
                "variable": {
                    "value": "self.upsamplex2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_97": {
                "variable": {
                    "value": "self.transposeconv_stage2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_98": {
                "variable": {
                    "value": "self.transposeconv_stage1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose3d_99": {
                "variable": {
                    "value": "self.transposeconv_stage0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3d_105": {
                "variable": {
                    "value": "self.ds2_cls_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.MODEL_NUM_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_106": {
                "variable": {
                    "value": "self.ds1_cls_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.MODEL_NUM_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_107": {
                "variable": {
                    "value": "self.ds0_cls_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.MODEL_NUM_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv3d_109": {
                "variable": {
                    "value": "self.cls_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.MODEL_NUM_CLASSES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv3d_26": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.norm(x)",
                            "Call"
                        ],
                        [
                            "self.nonlin(x)",
                            "Call"
                        ],
                        [
                            "self.transposeconv_stage2(x_trans[:, x_fea[0].shape[-3] * x_fea[0].shape[-2] * x_fea[0].shape[-1]:].transpose(-1, -2).view(x_convs[-1].shape))",
                            "Call"
                        ],
                        [
                            "x + skip2",
                            "BinOp"
                        ],
                        [
                            "self.stage2_de(x)",
                            "Call"
                        ],
                        [
                            "self.transposeconv_stage1(x)",
                            "Call"
                        ],
                        [
                            "x + skip1",
                            "BinOp"
                        ],
                        [
                            "self.stage1_de(x)",
                            "Call"
                        ],
                        [
                            "self.transposeconv_stage0(x)",
                            "Call"
                        ],
                        [
                            "x + skip0",
                            "BinOp"
                        ],
                        [
                            "self.stage0_de(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "weight - weight_mean",
                            "BinOp"
                        ],
                        [
                            "weight / std.expand_as(weight)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv3d_34": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ],
                        [
                            "(0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SyncBatchNorm_42": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_56": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GroupNorm_44": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_groups": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "InstanceNorm3d_46": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "*size": {
                    "value": "(fea.shape[0], fea.shape[2], fea.shape[3], fea.shape[4])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "var_24": {
                "input": {
                    "value": "weight.view(weight.size(0), -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CoTr_package/CoTr/network_architecture/neural_network.py": {
        "torch": {
            "zeros_509": {
                "variable": {
                    "value": "result_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_568": {
                "variable": {
                    "value": "result_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0], self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_333": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_357": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_361": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_364": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_644": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_667": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_671": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_674": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_354": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_664": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_529": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_533": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_537": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_541": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_545": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_549": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_553": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_588": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_592": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_596": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_528": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_532": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_536": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_540": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_544": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_548": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_552": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_587": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_591": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_595": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "CoTr_package/CoTr/training/model_restore.py": {
        "torch": {
            "load_110": {
                "f": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_110": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "CoTr_package/CoTr/training/network_training/nnUNetTrainer.py": {
        "torch": {
            "Adam_268": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_270": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_687": {
                "variable": {
                    "value": "tp_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_688": {
                "variable": {
                    "value": "fp_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_689": {
                "variable": {
                    "value": "fn_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_681": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_280": {
                "*size": {
                    "value": "(2, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_283": {
                "*size": {
                    "value": "(1, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/inference/predict.py": {
        "torch": {
            "empty_cache_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_456": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/inference/predict_simple.py": {
        "torch": {
            "empty_cache_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/network_architecture/custom_modules/conv_blocks.py": {
        "torch": {
            "Sequential_52": {
                "variable": {
                    "value": "self.all",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvDropoutNormReLU(input_channels, output_channels, kernel_size, network_props_first)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "block(input_channels, output_channels, kernel_size, network_props, first_stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "variable": {
                    "value": "self.downsample_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "props['conv_op'](in_planes, out_planes, 1, stride_here, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_194": {
                "variable": {
                    "value": "self.downsample_skip",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "props['conv_op'](in_planes, out_planes, 1, stride_here, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/network_architecture/custom_modules/feature_response_normalization.py": {
        "torch": {
            "rand_39": {
                "variable": {
                    "value": "tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(3, 32, 16, 16, 16)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Parameter_28": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, num_features, 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_35": {
                "input": {
                    "value": "self.weight * x + self.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rsqrt_33": {
                "input": {
                    "value": "mean_tensor(x * x, [2, 3, 4], keepdim=True) + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/network_architecture/custom_modules/helperModules.py": {
        "torch": {}
    },
    "nnUNet/nnunet/network_architecture/custom_modules/mish.py": {
        "torch": {
            "tanh_23": {
                "input": {
                    "value": "F.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_23": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/network_architecture/generic_UNet.py": {
        "torch": {
            "Sequential_131": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[basic_block(input_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs_first_conv, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs)] + [basic_block(output_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs) for _ in range(num_convs - 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_374": {
                "variable": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_375": {
                "variable": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_376": {
                "variable": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_377": {
                "variable": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_378": {
                "variable": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_163": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[d](x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[-1](x)",
                            "Call"
                        ],
                        [
                            "self.td[d](x)",
                            "Call"
                        ],
                        [
                            "self.tu[u](x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, skips[-(u + 1)]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_localization[u](x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_380": {
                "variable": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[-(u + 1)])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_312": {
                "*args": {
                    "value": "StackedConvLayers(input_features, output_features, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs, first_stride, basic_block=basic_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_348": {
                "*args": {
                    "value": "StackedConvLayers(n_features_after_tu_and_concat, nfeatures_from_skip, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs, basic_block=basic_block)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/network_architecture/generic_UNet_DP.py": {
        "torch": {
            "zeros_111": {
                "variable": {
                    "value": "tp_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "fp_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "fn_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/network_architecture/generic_modular_UNet.py": {
        "torch": {
            "SGD_408": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_413": {
                "variable": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 4, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_251": {
                "variable": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_252": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_253": {
                "variable": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_266": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[i + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "*args": {
                    "value": "seg_layer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_414": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/network_architecture/generic_modular_residual_UNet.py": {
        "torch": {
            "SGD_400": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_403": {
                "variable": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_modalities, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_476": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "unet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_479": {
                "variable": {
                    "value": "dummy_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_modalities, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_201": {
                "variable": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_202": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_203": {
                "variable": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.deep_supervision_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_216": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[i + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_417": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_195": {
                "*args": {
                    "value": "seg_layer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_404": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_480": {
                "*size": {
                    "value": "(batch_size, 1, *patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/network_architecture/initialization.py": {
        "torch": {}
    },
    "nnUNet/nnunet/network_architecture/neural_network.py": {
        "torch": {
            "zeros_507": {
                "variable": {
                    "value": "result_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_566": {
                "variable": {
                    "value": "result_torch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0], self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_332": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_356": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_360": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_363": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_642": {
                "variable": {
                    "value": "gaussian_importance_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gaussian_importance_map",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gaussian_filter(tmp, sigmas, 0, mode='constant', cval=0)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map / np.max(gaussian_importance_map) * 1",
                            "BinOp"
                        ],
                        [
                            "gaussian_importance_map.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_3d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self._get_gaussian(patch_size, sigma_scale=1.0 / 8)",
                            "Call"
                        ],
                        [
                            "self._gaussian_2d",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(gaussian_importance_map).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "gaussian_importance_map.half()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_665": {
                "variable": {
                    "value": "aggregated_results",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_669": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(data).cuda(self.get_device(), non_blocking=True)",
                            "Call"
                        ],
                        [
                            "np.concatenate((pad, x, pad), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_672": {
                "variable": {
                    "value": "aggregated_nb_of_predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.num_classes] + list(data.shape[1:])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.half",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_353": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_662": {
                "variable": {
                    "value": "add_for_nb_of_preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data.shape[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.get_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_235": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flip_527": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_531": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_535": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_539": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_543": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_547": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_551": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_586": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_590": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_594": {
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (4, 3, 2))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(x))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (2,))))",
                            "Call"
                        ],
                        [
                            "self.inference_apply_nonlin(self(torch.flip(x, (3, 2))))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_526": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_530": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_534": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_538": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_542": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_546": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_550": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(4, 3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_585": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_589": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flip_593": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "steps[0]",
                            "Subscript"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "to_cuda(maybe_to_torch(x), gpu_id=self.get_device())",
                            "Call"
                        ],
                        [
                            "steps[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dims": {
                    "value": "(3, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/data_augmentation/downsampling.py": {
        "torch": {
            "from_numpy_47": {
                "variable": {
                    "value": "one_hot",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "convert_seg_image_to_one_hot_encoding_batched(seg, classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "ndarray": {
                    "value": "seg",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/loss_functions/TopK_loss.py": {
        "torch": {
            "topk_32": {
                "variable": {
                    "value": "(res, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "res.view((-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "int(num_voxels * self.k / 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/loss_functions/crossentropy.py": {
        "torch": {}
    },
    "nnUNet/nnunet/training/loss_functions/deep_supervision.py": {
        "torch": {}
    },
    "nnUNet/nnunet/training/loss_functions/dice_loss.py": {
        "torch": {
            "stack_138": {
                "variable": {
                    "value": "tp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_139": {
                "variable": {
                    "value": "fp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "tn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple((x_i * mask[:, 0] for x_i in torch.unbind(tn, dim=1)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_377": {
                "variable": {
                    "value": "self.ce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "y_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_127": {
                "variable": {
                    "value": "y_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_269": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_278": {
                "variable": {
                    "value": "y_onehot",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net_output.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ],
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "log_350": {
                "input": {
                    "value": "-dc_loss",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unbind_138": {
                "input": {
                    "value": "tp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net_output * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tp, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tp / volumes",
                            "BinOp"
                        ],
                        [
                            "tp.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tp / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_139": {
                "input": {
                    "value": "fp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "net_output * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fp, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fp ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fp, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fp / volumes",
                            "BinOp"
                        ],
                        [
                            "fp.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fp / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_140": {
                "input": {
                    "value": "fn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * y_onehot",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(fn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "fn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(fn, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fn / volumes",
                            "BinOp"
                        ],
                        [
                            "fn.sum(axis, keepdim=False)",
                            "Call"
                        ],
                        [
                            "fn / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unbind_141": {
                "input": {
                    "value": "tn",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(1 - net_output) * (1 - y_onehot)",
                            "BinOp"
                        ],
                        [
                            "torch.stack(tuple((x_i * mask[:, 0] for x_i in torch.unbind(tn, dim=1))), dim=1)",
                            "Call"
                        ],
                        [
                            "tn ** 2",
                            "BinOp"
                        ],
                        [
                            "sum_tensor(tn, axes, keepdim=False)",
                            "Call"
                        ],
                        [
                            "tn / voxels",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/model_restore.py": {
        "torch": {
            "load_147": {
                "f": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_147": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/BraTS2020/nnUNetTrainerV2BraTSRegions.py": {
        "torch": {
            "Softmax_63": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_85": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_208": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_220": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_171": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_332": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_348": {
                "variable": {
                    "value": "output_softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__407": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_379": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_402": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/BraTS2020/nnUNetTrainerV2BraTSRegions_moreDA.py": {
        "torch": {
            "Sigmoid_54": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_181": {
                "variable": {
                    "value": "self.network.inference_apply_nonlin",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_137": {
                "variable": {
                    "value": "out_sigmoid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/competitions_with_custom_Trainers/MMS/nnUNetTrainerV2_MMS.py": {
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNetTrainer.py": {
        "torch": {
            "Adam_269": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_271": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_688": {
                "variable": {
                    "value": "tp_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_689": {
                "variable": {
                    "value": "fp_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_690": {
                "variable": {
                    "value": "fn_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_682": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_297": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_281": {
                "*size": {
                    "value": "(1, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_284": {
                "*size": {
                    "value": "(1, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNetTrainerV2_CascadeFullRes.py": {
        "torch": {}
    },
    "nnUNet/nnunet/training/network_training/nnUNetTrainerV2_DDP.py": {
        "torch": {
            "manual_seed_59": {
                "seed": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_287": {
                "variable": {
                    "value": "tp_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "fp_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_289": {
                "variable": {
                    "value": "fn_hard",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "manual_seed_all_61": {
                "seed": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_device_65": {
                "device": {
                    "value": "local_rank",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__226": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__236": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNetTrainerV2_DP.py": {
        "torch": {
            "SGD_154": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_165": {
                "variable": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.network",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "tuple(range(self.num_gpus))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_179": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__214": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_3ConvPerStage.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_3ConvPerStage_samefilters.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_BN.py": {
        "torch": {
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_FRN.py": {
        "torch": {
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_GN.py": {
        "torch": {
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_GeLU.py": {
        "torch": {
            "gelu_35": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_LReLU_slope_2en1.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_Mish.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_NoNormalization.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU_biasInSegOutput.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ReLU_convReLUIN.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_ResencUNet.py": {
        "torch": {
            "is_available_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_allConv3x3.py": {
        "torch": {
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_lReLU_biasInSegOutput.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_lReLU_convlReLUIN.py": {
        "torch": {
            "is_available_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_noDeepSupervision.py": {
        "torch": {
            "is_available_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/architectural_variants/nnUNetTrainerV2_softDeepSupervision.py": {
        "torch": {}
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_DA3.py": {
        "torch": {
            "is_available_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_insaneDA.py": {
        "torch": {}
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/data_augmentation/nnUNetTrainerV2_noDA.py": {
        "torch": {}
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/loss_function/nnUNetTrainerV2_focalLoss.py": {
        "torch": {
            "exp_51": {
                "variable": {
                    "value": "pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ],
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "exp_103": {
                "variable": {
                    "value": "pt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logpt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ],
                        [
                            "-F.binary_cross_entropy_with_logits(outputs, targets, reduction='none')",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_48": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ],
                        [
                            "targets[not_ignored]",
                            "Subscript"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_100": {
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.type(outputs.type())",
                            "Call"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ],
                        [
                            "targets[not_ignored]",
                            "Subscript"
                        ],
                        [
                            "targets.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/miscellaneous/nnUNetTrainerV2_fullEvals.py": {
        "torch": {
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/nnUNetTrainerNoDA.py": {
        "torch": {}
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_Adam.py": {
        "torch": {
            "Adam_23": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_Adam_ReduceOnPlateau.py": {
        "torch": {
            "Adam_34": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_36": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_SGD_ReduceOnPlateau.py": {
        "torch": {
            "SGD_29": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_31": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum09.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum095.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum098.py": {
        "torch": {
            "SGD_24": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_momentum09in2D.py": {
        "torch": {
            "SGD_27": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Constant"
                        ],
                        [
                            "0.9",
                            "Constant"
                        ]
                    ]
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/optimizer_and_lr/nnUNetTrainerV2_reduceMomentumDuringTraining.py": {
        "torch": {
            "SGD_37": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/profiling/nnUNetTrainerV2_2epochs.py": {
        "torch": {
            "rand_255": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "round_257": {
                "input": {
                    "value": "torch.rand((self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__125": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__135": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "autocast_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__199": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__209": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "autocast_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__275": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__285": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_257": {
                "*size": {
                    "value": "(self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/network_training/nnUNet_variants/profiling/nnUNetTrainerV2_dummyLoad.py": {
        "torch": {
            "rand_31": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_98": {
                "variable": {
                    "value": "self.some_batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.num_input_channels, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "round_100": {
                "variable": {
                    "value": "self.some_gt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.rand((self.batch_size, *self.patch_size)) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__123": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "round_33": {
                "input": {
                    "value": "torch.rand((self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])) * (self.num_classes - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "autocast_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__50": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__60": {
                "parameters": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_100": {
                "*size": {
                    "value": "(self.batch_size, *self.patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_33": {
                "*size": {
                    "value": "(self.batch_size, 1, *[int(i * j) for (i, j) in zip(self.patch_size, k)])",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/training/optimizer/ranger.py": {
        "torch": {
            "zeros_like_95": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_96": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_like_99": {
                "variable": {
                    "value": "state[slow_buffer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/utilities/distributed.py": {
        "torch": {
            "rand_64": {
                "variable": {
                    "value": "rnd",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(5, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_73": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "c.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_78": {
                "variable": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(bs, 2, 5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "set_device_61": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "allgather_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.empty_like(input) for _ in range(world_size)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_32": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/utilities/nd_softmax.py": {
        "torch": {
            "softmax_20": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/utilities/tensor_utilities.py": {
        "torch": {
            "arange_50": {
                "variable": {
                    "value": "indices[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(dim) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nnUNet/nnunet/utilities/to_torch.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[maybe_to_torch(i) if not isinstance(i, torch.Tensor) else i for i in d]",
                            "ListComp"
                        ],
                        [
                            "torch.from_numpy(d).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}