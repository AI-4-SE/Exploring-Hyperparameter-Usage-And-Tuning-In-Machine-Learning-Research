{
    "arrau_scorer/arrau/evaluator.py": {
        "sklearn": {}
    },
    "arrau_scorer/eval/evaluator.py": {
        "sklearn": {}
    },
    "metrics.py": {
        "sklearn": {}
    },
    "util.py": {
        "sklearn": {},
        "tensorflow": {
            "get_variable_123": {
                "variable": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape(current_inputs, 1), output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "output_weights_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_124": {
                "variable": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "output_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "xw_plus_b_125": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [batch_size * seqlen, emb_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "current_outputs",
                            "variable"
                        ]
                    ]
                },
                "weights": {
                    "value": "output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_weights', [shape(current_inputs, 1), output_size], initializer=output_weights_initializer)",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "output_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('output_bias', [output_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "flattened_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * seqlen, emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_154": {
                "variable": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(batch_size) * seqlen",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_155": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flattened_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(emb, [batch_size * seqlen, emb_size])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices + offset",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Summary_61": {
                "value": {
                    "value": "[tf.Summary.Value(tag=k, simple_value=v) for (k, v) in value_dict.items()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "current_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * j + (1 - f) * inputs",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * seqlen, emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_115": {
                "variable": {
                    "value": "hidden_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_weights_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape(current_inputs, 1), hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_116": {
                "variable": {
                    "value": "hidden_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'hidden_bias_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "current_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.xw_plus_b(current_inputs, hidden_weights, hidden_bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(current_inputs, output_weights, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [batch_size, seqlen, output_size])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seqlen, output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv1d_140": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f * j + (1 - f) * inputs",
                            "BinOp"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [filter_size, input_size, num_filters])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_141": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.bias_add(conv, b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_142": {
                "variable": {
                    "value": "pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.bias_add(conv, b))",
                            "Call"
                        ],
                        [
                            "h * self._dropout_mask",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_144": {
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.xw_plus_b(current_inputs, output_weights, output_bias)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, [batch_size, seqlen, output_size])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_157": {
                "variable": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gathered",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(flattened_emb, indices + offset)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(gathered, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_233": {
                "variable": {
                    "value": "self._dropout_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones([batch_size, self.output_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_235": {
                "variable": {
                    "value": "initial_cell_state",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lstm_initial_cell_state",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_236": {
                "variable": {
                    "value": "initial_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "lstm_initial_hidden_state",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_237": {
                "variable": {
                    "value": "self._initial_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "c": {
                    "value": "initial_cell_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('lstm_initial_cell_state', [1, self.output_size])",
                            "Call"
                        ]
                    ]
                },
                "h": {
                    "value": "initial_hidden_state",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_91": {
                "variable": {
                    "value": "(j, f)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "projection(inputs, 2 * shape(inputs, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_92": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(f)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_93": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(clusters))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(j)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(j, dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_120": {
                "variable": {
                    "value": "current_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "current_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.xw_plus_b(current_inputs, hidden_weights, hidden_bias))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(current_outputs, dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_138": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[filter_size, input_size, num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_139": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_filters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_241": {
                "c": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "h": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_257": {
                "variable": {
                    "value": "(i, j, o)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "projection(tf.concat([inputs, h], 1), 3 * self.output_size, initializer=self._initializer)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_258": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(gold_clusters))",
                            "Call"
                        ],
                        [
                            "range(num_layers)",
                            "Call"
                        ],
                        [
                            "range(num_hidden_layers)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMStateTuple_261": {
                "variable": {
                    "value": "new_state",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - i) * c + i * tf.tanh(j)",
                            "BinOp"
                        ]
                    ]
                },
                "h": {
                    "value": "new_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(new_c) * tf.sigmoid(o)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "'highway_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_95": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(clusters))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(j)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(j, dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_100": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "xw_plus_b_117": {
                "x": {
                    "value": "current_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [batch_size * seqlen, emb_size])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "current_outputs",
                            "variable"
                        ]
                    ]
                },
                "weights": {
                    "value": "hidden_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden_weights_{}'.format(i), [shape(current_inputs, 1), hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "biases": {
                    "value": "hidden_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('hidden_bias_{}'.format(i), [hidden_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_137": {
                "name_or_scope": {
                    "value": "'conv_{}'.format(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_141": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(inputs, w, stride=1, padding='VALID')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('b', [num_filters])",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_233": {
                "shape": {
                    "value": "[batch_size, self.output_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_253": {
                "name_or_scope": {
                    "value": "scope or type(self).__name__",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "concat_256": {
                "values": {
                    "value": "[inputs, h]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_260": {
                "x": {
                    "value": "new_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - i) * c + i * tf.tanh(j)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_260": {
                "x": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tanh_259": {
                "x": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(len(clusters))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(j)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(j, dropout)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "coref_model.py": {
        "tensorflow": {
            "PaddingFIFOQueue_63": {
                "variable": {
                    "value": "queue",
                    "type": "variable",
                    "possible_values": []
                },
                "capacity": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "dtypes",
                    "type": "variable",
                    "possible_values": []
                },
                "shapes": {
                    "value": "shapes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_69": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_70": {
                "variable": {
                    "value": "self.reset_global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exponential_decay_71": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.config['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.config['decay_frequency']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self.config['decay_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "trainable_variables_73": {
                "variable": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_74": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_75": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss, trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.config['max_gradient_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gradients_77": {
                "variable": {
                    "value": "split_antecedent_gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.split_antecedent_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_78": {
                "variable": {
                    "value": "(split_antecedent_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "split_antecedent_gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.split_antecedent_loss, trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "self.config['max_gradient_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Saver_118": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "vars_to_restore",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in tf.global_variables() if 'module/' not in v.name]",
                            "ListComp"
                        ],
                        [
                            "[v for v in tf.global_variables() if 'module/' not in v.name and 'plural_scoring/' not in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gather_253": {
                "variable": {
                    "value": "span_start_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_contextualize(context_emb, text_len, text_len_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "span_starts",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_256": {
                "variable": {
                    "value": "span_end_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "context_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_contextualize(context_emb, text_len, text_len_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "span_ends",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_280": {
                "variable": {
                    "value": "span_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "span_emb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_288": {
                "variable": {
                    "value": "marginalized_gold_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cluster_scores + tf.log(tf.to_float(gold_labels))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_289": {
                "variable": {
                    "value": "log_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cluster_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.ffnn(pair_emb, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(cluster_scores, 2)",
                            "Call"
                        ],
                        [
                            "cluster_scores + top_fast_cluster_scores",
                            "BinOp"
                        ],
                        [
                            "tf.concat([mention_type_scores, cluster_scores], axis=1)",
                            "Call"
                        ],
                        [
                            "util.ffnn(pair_emb, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(cluster_scores, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([m_type_score, cluster_scores], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_300": {
                "variable": {
                    "value": "use_identity",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distances <= 4",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "equal_306": {
                "variable": {
                    "value": "same_start",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(labeled_starts, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(candidate_starts, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_308": {
                "variable": {
                    "value": "same_end",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(labeled_ends, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(candidate_ends, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_310": {
                "variable": {
                    "value": "same_span",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "same_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(labeled_starts, 1), tf.expand_dims(candidate_starts, 0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "same_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(labeled_ends, 1), tf.expand_dims(candidate_ends, 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_311": {
                "variable": {
                    "value": "candidate_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(labels, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.to_int32(same_span)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_312": {
                "variable": {
                    "value": "candidate_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "candidate_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(labels, 0), tf.to_int32(same_span))",
                            "Call"
                        ],
                        [
                            "tf.squeeze(candidate_labels, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_388": {
                "variable": {
                    "value": "flattened_lm_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lm_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([num_sentences, max((s.shape[0] for s in sentences)), self.lm_size, self.lm_layers])",
                            "Call"
                        ],
                        [
                            "self.load_lm_embeddings(doc_key)",
                            "Call"
                        ],
                        [
                            "lm_emb[sentence_offset:sentence_offset + max_training_sentences, :, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences * max_sentence_length * lm_emb_size, lm_num_layers]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_389": {
                "variable": {
                    "value": "flattened_aggregated_lm_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "flattened_lm_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(lm_emb, [num_sentences * max_sentence_length * lm_emb_size, lm_num_layers])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.expand_dims(self.lm_weights, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_390": {
                "variable": {
                    "value": "aggregated_lm_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flattened_aggregated_lm_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(flattened_lm_emb, tf.expand_dims(self.lm_weights, 1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences, max_sentence_length, lm_emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_394": {
                "variable": {
                    "value": "context_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "context_emb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[context_word_emb]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_395": {
                "variable": {
                    "value": "head_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "head_emb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[head_word_emb]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_396": {
                "variable": {
                    "value": "context_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "context_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(context_emb_list, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(context_emb, self.lexical_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_397": {
                "variable": {
                    "value": "head_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "head_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(head_emb_list, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(head_emb, self.lexical_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.lexical_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_399": {
                "variable": {
                    "value": "text_len_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "text_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([len(s) for s in sentences])",
                            "Call"
                        ],
                        [
                            "text_len[sentence_offset:sentence_offset + max_training_sentences]",
                            "Subscript"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_sentence_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max((len(s) for s in sentences))",
                            "Call"
                        ],
                        [
                            "tf.shape(emb)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(context_word_emb)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_404": {
                "variable": {
                    "value": "genre_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('genre_embeddings', [len(self.genres), self.config['feature_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "genre",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.genres[doc_key[:2]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tile_406": {
                "variable": {
                    "value": "sentence_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(num_sentences), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, max_sentence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_410": {
                "variable": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(num_words), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.max_span_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_412": {
                "variable": {
                    "value": "candidate_start_sentence_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flattened_sentence_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flatten_emb_by_sentence(sentence_indices, text_len_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_words), 1), [1, self.max_span_width])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(candidate_starts, [-1]), flattened_candidate_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_413": {
                "variable": {
                    "value": "candidate_end_sentence_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "flattened_sentence_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.flatten_emb_by_sentence(sentence_indices, text_len_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.minimum(candidate_ends, num_words - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_414": {
                "variable": {
                    "value": "candidate_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "candidate_ends < num_words",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(candidate_start_sentence_indices, candidate_end_sentence_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_415": {
                "variable": {
                    "value": "flattened_candidate_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "candidate_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(candidate_ends < num_words, tf.equal(candidate_start_sentence_indices, candidate_end_sentence_indices))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_416": {
                "variable": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(candidate_starts, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "flattened_candidate_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(candidate_mask, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "boolean_mask_417": {
                "variable": {
                    "value": "candidate_ends",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.reshape(candidate_ends, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "flattened_candidate_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(candidate_mask, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_424": {
                "variable": {
                    "value": "candidate_mention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "candidate_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_mention_scores(candidate_span_emb)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(candidate_mention_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_426": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(tf.to_float(tf.shape(context_outputs)[0]) * self.config['top_span_ratio'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_434": {
                "variable": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(context_outputs, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_436": {
                "variable": {
                    "value": "top_span_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_words), 1), [1, self.max_span_width])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(candidate_starts, [-1]), flattened_candidate_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(context_outputs, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_437": {
                "variable": {
                    "value": "top_span_ends",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "candidate_ends",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidate_starts + tf.expand_dims(tf.range(self.max_span_width), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(candidate_ends, [-1]), flattened_candidate_mask)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(context_outputs, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_438": {
                "variable": {
                    "value": "top_span_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "candidate_span_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_span_emb(flattened_head_emb, context_outputs, candidate_starts, candidate_ends)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(context_outputs, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_439": {
                "variable": {
                    "value": "top_span_cluster_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "candidate_cluster_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_candidate_labels(candidate_starts, candidate_ends, gold_starts, gold_ends, gold_cluster_ids)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(context_outputs, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_440": {
                "variable": {
                    "value": "top_span_mention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "candidate_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_mention_scores(candidate_span_emb)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(candidate_mention_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.extract_spans(tf.expand_dims(candidate_mention_scores, 0), tf.expand_dims(candidate_starts, 0), tf.expand_dims(candidate_ends, 0), tf.expand_dims(k, 0), util.shape(context_outputs, 0), True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_indices, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_441": {
                "variable": {
                    "value": "top_span_speaker_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "speaker_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([speaker_dict[s] for s in speakers])",
                            "Call"
                        ],
                        [
                            "speaker_ids[word_offset:word_offset + num_words]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_span_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_starts, top_span_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_444": {
                "variable": {
                    "value": "expanded_top_span_mention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_span_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_mention_scores, top_span_indices)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_445": {
                "variable": {
                    "value": "dim_top_span_mention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros_like(expanded_top_span_mention_scores, dtype=tf.float32), tf.tile(expanded_top_span_mention_scores, [1, self.n_types - 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_494": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.softmax_loss(cluster_scores, gold_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_497": {
                "variable": {
                    "value": "loss_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "gold_split_antecedent_labels[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.ones([k]) * loss_weight_alpha",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.ones([k])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_498": {
                "variable": {
                    "value": "split_antecedent_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.softmax_loss(split_antecedent_scores, gold_split_antecedent_labels) * loss_weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_505": {
                "variable": {
                    "value": "max_clusters",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_mentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.shape(mention_scores, 0)",
                            "Call"
                        ],
                        [
                            "util.shape(mention_emb, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.config['max_top_antecedents']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_532": {
                "variable": {
                    "value": "oracle_cluster_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "oracle_cluster_att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(mention_att_scores, oracle_clusters_with_position)",
                            "Call"
                        ],
                        [
                            "tf.gather(mention_att_scores, oracle_clusters)",
                            "Call"
                        ],
                        [
                            "oracle_cluster_att_scores + tf.log(tf.sequence_mask(oracle_cluster_size, self.max_mention_per_cluster, dtype=tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(oracle_cluster_att_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_533": {
                "variable": {
                    "value": "oracle_cluster_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.gather(mention_emb, oracle_clusters) * tf.expand_dims(oracle_cluster_att_scores, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_535": {
                "variable": {
                    "value": "oracle_cluster_mention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.gather(mention_scores, oracle_clusters) * oracle_cluster_att_scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_561": {
                "variable": {
                    "value": "top_cluster_width_bin",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "oracle_cluster_width_bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.cluster_width_bins(widths=oracle_cluster_size)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_mentions), 1) - top_cluster_offsets",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(top_clusters, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_562": {
                "variable": {
                    "value": "top_cluster_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "oracle_cluster_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.gather(mention_emb, oracle_clusters) * tf.expand_dims(oracle_cluster_att_scores, 2), 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_mentions), 1) - top_cluster_offsets",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(top_clusters, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_563": {
                "variable": {
                    "value": "top_cluster_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "oracle_clusters",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "top_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_mentions), 1) - top_cluster_offsets",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(top_clusters, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_564": {
                "variable": {
                    "value": "top_individual_cluster_size",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "oracle_cluster_size",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "top_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_mentions), 1) - top_cluster_offsets",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(top_clusters, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_592": {
                "variable": {
                    "value": "feature_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "feature_emb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_593": {
                "variable": {
                    "value": "feature_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(feature_emb_list, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(feature_emb, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat(feature_emb_list, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(feature_emb, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_595": {
                "variable": {
                    "value": "mention_emb_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(mention_emb, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, max_clusters, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_599": {
                "variable": {
                    "value": "pair_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mention_emb_tiled, top_cluster_emb, similarity_emb, feature_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_616": {
                "variable": {
                    "value": "cluster_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mention_type_scores, cluster_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_618": {
                "variable": {
                    "value": "top_fast_cluster_scores_stop_gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_fast_cluster_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mention_scores, 1) + tf.gather(oracle_cluster_mention_scores, top_clusters)",
                            "BinOp"
                        ],
                        [
                            "top_fast_cluster_scores + tf.log(tf.to_float(top_cluster_mask))",
                            "BinOp"
                        ],
                        [
                            "fast_cluster_scores",
                            "variable"
                        ]
                    ]
                }
            },
            "concat_620": {
                "variable": {
                    "value": "split_antecedent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([num_mentions, 1]), split_antecedent_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_643": {
                "variable": {
                    "value": "init_cluster_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_scan_clusters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_644": {
                "variable": {
                    "value": "init_cluster_last_mention",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_scan_clusters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_645": {
                "variable": {
                    "value": "init_cluster_len",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_646": {
                "variable": {
                    "value": "init_cluster_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_scan_clusters + self.n_types]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_647": {
                "variable": {
                    "value": "init_split_antecedent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_scan_clusters + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_648": {
                "variable": {
                    "value": "init_cluster_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_scan_clusters, max_mention_per_cluster]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_649": {
                "variable": {
                    "value": "init_cluster_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_scan_clusters, mention_emb_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_650": {
                "variable": {
                    "value": "init_cluster_mention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_scan_clusters]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_651": {
                "variable": {
                    "value": "init_cluster_sid",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[max_scan_clusters]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scan_832": {
                "variable": {
                    "value": "(_, _, _, _, _, _, _, predicted_antecedents, predicted_mention_types, cluster_scores, split_antecedent_scores, cluster_indices, individual_cluster_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fn": {
                    "value": "_cluster_scan",
                    "type": "variable",
                    "possible_values": []
                },
                "elems": {
                    "value": "(mention_emb, init_mention_sid, mention_scores, mention_type_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "(init_cluster_emb, init_cluster_mention_scores, init_cluster_indices, init_cluster_size, init_cluster_sid, init_cluster_last_mention, init_cluster_len, 0, 0, init_cluster_scores, init_split_antecedent_scores, init_cluster_indices, init_cluster_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_263": {
                "variable": {
                    "value": "span_width_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('span_width_embeddings', [self.config['max_span_width'], self.config['feature_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "span_width_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "span_width - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "dropout_264": {
                "variable": {
                    "value": "span_width_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "span_width_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(tf.get_variable('span_width_embeddings', [self.config['max_span_width'], self.config['feature_size']]), span_width_index)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(span_width_emb, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_269": {
                "variable": {
                    "value": "span_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "util.shape(context_outputs, 0) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(self.config['max_span_width']), 0) + tf.expand_dims(span_starts, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(util.shape(context_outputs, 0) - 1, span_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_270": {
                "variable": {
                    "value": "span_text_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "head_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(head_emb_list, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(head_emb, self.lexical_dropout)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(self.config['max_span_width']), 0) + tf.expand_dims(span_starts, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(util.shape(context_outputs, 0) - 1, span_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_273": {
                "variable": {
                    "value": "span_head_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.head_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "span_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(self.config['max_span_width']), 0) + tf.expand_dims(span_starts, 1)",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(util.shape(context_outputs, 0) - 1, span_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_274": {
                "variable": {
                    "value": "span_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.sequence_mask(span_width, self.config['max_span_width'], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_276": {
                "variable": {
                    "value": "span_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "span_head_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(self.head_scores, span_indices)",
                            "Call"
                        ],
                        [
                            "span_head_scores + tf.log(span_mask)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_277": {
                "variable": {
                    "value": "span_head_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "span_attention * span_text_emb",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_302": {
                "t": {
                    "value": "combined_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "use_identity * distances + (1 - use_identity) * logspace_idx",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_322": {
                "variable": {
                    "value": "flattened_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_sentences * max_sentence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "boolean_mask_327": {
                "tensor": {
                    "value": "flattened_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(emb, [num_sentences * max_sentence_length])",
                            "Call"
                        ],
                        [
                            "tf.reshape(emb, [num_sentences * max_sentence_length, util.shape(emb, 2)])",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tf.reshape(text_len_mask, [num_sentences * max_sentence_length])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_373": {
                "variable": {
                    "value": "char_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('char_embeddings', [len(self.char_dict), self.config['char_embedding_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "char_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(sentences), max_sentence_length, max_word_length])",
                            "Call"
                        ],
                        [
                            "char_index[sentence_offset:sentence_offset + max_training_sentences, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_374": {
                "variable": {
                    "value": "flattened_char_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "char_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(tf.get_variable('char_embeddings', [len(self.char_dict), self.config['char_embedding_size']]), char_index)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences * max_sentence_length, util.shape(char_emb, 2), util.shape(char_emb, 3)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_376": {
                "variable": {
                    "value": "aggregated_char_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flattened_aggregated_char_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.cnn(flattened_char_emb, self.config['filter_widths'], self.config['filter_size'])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences, max_sentence_length, util.shape(flattened_aggregated_char_emb, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_386": {
                "variable": {
                    "value": "self.lm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.get_variable('lm_scores', [lm_num_layers], initializer=tf.constant_initializer(0.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_387": {
                "variable": {
                    "value": "self.lm_scaling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "lm_scaling",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_522": {
                "variable": {
                    "value": "oracle_clusters_with_position",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(oracle_clusters, 2), tf.tile(tf.expand_dims(tf.expand_dims(tf.range(0, self.max_mention_per_cluster), 0), 2), [num_mentions, 1, 1])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_525": {
                "variable": {
                    "value": "oracle_cluster_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mention_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "oracle_clusters_with_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(oracle_clusters, 2), tf.tile(tf.expand_dims(tf.expand_dims(tf.range(0, self.max_mention_per_cluster), 0), 2), [num_mentions, 1, 1])], axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_528": {
                "variable": {
                    "value": "oracle_cluster_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mention_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "oracle_clusters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_530": {
                "x": {
                    "value": "tf.sequence_mask(oracle_cluster_size, self.max_mention_per_cluster, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "top_k_550": {
                "variable": {
                    "value": "(top_fast_cluster_scores, top_clusters)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fast_cluster_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mention_scores, 1) + tf.expand_dims(oracle_cluster_mention_scores, 0) + tf.log(tf.to_float(cluster_mask))",
                            "BinOp"
                        ],
                        [
                            "fast_cluster_scores + tf.squeeze(tf.matmul(c2f_mention_emb, c2f_cluster_emb, transpose_b=True), 0)",
                            "BinOp"
                        ],
                        [
                            "dim_m_score + cl_m_score + tf.log(tf.sequence_mask(cl_len, max_scan_clusters, dtype=tf.float32))",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "max_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(num_mentions, self.config['max_top_antecedents'])",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_554": {
                "variable": {
                    "value": "top_cluster_offsets",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.range(max_clusters) + 1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_mentions, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_557": {
                "variable": {
                    "value": "top_clusters",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "top_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_mentions), 1) - top_cluster_offsets",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(top_clusters, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_608": {
                "variable": {
                    "value": "pair_emb_stop_gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mention_emb_tiled, top_cluster_emb, similarity_emb, feature_emb], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([m_emb_tiled, top_cl_emb, similarity_emb, feature_emb], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_632": {
                "variable": {
                    "value": "max_top_clusters",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_mentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.shape(mention_scores, 0)",
                            "Call"
                        ],
                        [
                            "util.shape(mention_emb, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.config['max_top_antecedents']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_715": {
                "variable": {
                    "value": "feature_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "feature_emb_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_716": {
                "variable": {
                    "value": "feature_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(feature_emb_list, 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(feature_emb, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.concat(feature_emb_list, 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(feature_emb, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_718": {
                "variable": {
                    "value": "m_emb_tiled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dim_m_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[max_top_clusters, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_722": {
                "variable": {
                    "value": "pair_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m_emb_tiled, top_cl_emb, similarity_emb, feature_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_740": {
                "variable": {
                    "value": "cluster_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[m_type_score, cluster_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_741": {
                "variable": {
                    "value": "weighted_cluster_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "cluster_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.ffnn(pair_emb, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(cluster_scores, 2)",
                            "Call"
                        ],
                        [
                            "cluster_scores + top_fast_cluster_scores",
                            "BinOp"
                        ],
                        [
                            "tf.concat([mention_type_scores, cluster_scores], axis=1)",
                            "Call"
                        ],
                        [
                            "util.ffnn(pair_emb, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(cluster_scores, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([m_type_score, cluster_scores], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_743": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.ffnn(pair_emb, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(cluster_scores, 2)",
                            "Call"
                        ],
                        [
                            "cluster_scores + top_fast_cluster_scores",
                            "BinOp"
                        ],
                        [
                            "tf.concat([mention_type_scores, cluster_scores], axis=1)",
                            "Call"
                        ],
                        [
                            "util.ffnn(pair_emb, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(cluster_scores, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([m_type_score, cluster_scores], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_744": {
                "variable": {
                    "value": "step_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "weighted_cluster_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(cluster_scores, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(cluster_scores, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_748": {
                "variable": {
                    "value": "top_fast_cluster_scores_stop_gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_fast_cluster_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mention_scores, 1) + tf.gather(oracle_cluster_mention_scores, top_clusters)",
                            "BinOp"
                        ],
                        [
                            "top_fast_cluster_scores + tf.log(tf.to_float(top_cluster_mask))",
                            "BinOp"
                        ],
                        [
                            "fast_cluster_scores",
                            "variable"
                        ]
                    ]
                }
            },
            "concat_750": {
                "variable": {
                    "value": "split_antecedent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[0], split_antecedent_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_817": {
                "pred": {
                    "value": "tf.logical_and(tf.less(step, self.n_types - 1), tf.greater(step_weight, prefiltering_threshold))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "_exclude",
                    "type": "variable",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "_dn",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_121": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_275": {
                "x": {
                    "value": "span_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.sequence_mask(span_width, self.config['max_span_width'], dtype=tf.float32), 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_284": {
                "name_or_scope": {
                    "value": "scope_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mention_scores'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_int32_299": {
                "x": {
                    "value": "tf.floor(tf.log(tf.to_float(distances)) / math.log(2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_306": {
                "input": {
                    "value": "labeled_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_307": {
                "input": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_words), 1), [1, self.max_span_width])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(candidate_starts, [-1]), flattened_candidate_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_308": {
                "input": {
                    "value": "labeled_ends",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_309": {
                "input": {
                    "value": "candidate_ends",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidate_starts + tf.expand_dims(tf.range(self.max_span_width), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(candidate_ends, [-1]), flattened_candidate_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_311": {
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_311": {
                "x": {
                    "value": "same_span",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(same_start, same_end)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_317": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_318": {
                "input": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_324": {
                "variable": {
                    "value": "flattened_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_sentences * max_sentence_length, util.shape(emb, 2)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_327": {
                "tensor": {
                    "value": "text_len_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(text_len, maxlen=max_sentence_length)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_sentences * max_sentence_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_330": {
                "input": {
                    "value": "text_emb",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_340": {
                "variable": {
                    "value": "state_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "tf.tile(cell_fw.initial_state.c, [num_sentences, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "h": {
                    "value": "tf.tile(cell_fw.initial_state.h, [num_sentences, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTMStateTuple_341": {
                "variable": {
                    "value": "state_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "c": {
                    "value": "tf.tile(cell_bw.initial_state.c, [num_sentences, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "h": {
                    "value": "tf.tile(cell_bw.initial_state.h, [num_sentences, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_343": {
                "variable": {
                    "value": "((fw_outputs, bw_outputs), _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.CustomLSTMCell(self.config['contextualization_size'], num_sentences, self.lstm_dropout)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.CustomLSTMCell(self.config['contextualization_size'], num_sentences, self.lstm_dropout)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "current_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "text_emb",
                            "variable"
                        ],
                        [
                            "text_outputs",
                            "variable"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "text_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([len(s) for s in sentences])",
                            "Call"
                        ],
                        [
                            "text_len[sentence_offset:sentence_offset + max_training_sentences]",
                            "Subscript"
                        ]
                    ]
                },
                "initial_state_fw": {
                    "value": "state_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(tf.tile(cell_fw.initial_state.c, [num_sentences, 1]), tf.tile(cell_fw.initial_state.h, [num_sentences, 1]))",
                            "Call"
                        ]
                    ]
                },
                "initial_state_bw": {
                    "value": "state_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMStateTuple(tf.tile(cell_bw.initial_state.c, [num_sentences, 1]), tf.tile(cell_bw.initial_state.h, [num_sentences, 1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_351": {
                "variable": {
                    "value": "text_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_outputs, bw_outputs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_352": {
                "variable": {
                    "value": "text_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "text_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([fw_outputs, bw_outputs], 2)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(text_outputs, self.lstm_dropout)",
                            "Call"
                        ],
                        [
                            "highway_gates * text_outputs + (1 - highway_gates) * current_inputs",
                            "BinOp"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.lstm_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_366": {
                "input": {
                    "value": "context_word_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(sentences), max_sentence_length, self.context_embeddings.size])",
                            "Call"
                        ],
                        [
                            "context_word_emb[sentence_offset:sentence_offset + max_training_sentences, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_367": {
                "input": {
                    "value": "context_word_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros([len(sentences), max_sentence_length, self.context_embeddings.size])",
                            "Call"
                        ],
                        [
                            "context_word_emb[sentence_offset:sentence_offset + max_training_sentences, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_385": {
                "name_or_scope": {
                    "value": "lm_aggregation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_389": {
                "input": {
                    "value": "self.lm_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_404": {
                "name": {
                    "value": "genre_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(self.genres), self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_406": {
                "input": {
                    "value": "tf.range(num_sentences)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_410": {
                "input": {
                    "value": "tf.range(num_words)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_411": {
                "input": {
                    "value": "tf.range(self.max_span_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_413": {
                "x": {
                    "value": "candidate_ends",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidate_starts + tf.expand_dims(tf.range(self.max_span_width), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(candidate_ends, [-1]), flattened_candidate_mask)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "num_words - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "equal_414": {
                "x": {
                    "value": "candidate_start_sentence_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(flattened_sentence_indices, candidate_starts)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "candidate_end_sentence_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(flattened_sentence_indices, tf.minimum(candidate_ends, num_words - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_416": {
                "tensor": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_words), 1), [1, self.max_span_width])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(candidate_starts, [-1]), flattened_candidate_mask)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_417": {
                "tensor": {
                    "value": "candidate_ends",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidate_starts + tf.expand_dims(tf.range(self.max_span_width), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(candidate_ends, [-1]), flattened_candidate_mask)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_426": {
                "x": {
                    "value": "tf.to_float(tf.shape(context_outputs)[0]) * self.config['top_span_ratio']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_427": {
                "input": {
                    "value": "candidate_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_mention_scores(candidate_span_emb)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(candidate_mention_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_428": {
                "input": {
                    "value": "candidate_starts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(tf.range(num_words), 1), [1, self.max_span_width])",
                            "Call"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(candidate_starts, [-1]), flattened_candidate_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_429": {
                "input": {
                    "value": "candidate_ends",
                    "type": "variable",
                    "possible_values": [
                        [
                            "candidate_starts + tf.expand_dims(tf.range(self.max_span_width), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.boolean_mask(tf.reshape(candidate_ends, [-1]), flattened_candidate_mask)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_430": {
                "input": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_int32(tf.floor(tf.to_float(tf.shape(context_outputs)[0]) * self.config['top_span_ratio']))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_450": {
                "name_or_scope": {
                    "value": "mention_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_452": {
                "variable": {
                    "value": "cluster_position_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('cluster_position_emb', [self.max_mention_per_cluster, self.config['feature_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.range(0, self.max_mention_per_cluster)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_453": {
                "variable": {
                    "value": "tiled_cluster_position_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(cluster_position_emb, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[k, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_454": {
                "variable": {
                    "value": "tiled_top_span_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(top_span_emb, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.max_mention_per_cluster, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_455": {
                "variable": {
                    "value": "top_span_emb_with_cluster_position",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tiled_top_span_emb, tiled_cluster_position_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_457": {
                "variable": {
                    "value": "top_span_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_span_att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.projection(top_span_emb_with_cluster_position, 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_att_scores, 2)",
                            "Call"
                        ],
                        [
                            "util.projection(top_span_emb, 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_att_scores, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_460": {
                "variable": {
                    "value": "top_span_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "top_span_att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.projection(top_span_emb_with_cluster_position, 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_att_scores, 2)",
                            "Call"
                        ],
                        [
                            "util.projection(top_span_emb, 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(top_span_att_scores, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_497": {
                "shape": {
                    "value": "[k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_530": {
                "lengths": {
                    "value": "oracle_cluster_size",
                    "type": "variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "self.max_mention_per_cluster",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_539": {
                "input": {
                    "value": "top_span_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(num_mentions)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_546": {
                "variable": {
                    "value": "c2f_mention_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "util.projection(mention_emb, util.shape(mention_emb, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_547": {
                "variable": {
                    "value": "c2f_cluster_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "oracle_cluster_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.gather(mention_emb, oracle_clusters) * tf.expand_dims(oracle_cluster_att_scores, 2), 1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_549": {
                "a": {
                    "value": "c2f_mention_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(util.projection(mention_emb, util.shape(mention_emb, -1)), self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(util.projection(dim_m_emb, util.shape(dim_m_emb, -1)), self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "c2f_cluster_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(oracle_cluster_emb, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(cl_emb, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_559": {
                "x": {
                    "value": "tf.to_float(top_cluster_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_568": {
                "name_or_scope": {
                    "value": "feature_emb",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_570": {
                "variable": {
                    "value": "cl_speaker_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mention_speaker_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "top_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_mentions), 1) - top_cluster_offsets",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(top_clusters, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_571": {
                "variable": {
                    "value": "same_speaker",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(mention_speaker_ids, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cl_speaker_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(mention_speaker_ids, top_clusters)",
                            "Call"
                        ],
                        [
                            "tf.gather(mention_speaker_ids, top_cl_last_m)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_572": {
                "variable": {
                    "value": "speaker_pair_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('same_speaker_emb', [2, self.config['feature_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.to_int32(same_speaker)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_576": {
                "variable": {
                    "value": "tiled_genre_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(genre_emb, 0), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_mentions, max_clusters, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_582": {
                "variable": {
                    "value": "mention_distance_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('mention_distance_emb', [10, self.config['feature_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "mention_distance_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bucket_distance(top_cluster_offsets)",
                            "Call"
                        ],
                        [
                            "coref_ops.distance_bins(mention_distance)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_588": {
                "variable": {
                    "value": "cluster_width_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('cluster_width_emb', [9, self.config['feature_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "top_cluster_width_bin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(oracle_cluster_width_bin, top_clusters)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_595": {
                "input": {
                    "value": "mention_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_602": {
                "name_or_scope": {
                    "value": "iteration",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_606": {
                "variable": {
                    "value": "cluster_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.ffnn(pair_emb, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(cluster_scores, 2)",
                            "Call"
                        ],
                        [
                            "cluster_scores + top_fast_cluster_scores",
                            "BinOp"
                        ],
                        [
                            "tf.concat([mention_type_scores, cluster_scores], axis=1)",
                            "Call"
                        ],
                        [
                            "util.ffnn(pair_emb, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(cluster_scores, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([m_type_score, cluster_scores], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_613": {
                "variable": {
                    "value": "split_antecedent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "split_antecedent_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.ffnn(pair_emb_stop_gradient, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(split_antecedent_scores, 2)",
                            "Call"
                        ],
                        [
                            "split_antecedent_scores + top_fast_cluster_scores_stop_gradient",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.zeros([num_mentions, 1]), split_antecedent_scores], axis=1)",
                            "Call"
                        ],
                        [
                            "util.ffnn(pair_emb_stop_gradient, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(split_antecedent_scores, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([[0], split_antecedent_scores], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cond_635": {
                "variable": {
                    "value": "max_top_clusters",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.minimum(num_mentions, self.config['max_top_antecedents'])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : num_mentions",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "minimum_638": {
                "variable": {
                    "value": "max_top_clusters",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "num_mentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.shape(mention_scores, 0)",
                            "Call"
                        ],
                        [
                            "util.shape(mention_emb, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.config['max_top_antecedents']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "top_k_670": {
                "variable": {
                    "value": "(top_fast_cluster_scores, top_clusters)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fast_cluster_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(mention_scores, 1) + tf.expand_dims(oracle_cluster_mention_scores, 0) + tf.log(tf.to_float(cluster_mask))",
                            "BinOp"
                        ],
                        [
                            "fast_cluster_scores + tf.squeeze(tf.matmul(c2f_mention_emb, c2f_cluster_emb, transpose_b=True), 0)",
                            "BinOp"
                        ],
                        [
                            "dim_m_score + cl_m_score + tf.log(tf.sequence_mask(cl_len, max_scan_clusters, dtype=tf.float32))",
                            "BinOp"
                        ]
                    ]
                },
                "k": {
                    "value": "max_top_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(num_mentions, self.config['max_top_antecedents'])",
                            "Call"
                        ],
                        [
                            "tf.cond(is_training, lambda : tf.minimum(num_mentions, self.config['max_top_antecedents']), lambda : num_mentions)",
                            "Call"
                        ],
                        [
                            "tf.minimum(num_mentions, self.config['max_top_antecedents'])",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_673": {
                "variable": {
                    "value": "top_cl_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cl_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "top_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_mentions), 1) - top_cluster_offsets",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(top_clusters, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_674": {
                "variable": {
                    "value": "top_cl_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cl_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "top_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_mentions), 1) - top_cluster_offsets",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(top_clusters, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_675": {
                "variable": {
                    "value": "top_cl_size",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cl_size",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "top_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_mentions), 1) - top_cluster_offsets",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(top_clusters, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_676": {
                "variable": {
                    "value": "top_cl_last_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cl_last_m",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "top_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_mentions), 1) - top_cluster_offsets",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(top_clusters, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_732": {
                "variable": {
                    "value": "pair_emb_stop_gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pair_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mention_emb_tiled, top_cluster_emb, similarity_emb, feature_emb], 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([m_emb_tiled, top_cl_emb, similarity_emb, feature_emb], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_757": {
                "variable": {
                    "value": "re_cl_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.concat([dim_m_emb, cl_emb], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.range(0, act_step + 1), tf.range(act_step + 2, max_scan_clusters + 1)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_758": {
                "variable": {
                    "value": "re_cl_m_score",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.concat([dim_m_score, cl_m_score], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.range(0, act_step + 1), tf.range(act_step + 2, max_scan_clusters + 1)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_759": {
                "variable": {
                    "value": "step_cl_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[dim_m_init_sid, tf.zeros([max_mention_per_cluster - 1], dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_760": {
                "variable": {
                    "value": "re_cl_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.concat([tf.expand_dims(step_cl_indices, axis=0), cl_indices], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.range(0, act_step + 1), tf.range(act_step + 2, max_scan_clusters + 1)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_761": {
                "variable": {
                    "value": "re_cl_size",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.concat([tf.ones([1], dtype=tf.int32), cl_size], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.range(0, act_step + 1), tf.range(act_step + 2, max_scan_clusters + 1)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_763": {
                "variable": {
                    "value": "re_cl_last_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.concat([dim_m_init_sid, cl_last_m], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.range(0, act_step + 1), tf.range(act_step + 2, max_scan_clusters + 1)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_764": {
                "variable": {
                    "value": "re_cl_len",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_scan_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_mentions",
                            "variable"
                        ],
                        [
                            "max_top_clusters",
                            "variable"
                        ],
                        [
                            "max_top_clusters",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "cl_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_783": {
                "variable": {
                    "value": "step_cl_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_mention_per_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_mention_per_cluster",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.gather(cl_size, act_step) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_784": {
                "variable": {
                    "value": "step_cl_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.gather(tf.gather(cl_indices, act_step), tf.range(0, step_cl_size - 1)), dim_m_init_sid, tf.zeros([max_mention_per_cluster - step_cl_size], dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_798": {
                "variable": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "step_att_scores + tf.log(tf.sequence_mask(step_cl_size, max_mention_per_cluster, dtype=tf.float32))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_800": {
                "variable": {
                    "value": "step_cl_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.gather(mention_emb, step_cl_indices) * tf.expand_dims(att, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_802": {
                "variable": {
                    "value": "step_cl_m_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.gather(mention_scores, step_cl_indices) * att",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_805": {
                "variable": {
                    "value": "re_cl_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.concat([tf.expand_dims(step_cl_emb, axis=0), cl_emb], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.range(0, act_step + 1), tf.range(act_step + 2, max_scan_clusters + 1)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_806": {
                "variable": {
                    "value": "re_cl_m_score",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.concat([tf.expand_dims(step_cl_m_score, axis=0), cl_m_score], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.range(0, act_step + 1), tf.range(act_step + 2, max_scan_clusters + 1)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_807": {
                "variable": {
                    "value": "re_cl_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.concat([tf.expand_dims(step_cl_indices, axis=0), cl_indices], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.range(0, act_step + 1), tf.range(act_step + 2, max_scan_clusters + 1)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_808": {
                "variable": {
                    "value": "re_cl_size",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.concat([[step_cl_size], cl_size], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.range(0, act_step + 1), tf.range(act_step + 2, max_scan_clusters + 1)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_810": {
                "variable": {
                    "value": "re_cl_last_m",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.concat([dim_m_init_sid, cl_last_m], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.range(0, act_step + 1), tf.range(act_step + 2, max_scan_clusters + 1)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_812": {
                "variable": {
                    "value": "re_ant",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "cl_last_m",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "act_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step - self.n_types",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(tf.to_int32(tf.equal(cl_sid, step_sid)), output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "top_clusters[act_step]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_843": {
                "values": {
                    "value": "individual_cluster_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_844": {
                "values": {
                    "value": "split_antecedent_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.ffnn(pair_emb_stop_gradient, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(split_antecedent_scores, 2)",
                            "Call"
                        ],
                        [
                            "split_antecedent_scores + top_fast_cluster_scores_stop_gradient",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.zeros([num_mentions, 1]), split_antecedent_scores], axis=1)",
                            "Call"
                        ],
                        [
                            "util.ffnn(pair_emb_stop_gradient, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(split_antecedent_scores, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([[0], split_antecedent_scores], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_247": {
                "x": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_263": {
                "name": {
                    "value": "span_width_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.config['max_span_width'], self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_268": {
                "input": {
                    "value": "span_starts",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "head_scores",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sequence_mask_274": {
                "lengths": {
                    "value": "span_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 + span_ends - span_starts",
                            "BinOp"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "self.config['max_span_width']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_288": {
                "x": {
                    "value": "tf.to_float(gold_labels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "floor_299": {
                "x": {
                    "value": "tf.log(tf.to_float(distances)) / math.log(2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_335": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(layer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_354": {
                "variable": {
                    "value": "highway_gates",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "util.projection(text_outputs, util.shape(text_outputs, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_373": {
                "name": {
                    "value": "char_embeddings",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(self.char_dict), self.config['char_embedding_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_386": {
                "name": {
                    "value": "lm_scores",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[lm_num_layers]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_445": {
                "input": {
                    "value": "expanded_top_span_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(top_span_mention_scores, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_445": {
                "input": {
                    "value": "expanded_top_span_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(top_span_mention_scores, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.n_types - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_534": {
                "params": {
                    "value": "mention_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "oracle_clusters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_534": {
                "input": {
                    "value": "oracle_cluster_att_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather_nd(mention_att_scores, oracle_clusters_with_position)",
                            "Call"
                        ],
                        [
                            "tf.gather(mention_att_scores, oracle_clusters)",
                            "Call"
                        ],
                        [
                            "oracle_cluster_att_scores + tf.log(tf.sequence_mask(oracle_cluster_size, self.max_mention_per_cluster, dtype=tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(oracle_cluster_att_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_536": {
                "params": {
                    "value": "mention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "oracle_clusters",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_544": {
                "x": {
                    "value": "tf.to_float(cluster_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_545": {
                "name_or_scope": {
                    "value": "coarse_to_fine_cluster_scoring",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_554": {
                "input": {
                    "value": "tf.range(max_clusters) + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_555": {
                "input": {
                    "value": "tf.range(num_mentions)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_558": {
                "input": {
                    "value": "mention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_558": {
                "params": {
                    "value": "oracle_cluster_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.gather(mention_scores, oracle_clusters) * oracle_cluster_att_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "top_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.range(num_mentions), 1) - top_cluster_offsets",
                            "BinOp"
                        ],
                        [
                            "tf.maximum(top_clusters, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_559": {
                "x": {
                    "value": "top_cluster_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_clusters >= 0",
                            "Compare"
                        ],
                        [
                            "util.batch_gather(cluster_mask, top_clusters)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_603": {
                "name_or_scope": {
                    "value": "cluster_scoring",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_609": {
                "name_or_scope": {
                    "value": "plural_scoring",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_620": {
                "shape": {
                    "value": "[num_mentions, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_656": {
                "input": {
                    "value": "m_init_sid",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_657": {
                "input": {
                    "value": "m_score",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_661": {
                "x": {
                    "value": "tf.sequence_mask(cl_len, max_scan_clusters, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_666": {
                "variable": {
                    "value": "c2f_mention_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "util.projection(dim_m_emb, util.shape(dim_m_emb, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_667": {
                "variable": {
                    "value": "c2f_cluster_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cl_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_669": {
                "input": {
                    "value": "tf.matmul(c2f_mention_emb, c2f_cluster_emb, transpose_b=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_687": {
                "name_or_scope": {
                    "value": "feature_emb",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_689": {
                "variable": {
                    "value": "cl_speaker_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mention_speaker_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "top_cl_last_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cl_last_m",
                            "variable"
                        ],
                        [
                            "tf.gather(cl_last_m, top_clusters)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_690": {
                "variable": {
                    "value": "same_speaker",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.gather(mention_speaker_ids, dim_m_init_sid)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "cl_speaker_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(mention_speaker_ids, top_clusters)",
                            "Call"
                        ],
                        [
                            "tf.gather(mention_speaker_ids, top_cl_last_m)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_691": {
                "variable": {
                    "value": "speaker_pair_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('same_speaker_emb', [2, self.config['feature_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.to_int32(same_speaker)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_695": {
                "variable": {
                    "value": "tiled_genre_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(genre_emb, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[max_top_clusters, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_703": {
                "variable": {
                    "value": "mention_distance_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('mention_distance_emb', [10, self.config['feature_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "mention_distance_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.bucket_distance(top_cluster_offsets)",
                            "Call"
                        ],
                        [
                            "coref_ops.distance_bins(mention_distance)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_711": {
                "variable": {
                    "value": "cluster_width_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.get_variable('cluster_width_emb', [9, self.config['feature_size']])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "cluster_width_bins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "coref_ops.cluster_width_bins(top_cl_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_726": {
                "name_or_scope": {
                    "value": "iteration",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_730": {
                "variable": {
                    "value": "cluster_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cluster_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.ffnn(pair_emb, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(cluster_scores, 2)",
                            "Call"
                        ],
                        [
                            "cluster_scores + top_fast_cluster_scores",
                            "BinOp"
                        ],
                        [
                            "tf.concat([mention_type_scores, cluster_scores], axis=1)",
                            "Call"
                        ],
                        [
                            "util.ffnn(pair_emb, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(cluster_scores, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([m_type_score, cluster_scores], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_737": {
                "variable": {
                    "value": "split_antecedent_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "split_antecedent_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.ffnn(pair_emb_stop_gradient, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(split_antecedent_scores, 2)",
                            "Call"
                        ],
                        [
                            "split_antecedent_scores + top_fast_cluster_scores_stop_gradient",
                            "BinOp"
                        ],
                        [
                            "tf.concat([tf.zeros([num_mentions, 1]), split_antecedent_scores], axis=1)",
                            "Call"
                        ],
                        [
                            "util.ffnn(pair_emb_stop_gradient, self.config['ffnn_depth'], self.config['ffnn_size'], 1, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(split_antecedent_scores, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([[0], split_antecedent_scores], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_774": {
                "variable": {
                    "value": "act_step",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_int32(tf.equal(cl_sid, step_sid))",
                    "type": "Call",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_781": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(0, act_step + 1), tf.range(act_step + 2, max_scan_clusters + 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_790": {
                "variable": {
                    "value": "step_cl_indices_with_cluster_position",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.expand_dims(step_cl_indices, 1), tf.expand_dims(tf.range(0, max_mention_per_cluster), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_793": {
                "variable": {
                    "value": "step_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mention_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "step_cl_indices_with_cluster_position",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.expand_dims(step_cl_indices, 1), tf.expand_dims(tf.range(0, max_mention_per_cluster), 1)], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_796": {
                "variable": {
                    "value": "step_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mention_att_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "step_cl_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([dim_m_init_sid, tf.zeros([max_mention_per_cluster - 1], dtype=tf.int32)], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.gather(tf.gather(cl_indices, act_step), tf.range(0, step_cl_size - 1)), dim_m_init_sid, tf.zeros([max_mention_per_cluster - step_cl_size], dtype=tf.int32)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_817": {
                "x": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(cluster_scores, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.n_types - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_288": {
                "x": {
                    "value": "gold_labels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_336": {
                "name_or_scope": {
                    "value": "fw_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_338": {
                "name_or_scope": {
                    "value": "bw_cell",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tile_340": {
                "input": {
                    "value": "cell_fw.initial_state.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_sentences, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_341": {
                "input": {
                    "value": "cell_bw.initial_state.h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_sentences, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_387": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "to_float_426": {
                "x": {
                    "value": "tf.shape(context_outputs)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_452": {
                "name": {
                    "value": "cluster_position_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.max_mention_per_cluster, self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_453": {
                "input": {
                    "value": "cluster_position_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(tf.get_variable('cluster_position_emb', [self.max_mention_per_cluster, self.config['feature_size']]), tf.range(0, self.max_mention_per_cluster))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_454": {
                "input": {
                    "value": "top_span_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(candidate_span_emb, top_span_indices)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_522": {
                "input": {
                    "value": "oracle_clusters",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_522": {
                "input": {
                    "value": "tf.expand_dims(tf.expand_dims(tf.range(0, self.max_mention_per_cluster), 0), 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[num_mentions, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_543": {
                "input": {
                    "value": "oracle_cluster_mention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.gather(mention_scores, oracle_clusters) * oracle_cluster_att_scores, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_544": {
                "x": {
                    "value": "cluster_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cluster_offsets >= 1",
                            "Compare"
                        ]
                    ]
                }
            },
            "expand_dims_571": {
                "input": {
                    "value": "mention_speaker_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_572": {
                "name": {
                    "value": "same_speaker_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_573": {
                "x": {
                    "value": "same_speaker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(mention_speaker_ids, 1), cl_speaker_ids)",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.gather(mention_speaker_ids, dim_m_init_sid), cl_speaker_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_576": {
                "input": {
                    "value": "genre_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(tf.get_variable('genre_embeddings', [len(self.genres), self.config['feature_size']]), genre)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_582": {
                "name": {
                    "value": "mention_distance_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_588": {
                "name": {
                    "value": "cluster_width_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[9, self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sequence_mask_662": {
                "lengths": {
                    "value": "cl_len",
                    "type": "variable",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_scan_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_mentions",
                            "variable"
                        ],
                        [
                            "max_top_clusters",
                            "variable"
                        ],
                        [
                            "max_top_clusters",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_665": {
                "name_or_scope": {
                    "value": "coarse_to_fine_cluster_scoring",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_669": {
                "a": {
                    "value": "c2f_mention_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(util.projection(mention_emb, util.shape(mention_emb, -1)), self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(util.projection(dim_m_emb, util.shape(dim_m_emb, -1)), self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "c2f_cluster_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(oracle_cluster_emb, self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(cl_emb, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_727": {
                "name_or_scope": {
                    "value": "cluster_scoring",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_733": {
                "name_or_scope": {
                    "value": "plural_scoring",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_757": {
                "values": {
                    "value": "[dim_m_emb, cl_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_758": {
                "values": {
                    "value": "[dim_m_score, cl_m_score]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_760": {
                "values": {
                    "value": "[tf.expand_dims(step_cl_indices, axis=0), cl_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_761": {
                "values": {
                    "value": "[tf.ones([1], dtype=tf.int32), cl_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_762": {
                "params": {
                    "value": "tf.concat([dim_m_init_sid, cl_sid], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.range(0, act_step + 1), tf.range(act_step + 2, max_scan_clusters + 1)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_763": {
                "values": {
                    "value": "[dim_m_init_sid, cl_last_m]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_805": {
                "values": {
                    "value": "[tf.expand_dims(step_cl_emb, axis=0), cl_emb]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_806": {
                "values": {
                    "value": "[tf.expand_dims(step_cl_m_score, axis=0), cl_m_score]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_807": {
                "values": {
                    "value": "[tf.expand_dims(step_cl_indices, axis=0), cl_indices]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_808": {
                "values": {
                    "value": "[[step_cl_size], cl_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_809": {
                "params": {
                    "value": "tf.concat([tf.expand_dims(step_sid, axis=0), cl_sid], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.range(0, max_scan_clusters, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.range(0, act_step + 1), tf.range(act_step + 2, max_scan_clusters + 1)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_810": {
                "values": {
                    "value": "[dim_m_init_sid, cl_last_m]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_811": {
                "x": {
                    "value": "max_scan_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_mentions",
                            "variable"
                        ],
                        [
                            "max_top_clusters",
                            "variable"
                        ],
                        [
                            "max_top_clusters",
                            "variable"
                        ]
                    ]
                },
                "y": {
                    "value": "cl_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_299": {
                "x": {
                    "value": "tf.to_float(distances)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_386": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "expand_dims_523": {
                "input": {
                    "value": "tf.range(0, self.max_mention_per_cluster)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_635": {
                "x": {
                    "value": "num_mentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.shape(mention_scores, 0)",
                            "Call"
                        ],
                        [
                            "util.shape(mention_emb, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.config['max_top_antecedents']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_690": {
                "params": {
                    "value": "mention_speaker_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "dim_m_init_sid",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_691": {
                "name": {
                    "value": "same_speaker_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_692": {
                "x": {
                    "value": "same_speaker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.expand_dims(mention_speaker_ids, 1), cl_speaker_ids)",
                            "Call"
                        ],
                        [
                            "tf.equal(tf.gather(mention_speaker_ids, dim_m_init_sid), cl_speaker_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_695": {
                "input": {
                    "value": "genre_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(tf.get_variable('genre_embeddings', [len(self.genres), self.config['feature_size']]), genre)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_703": {
                "name": {
                    "value": "mention_distance_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[10, self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_711": {
                "name": {
                    "value": "cluster_width_emb",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[9, self.config['feature_size']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_759": {
                "shape": {
                    "value": "[max_mention_per_cluster - 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_762": {
                "values": {
                    "value": "[dim_m_init_sid, cl_sid]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_int32_774": {
                "x": {
                    "value": "tf.equal(cl_sid, step_sid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_783": {
                "params": {
                    "value": "cl_size",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "act_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step - self.n_types",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(tf.to_int32(tf.equal(cl_sid, step_sid)), output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "top_clusters[act_step]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "gather_784": {
                "params": {
                    "value": "cl_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "act_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step - self.n_types",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(tf.to_int32(tf.equal(cl_sid, step_sid)), output_type=tf.int32)",
                            "Call"
                        ],
                        [
                            "top_clusters[act_step]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_786": {
                "shape": {
                    "value": "[max_mention_per_cluster - step_cl_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_799": {
                "x": {
                    "value": "tf.sequence_mask(step_cl_size, max_mention_per_cluster, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_800": {
                "params": {
                    "value": "mention_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "step_cl_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([dim_m_init_sid, tf.zeros([max_mention_per_cluster - 1], dtype=tf.int32)], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.gather(tf.gather(cl_indices, act_step), tf.range(0, step_cl_size - 1)), dim_m_init_sid, tf.zeros([max_mention_per_cluster - step_cl_size], dtype=tf.int32)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_800": {
                "input": {
                    "value": "att",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(step_att_scores + tf.log(tf.sequence_mask(step_cl_size, max_mention_per_cluster, dtype=tf.float32)), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_802": {
                "params": {
                    "value": "mention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "step_cl_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([dim_m_init_sid, tf.zeros([max_mention_per_cluster - 1], dtype=tf.int32)], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.gather(tf.gather(cl_indices, act_step), tf.range(0, step_cl_size - 1)), dim_m_init_sid, tf.zeros([max_mention_per_cluster - step_cl_size], dtype=tf.int32)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_809": {
                "values": {
                    "value": "[tf.expand_dims(step_sid, axis=0), cl_sid]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logical_and_817": {
                "x": {
                    "value": "tf.less(step, self.n_types - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.greater(step_weight, prefiltering_threshold)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_299": {
                "x": {
                    "value": "distances",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_426": {
                "input": {
                    "value": "context_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm_contextualize(context_emb, text_len, text_len_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_760": {
                "input": {
                    "value": "step_cl_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([dim_m_init_sid, tf.zeros([max_mention_per_cluster - 1], dtype=tf.int32)], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.gather(tf.gather(cl_indices, act_step), tf.range(0, step_cl_size - 1)), dim_m_init_sid, tf.zeros([max_mention_per_cluster - step_cl_size], dtype=tf.int32)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_761": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_774": {
                "x": {
                    "value": "cl_sid",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "step_sid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cl_sid[_step]",
                            "Subscript"
                        ],
                        [
                            "cl_sid[act_step]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "range_781": {},
            "range_784": {},
            "expand_dims_791": {
                "input": {
                    "value": "tf.range(0, max_mention_per_cluster)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sequence_mask_799": {
                "lengths": {
                    "value": "step_cl_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.minimum(max_mention_per_cluster, tf.gather(cl_size, act_step) + 1)",
                            "Call"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "max_mention_per_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.max_mention_per_cluster",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_805": {
                "input": {
                    "value": "step_cl_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.gather(mention_emb, step_cl_indices) * tf.expand_dims(att, axis=1), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_806": {
                "input": {
                    "value": "step_cl_m_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.gather(mention_scores, step_cl_indices) * att, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_807": {
                "input": {
                    "value": "step_cl_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([dim_m_init_sid, tf.zeros([max_mention_per_cluster - 1], dtype=tf.int32)], axis=0)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.gather(tf.gather(cl_indices, act_step), tf.range(0, step_cl_size - 1)), dim_m_init_sid, tf.zeros([max_mention_per_cluster - step_cl_size], dtype=tf.int32)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_817": {
                "x": {
                    "value": "step_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(weighted_cluster_scores, step)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "prefiltering_threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.config['prefiltering_threshold']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "range_523": {},
            "range_791": {},
            "expand_dims_809": {
                "input": {
                    "value": "step_sid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cl_sid[_step]",
                            "Subscript"
                        ],
                        [
                            "cl_sid[act_step]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "coref_ops.py": {
        "tensorflow": {
            "load_op_library_7": {
                "variable": {
                    "value": "coref_op_library",
                    "type": "variable",
                    "possible_values": []
                },
                "library_filename": {
                    "value": "./coref_kernels.so",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "evaluate.py": {
        "tensorflow": {
            "ConfigProto_19": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_24": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "extract_bert_features/extract_features.py": {
        "tensorflow": {
            "RunConfig_271": {
                "variable": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": []
                },
                "master": {
                    "value": "FLAGS.master",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tpu_config": {
                    "value": "tf.contrib.tpu.TPUConfig(num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TPUEstimator_312": {
                "variable": {
                    "value": "estimator",
                    "type": "variable",
                    "possible_values": []
                },
                "use_tpu": {
                    "value": "FLAGS.use_tpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "model_fn": {
                    "value": "model_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_fn_builder(bert_config=bert_config, init_checkpoint=FLAGS.init_checkpoint, layer_indexes=layer_indexes, use_tpu=FLAGS.use_tpu, use_one_hot_embeddings=FLAGS.use_one_hot_embeddings)",
                            "Call"
                        ]
                    ]
                },
                "config": {
                    "value": "run_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.RunConfig(master=FLAGS.master, tpu_config=tf.contrib.tpu.TPUConfig(num_shards=FLAGS.num_tpu_cores, per_host_input_for_training=is_per_host))",
                            "Call"
                        ]
                    ]
                },
                "predict_batch_size": {
                    "value": "FLAGS.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_152": {
                "variable": {
                    "value": "tvars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TPUEstimatorSpec_185": {
                "variable": {
                    "value": "output_spec",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": []
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'unique_ids': unique_ids, 'extract_indices': extract_indices}",
                            "Dict"
                        ]
                    ]
                },
                "scaffold_fn": {
                    "value": "scaffold_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tpu_scaffold",
                            "variable"
                        ]
                    ]
                }
            },
            "set_verbosity_261": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_357": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_167": {
                "msg": {
                    "value": "**** Trainable Variables ****",
                    "type": "str",
                    "possible_values": []
                }
            },
            "init_from_checkpoint_165": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "info_172": {
                "msg": {
                    "value": "  name = %s, shape = %s%s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TPUConfig_273": {
                "num_shards": {
                    "value": "FLAGS.num_tpu_cores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "per_host_input_for_training": {
                    "value": "is_per_host",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.tpu.InputPipelineConfig.PER_HOST_V2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "init_from_checkpoint_160": {
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "assignment_map": {
                    "value": "assignment_map",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Scaffold_161": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_116": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_117": {
                "dims": {
                    "value": "[window_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_118": {
                "dims": {
                    "value": "[window_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_119": {
                "dims": {
                    "value": "[window_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_120": {
                "dims": {
                    "value": "[window_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "extract_bert_features/modeling.py": {
        "tensorflow": {
            "list_variables_333": {
                "variable": {
                    "value": "init_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "init_checkpoint",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_361": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "rate": {
                    "value": "1.0 - dropout_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_374": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output_tensor, dropout_prob, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_413": {
                "variable": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "word_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'word_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[vocab_size, embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_427": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_tensor, 1.0 - dropout_prob)",
                            "Call"
                        ],
                        [
                            "tf.matmul(one_hot_input_ids, embedding_table)",
                            "Call"
                        ],
                        [
                            "tf.nn.embedding_lookup(embedding_table, input_ids)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, input_shape[0:-1] + [input_shape[-1] * embedding_size])",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "output + position_embeddings",
                            "BinOp"
                        ],
                        [
                            "layer_norm_and_dropout(output, dropout_prob, is_training=is_training)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(self.__dict__)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape[0:-1] + [input_shape[-1] * embedding_size]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_546": {
                "variable": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(to_mask, [batch_size, 1, to_seq_length])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_554": {
                "variable": {
                    "value": "broadcast_ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_660": {
                "variable": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "from_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(from_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "query_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "query",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_690": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "query_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(from_tensor_2d, num_attention_heads * size_per_head, activation=query_act, name='query', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(query_layer, batch_size, num_attention_heads, from_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "query_layer",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=key_act, name='key', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "transpose_for_scores(key_layer, batch_size, num_attention_heads, to_seq_length, size_per_head)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "multiply_691": {
                "variable": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores * tf.cast(attention_mask, tf.float32) + adder",
                            "BinOp"
                        ],
                        [
                            "attention_scores_layer(from_tensor, to_tensor, attention_mask, num_attention_heads, size_per_head, query_act, key_act, initializer_range, batch_size, from_seq_length, to_seq_length)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 / math.sqrt(float(size_per_head))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_788": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ],
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "value_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "value",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_811": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(query_layer, key_layer, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.multiply(attention_scores, 1.0 / math.sqrt(float(size_per_head)))",
                            "Call"
                        ],
                        [
                            "attention_scores * tf.cast(attention_mask, tf.float32) + adder",
                            "BinOp"
                        ],
                        [
                            "attention_scores_layer(from_tensor, to_tensor, attention_mask, num_attention_heads, size_per_head, query_act, key_act, initializer_range, batch_size, from_seq_length, to_seq_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_815": {
                "variable": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attention_probs, attention_probs_dropout_prob, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "attention_probs_dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_818": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, to_seq_length, num_attention_heads, size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_823": {
                "variable": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_826": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "attention_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(attention_scores)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attention_probs, attention_probs_dropout_prob, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "value_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(to_tensor_2d, num_attention_heads * size_per_head, activation=value_act, name='value', kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_layer, [batch_size, to_seq_length, num_attention_heads, size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.transpose(value_layer, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_829": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1019": {
                "variable": {
                    "value": "dyn_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reshape_1035": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_380": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_411": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_419": {
                "variable": {
                    "value": "flat_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_420": {
                "variable": {
                    "value": "one_hot_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_421": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_input_ids, depth=vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_423": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embedding_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=word_embedding_name, shape=[vocab_size, embedding_size], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_ids, axis=[-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_481": {
                "variable": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "token_type_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'token_type_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[token_type_vocab_size, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_487": {
                "variable": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[batch_size, seq_length], dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_488": {
                "variable": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "flat_token_type_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(token_type_ids, [-1])",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "token_type_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_489": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "one_hot_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(flat_token_type_ids, depth=token_type_vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "token_type_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=token_type_embedding_name, shape=[token_type_vocab_size, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_490": {
                "variable": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "token_type_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(one_hot_ids, token_type_table)",
                            "Call"
                        ],
                        [
                            "tf.reshape(token_type_embeddings, [batch_size, seq_length, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, seq_length, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_less_equal_495": {
                "variable": {
                    "value": "assert_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ],
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "max_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Method Argument"
                        ],
                        [
                            "512",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_625": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length, num_attention_heads, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_628": {
                "variable": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output_tensor, dropout_prob, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_671": {
                "variable": {
                    "value": "key_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "to_tensor_2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ],
                        [
                            "reshape_to_matrix(to_tensor)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_attention_heads * size_per_head",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "key_act",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "key",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_696": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_833": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size * from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_838": {
                "variable": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "context_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(attention_probs, value_layer)",
                            "Call"
                        ],
                        [
                            "tf.transpose(context_layer, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size * from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ],
                        [
                            "tf.reshape(context_layer, [batch_size, from_seq_length, num_attention_heads * size_per_head])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, from_seq_length, num_attention_heads * size_per_head]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1049": {
                "tensor": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_norm(input_tensor, name)",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(output_tensor, dropout_prob, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [batch_size, seq_length, num_attention_heads, width])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output_tensor, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, [-1, width])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "orig_dims + [width]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_167": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, seq_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_497": {
                "variable": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "position_embedding_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'position_embeddings'",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_position_embeddings, width]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "slice_510": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "full_position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name=position_embedding_name, shape=[max_position_embeddings, width], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[seq_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_521": {
                "variable": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "position_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.slice(full_position_embeddings, [0, 0], [seq_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(position_embeddings, position_broadcast_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "position_broadcast_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_547": {
                "tensor": {
                    "value": "to_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reshape(to_mask, [batch_size, 1, to_seq_length]), tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 1, to_seq_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GFile_92": {
                "name": {
                    "value": "json_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "bert",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_230": {
                "variable": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sequence_output[:, 0:1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_231": {
                "variable": {
                    "value": "self.pooled_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "first_token_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(self.sequence_output[:, 0:1, :], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "create_initializer(config.initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "erf_279": {
                "x": {
                    "value": "input_tensor / tf.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_496": {
                "control_inputs": {
                    "value": "[assert_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_919": {
                "name_or_scope": {
                    "value": "'layer_%d' % layer_idx",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_960": {
                "variable": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attention_output, hidden_dropout_prob, training=is_training)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "intermediate_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3072",
                            "Method Argument"
                        ],
                        [
                            "3072",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "intermediate_act_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gelu",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_968": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "intermediate_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(attention_output, intermediate_size, activation=intermediate_act_fn, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_972": {
                "variable": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "layer_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_layer_outputs",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(intermediate_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(layer_output, hidden_dropout_prob, training=is_training)",
                            "Call"
                        ],
                        [
                            "layer_norm(layer_output + attention_output)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "hidden_dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_1075": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_173": {
                "name_or_scope": {
                    "value": "embeddings",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_198": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_227": {
                "name_or_scope": {
                    "value": "pooler",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_701": {
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_705": {
                "x": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(attention_mask, axis=[1])",
                            "Call"
                        ],
                        [
                            "create_attention_mask_from_input_mask(input_ids, input_mask)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_922": {
                "name_or_scope": {
                    "value": "attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_946": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "attention_heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dense_951": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attention_output, hidden_dropout_prob, training=is_training)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "768",
                            "Method Argument"
                        ],
                        [
                            "768",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_955": {
                "variable": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "attention_heads[0]",
                            "Subscript"
                        ],
                        [
                            "tf.concat(attention_heads, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(attention_output, hidden_size, kernel_initializer=create_initializer(initializer_range))",
                            "Call"
                        ],
                        [
                            "tf.layers.dropout(attention_output, hidden_dropout_prob, training=is_training)",
                            "Call"
                        ],
                        [
                            "layer_norm(attention_output + layer_input)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "hidden_dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_959": {
                "name_or_scope": {
                    "value": "intermediate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_967": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sqrt_279": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_924": {
                "name_or_scope": {
                    "value": "self",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_950": {
                "name_or_scope": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "extract_bert_features/tokenization.py": {
        "tensorflow": {
            "GFile_125": {
                "name": {
                    "value": "vocab_file",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "r",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "tensorflow": {
            "Saver_22": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_25": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['log_dir']",
                            "Subscript"
                        ]
                    ]
                },
                "flush_secs": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConfigProto_28": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_41": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['log_dir']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Session_35": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}