{
    "models/wsl_model.py": {
        "sklearn": {
            "average_precision_score_190": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_np[:, cid].astype('float32')",
                            "Call"
                        ],
                        [
                            "target_np[:, cid].astype('float32')",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_np[:, cid].astype('float32')",
                            "Call"
                        ],
                        [
                            "pred_cls - 1e-05 * gt_cls",
                            "BinOp"
                        ],
                        [
                            "output_np[:, cid].astype('float32')",
                            "Call"
                        ],
                        [
                            "pred_cls - 1e-05 * gt_cls",
                            "BinOp"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "roc_auc_score_216": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_np[:, cid].astype('float32')",
                            "Call"
                        ],
                        [
                            "target_np[:, cid].astype('float32')",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred_cls",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_np[:, cid].astype('float32')",
                            "Call"
                        ],
                        [
                            "pred_cls - 1e-05 * gt_cls",
                            "BinOp"
                        ],
                        [
                            "output_np[:, cid].astype('float32')",
                            "Call"
                        ],
                        [
                            "pred_cls - 1e-05 * gt_cls",
                            "BinOp"
                        ]
                    ]
                },
                "average": {
                    "value": "weighted",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "BCEWithLogitsLoss_44": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "datasets/chestxray14_dataset.py": {
        "torch": {}
    },
    "models/utils.py": {
        "torch": {
            "MSELoss_83": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_235": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StepLR_67": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "step_size": {
                    "value": "opts.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "opts.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "L1Loss_85": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_164": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_166": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_14": {
                "num_groups": {
                    "value": "num_groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "num_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Softplus_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LambdaLR_74": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda_rule",
                            "Call"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_127": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_162": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_16": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_45": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "networks/__init__.py": {
        "torch": {
            "DataParallel_10": {
                "variable": {
                    "value": "network",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "network",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.DataParallel(network, device_ids=gpu_ids)",
                            "Call"
                        ],
                        [
                            "DenseNetADA(in_channels=1, growth_rate=32, block_config=(6, 12, 24, 16), num_init_features=64, bn_size=4, drop_rate=0, num_classes=opts.n_class, num_maps=opts.n_maps, kmax=opts.kmax, kmin=opts.kmin, alpha=opts.alpha)",
                            "Call"
                        ],
                        [
                            "DenseNet(in_channels=1, growth_rate=32, block_config=(6, 12, 24, 16), num_init_features=64, bn_size=4, drop_rate=0, num_classes=opts.n_class)",
                            "Call"
                        ],
                        [
                            "network",
                            "Method Argument"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpu_ids",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "networks/networks_classify.py": {
        "torch": {
            "cat_33": {
                "variable": {
                    "value": "concated_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(in_channels, num_init_features, kernel_size=7, stride=2, padding=3, bias=False)), ('norm0', nn.BatchNorm2d(num_init_features)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "14",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_185": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[init_features]",
                            "List"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "[init_features]",
                            "List"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_186": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.spatial_pooling(wildcat_maps)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "flatten_187": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(out, (1, 1))",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ],
                        [
                            "self.classifier(out)",
                            "Call"
                        ],
                        [
                            "F.relu(features, inplace=True)",
                            "Call"
                        ],
                        [
                            "self.spatial_pooling(wildcat_maps)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "concated_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_304": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv0', nn.Conv2d(in_channels, num_init_features, kernel_size=7, stride=2, padding=3, bias=False)), ('norm0', nn.BatchNorm2d(num_init_features)), ('relu0', nn.ReLU(inplace=True)), ('pool0', nn.MaxPool2d(kernel_size=3, stride=2, padding=1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_350": {
                "variable": {
                    "value": "self.brigde",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_classes * num_maps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_368": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[init_features]",
                            "List"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "[init_features]",
                            "List"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_483": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(batch_size, num_outputs, self.num_maps, h, w)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_81": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2(self.relu2(self.norm2(bottleneck_output)))",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(features)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu2(self.norm2(bottleneck_output)))",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(features)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_106": {
                "tensors": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[init_features]",
                            "List"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "[init_features]",
                            "List"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_259": {
                "variable": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv2(self.relu2(self.norm2(bottleneck_output)))",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(features)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu2(self.norm2(bottleneck_output)))",
                            "Call"
                        ],
                        [
                            "F.dropout(new_features, p=self.drop_rate, training=self.training)",
                            "Call"
                        ],
                        [
                            "layer(features)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.drop_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_284": {
                "tensors": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[init_features]",
                            "List"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "[init_features]",
                            "List"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_408": {
                "input": {
                    "value": "input.view(batch_size, num_channels, n)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "out": {
                    "value": "(sorted, indices)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_113": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_output_features",
                            "Method Argument"
                        ],
                        [
                            "num_output_features",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_116": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_168": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_290": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_291": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_292": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_output_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_output_features",
                            "Method Argument"
                        ],
                        [
                            "num_output_features",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_347": {
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ],
                        [
                            "num_init_features",
                            "variable"
                        ],
                        [
                            "num_features + num_layers * growth_rate",
                            "BinOp"
                        ],
                        [
                            "num_features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "BatchNorm2d_18": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_19": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_23": {
                "num_features": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_196": {
                "num_features": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_197": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_198": {
                "in_channels": {
                    "value": "num_input_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ],
                        [
                            "num_input_features",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_201": {
                "num_features": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_202": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_203": {
                "in_channels": {
                    "value": "bn_size * growth_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "growth_rate",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv2d_141": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_143": {
                "num_features": {
                    "value": "num_init_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_144": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_145": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_305": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_init_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_307": {
                "num_features": {
                    "value": "num_init_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_308": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_309": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/utils.py": {
        "torch": {
            "fft_72": {
                "variable": {
                    "value": "fsinogram",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fsinogram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(ramp_filter)",
                            "Call"
                        ],
                        [
                            "fsinogram * np.cos(k * angle_size)",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(fsinogram)",
                            "Call"
                        ],
                        [
                            "fsinogram.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.fft(fsinogram, 1)",
                            "Call"
                        ],
                        [
                            "fsinogram * ramp_filter",
                            "BinOp"
                        ],
                        [
                            "torch.ifft(fsinogram, 1)[..., 0].t()",
                            "Call"
                        ],
                        [
                            "fsinogram[int(filter_length / 2 - detector_length / 2):int(filter_length / 2 + detector_length - detector_length / 2), :]",
                            "Subscript"
                        ],
                        [
                            "fsinogram.numpy()",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_74": {
                "variable": {
                    "value": "fsinogram",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ifft_74": {
                "input": {
                    "value": "fsinogram",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(ramp_filter)",
                            "Call"
                        ],
                        [
                            "fsinogram * np.cos(k * angle_size)",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(fsinogram)",
                            "Call"
                        ],
                        [
                            "fsinogram.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "torch.fft(fsinogram, 1)",
                            "Call"
                        ],
                        [
                            "fsinogram * ramp_filter",
                            "BinOp"
                        ],
                        [
                            "torch.ifft(fsinogram, 1)[..., 0].t()",
                            "Call"
                        ],
                        [
                            "fsinogram[int(filter_length / 2 - detector_length / 2):int(filter_length / 2 + detector_length - detector_length / 2), :]",
                            "Subscript"
                        ],
                        [
                            "fsinogram.numpy()",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "DataLoader_102": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_datasets(opts)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "opts.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opts.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_datasets(opts)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "opts.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_datasets(opts)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "opts.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "DataLoader_102": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_datasets(opts)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "opts.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "opts.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_datasets(opts)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "opts.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_datasets(opts)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "opts.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/datasets.py": {
        "torch": {}
    },
    "utils/grad_cam.py": {
        "torch": {
            "clamp_119": {
                "variable": {
                    "value": "gcam",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gcam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(fmaps[0] * weights[0]).sum(dim=0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(gcam, min=0.0)",
                            "Call"
                        ],
                        [
                            "gcam / gcam.max()",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_111": {
                "input": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._normalize(grads)",
                            "Call"
                        ],
                        [
                            "self._find(self.all_grads, target_layer)",
                            "Call"
                        ],
                        [
                            "grads",
                            "Method Argument"
                        ],
                        [
                            "grads",
                            "Method Argument"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_33": {
                "input": {
                    "value": "self.preds",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_106": {
                "input": {
                    "value": "torch.mean(torch.pow(grads, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_106": {
                "input": {
                    "value": "torch.pow(grads, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_55": {
                "input": {
                    "value": "grad_in[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_74": {
                "input": {
                    "value": "grad_out[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_106": {
                "input": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._normalize(grads)",
                            "Call"
                        ],
                        [
                            "self._find(self.all_grads, target_layer)",
                            "Call"
                        ],
                        [
                            "grads",
                            "Method Argument"
                        ],
                        [
                            "grads",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}