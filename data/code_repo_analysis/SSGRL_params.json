{
    "datasets/vgdataset.py": {
        "torch": {}
    },
    "datasets/voc07dataset.py": {
        "torch": {}
    },
    "datasets/voc12dataset.py": {
        "torch": {}
    },
    "element_wise_layer.py": {
        "torch": {
            "Parameter_13": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features, out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input * self.weight",
                            "BinOp"
                        ],
                        [
                            "torch.sum(x, 2)",
                            "Call"
                        ],
                        [
                            "x + self.bias",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(in_features)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "ggnn.py": {
        "torch": {
            "Linear_17": {
                "variable": {
                    "value": "self.fc_eq3_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_18": {
                "variable": {
                    "value": "self.fc_eq3_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc_eq4_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc_eq4_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_21": {
                "variable": {
                    "value": "self.fc_eq5_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * input_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc_eq5_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_33": {
                "variable": {
                    "value": "av",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.bmm(batch_in_matrix, batch_aog_nodes), torch.bmm(batch_out_matrix, batch_aog_nodes))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_39": {
                "variable": {
                    "value": "zv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_eq3_w(av) + self.fc_eq3_u(flatten_aog_nodes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_42": {
                "variable": {
                    "value": "rv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_eq4_w(av) + self.fc_eq3_u(flatten_aog_nodes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_45": {
                "variable": {
                    "value": "hv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_eq5_w(av) + self.fc_eq5_u(rv * flatten_aog_nodes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_33": {
                "input": {
                    "value": "batch_out_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._out_matrix.repeat(batch_size, 1).view(batch_size, node_num, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "batch_aog_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(batch_size, node_num, self.input_dim)",
                            "Call"
                        ],
                        [
                            "flatten_aog_nodes.view(batch_size, node_num, -1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "main.py": {
        "torch": {}
    },
    "models.py": {
        "torch": {
            "Linear_38": {
                "variable": {
                    "value": "self.fc_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * self.image_feature_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(graph_net_feature.view(batch_size * self.num_classes, -1), graph_net_input.view(-1, self.image_feature_dim))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_51": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((graph_net_feature.view(batch_size * self.num_classes, -1), graph_net_input.view(-1, self.image_feature_dim)), 1)",
                            "Call"
                        ],
                        [
                            "self.fc_output(output)",
                            "Call"
                        ],
                        [
                            "torch.tanh(output)",
                            "Call"
                        ],
                        [
                            "output.contiguous().view(batch_size, self.num_classes, self.output_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_46": {
                "data": {
                    "value": "self._word_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "np.load(self.word_features).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "ndarray": {
                    "value": "_in_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(_in_matrix), requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "_out_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat.T.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "Variable(torch.from_numpy(_out_matrix), requires_grad=False).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "networks/resnet.py": {
        "torch": {
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inplanes",
                            "Method Argument"
                        ],
                        [
                            "inplanes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ],
                        [
                            "planes",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * self.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_106": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_112": {
                "variable": {
                    "value": "self.avgpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_130": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "semantic.py": {
        "torch": {
            "Linear_14": {
                "variable": {
                    "value": "self.fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.image_feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.intermediary_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fc_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.word_feature_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.intermediary_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.fc_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.intermediary_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.intermediary_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.fc_a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.intermediary_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_22": {
                "input": {
                    "value": "img_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(torch.transpose(img_feature_map, 1, 2), 2, 3)",
                            "Call"
                        ],
                        [
                            "img_feature_map.view(batch_size, convsize, convsize, 1, self.image_feature_dim).repeat(1, 1, 1, self.num_classes, 1) * coefficient",
                            "BinOp"
                        ],
                        [
                            "img_feature_map",
                            "Method Argument"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_29": {
                "input": {
                    "value": "coefficient.view(batch_size, convsize, convsize, self.num_classes)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "coefficient",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "coefficient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_a(lb_feature)",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(coefficient.view(batch_size, convsize, convsize, self.num_classes), 2, 3), 1, 2).view(batch_size, self.num_classes, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(coefficient, dim=2)",
                            "Call"
                        ],
                        [
                            "coefficient.view(batch_size, self.num_classes, convsize, convsize)",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(coefficient, 1, 2), 2, 3)",
                            "Call"
                        ],
                        [
                            "coefficient.view(batch_size, convsize, convsize, self.num_classes, 1).repeat(1, 1, 1, 1, self.image_feature_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_33": {
                "input": {
                    "value": "coefficient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc_a(lb_feature)",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(coefficient.view(batch_size, convsize, convsize, self.num_classes), 2, 3), 1, 2).view(batch_size, self.num_classes, -1)",
                            "Call"
                        ],
                        [
                            "F.softmax(coefficient, dim=2)",
                            "Call"
                        ],
                        [
                            "coefficient.view(batch_size, self.num_classes, convsize, convsize)",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.transpose(coefficient, 1, 2), 2, 3)",
                            "Call"
                        ],
                        [
                            "coefficient.view(batch_size, convsize, convsize, self.num_classes, 1).repeat(1, 1, 1, 1, self.image_feature_dim)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_36": {
                "input": {
                    "value": "img_feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.transpose(torch.transpose(img_feature_map, 1, 2), 2, 3)",
                            "Call"
                        ],
                        [
                            "img_feature_map.view(batch_size, convsize, convsize, 1, self.image_feature_dim).repeat(1, 1, 1, self.num_classes, 1) * coefficient",
                            "BinOp"
                        ],
                        [
                            "img_feature_map",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_27": {
                "input": {
                    "value": "f_wh_feature * f_wd_feature",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/load_pretrain_model.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "resnet_pretrained",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrain_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/transforms.py": {
        "torch": {
            "DataLoader_44": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CoCoDataset(train_dir, train_anno, train_data_transform, train_label)",
                            "Call"
                        ],
                        [
                            "VGDataset(train_dir, train_anno, train_data_transform, train_label)",
                            "Call"
                        ],
                        [
                            "Voc07Dataset(train_dir, train_anno, train_data_transform, train_label)",
                            "Call"
                        ],
                        [
                            "Voc12Dataset(train_dir, train_anno, train_data_transform, train_label)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_48": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CoCoDataset(test_dir, test_anno, test_data_transform, test_label)",
                            "Call"
                        ],
                        [
                            "VGDataset(test_dir, test_anno, test_data_transform, test_label)",
                            "Call"
                        ],
                        [
                            "Voc07Dataset(test_dir, test_anno, test_data_transform, test_label)",
                            "Call"
                        ],
                        [
                            "Voc12Dataset(test_dir, test_anno, test_data_transform, test_label)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}