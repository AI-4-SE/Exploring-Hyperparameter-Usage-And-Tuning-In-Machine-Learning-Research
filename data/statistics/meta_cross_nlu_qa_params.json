{
    "nlu/main_pre_en.py": {
        "sklearn": {
            "precision_score_71": {
                "variable": {
                    "value": "intent_prec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_72": {
                "variable": {
                    "value": "intent_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_73": {
                "variable": {
                    "value": "intent_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_76": {
                "variable": {
                    "value": "slot_prec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_77": {
                "variable": {
                    "value": "slot_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_78": {
                "variable": {
                    "value": "slot_f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_415": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_158": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(output_model_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_415": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_212": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(output_model_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_297": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(output_model_file)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_377": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(output_model_file)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nlu/meta_learner_l2l.py": {
        "sklearn": {
            "precision_score_283": {
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_284": {
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_285": {
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_356": {
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_357": {
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_358": {
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_288": {
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_289": {
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_290": {
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_361": {
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_362": {
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_363": {
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Adam_36": {
                "variable": {
                    "value": "self.inner_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.base_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.alpha_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_37": {
                "variable": {
                    "value": "self.tune_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.base_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.gamma_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_317": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nlu/meta_learner_l2l_no_acc.py": {
        "sklearn": {
            "precision_score_273": {
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_274": {
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_275": {
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_346": {
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_347": {
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_348": {
                "y_true": {
                    "value": "intents_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "intents_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_278": {
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_279": {
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_280": {
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_score_351": {
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_352": {
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "f1_score_353": {
                "y_true": {
                    "value": "slots_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "slots_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Adam_36": {
                "variable": {
                    "value": "self.inner_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.base_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.alpha_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_37": {
                "variable": {
                    "value": "self.tune_optim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.base_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.gamma_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nlu/proto_main.py": {
        "sklearn": {
            "PCA_23": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_129": {
                "variable": {
                    "value": "intent_prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "intent_mean_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "SummaryWriter_200": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(out_dir, 'runs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_159": {
                "variable": {
                    "value": "slot_prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "slot_mean_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_243": {
                "variable": {
                    "value": "base_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pre_trained_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_trained_model_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_264": {
                "variable": {
                    "value": "triplet_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.trans_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_device_443": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_116": {
                "variable": {
                    "value": "torch_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intent_proto_dict[intent]",
                            "Subscript"
                        ],
                        [
                            "slot_proto_dict[slot]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_117": {
                "variable": {
                    "value": "intent_proto_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(embed_list)",
                            "Call"
                        ],
                        [
                            "torch.stack(embed_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_119": {
                "variable": {
                    "value": "intent_proto_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_145": {
                "variable": {
                    "value": "torch_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intent_proto_dict[intent]",
                            "Subscript"
                        ],
                        [
                            "slot_proto_dict[slot]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_146": {
                "variable": {
                    "value": "slot_proto_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(embed_list)",
                            "Call"
                        ],
                        [
                            "torch.stack(embed_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "slot_proto_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_count_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_281": {
                "variable": {
                    "value": "all_inp_ids_anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_291": {
                "variable": {
                    "value": "all_inp_ids_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp_ids_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_301": {
                "variable": {
                    "value": "all_inp_ids_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_inp_ids_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_inp_ids_neg, dim=0).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_310": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_positive - distance_negative + 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_367": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_338": {
                "variable": {
                    "value": "prototypes[proto_type][pc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tuple(repeat(prototypes[proto_type][pc], len(device_ids)))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nlu/proto_main_l2l.py": {
        "sklearn": {
            "PCA_21": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "intent_prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "intent_mean_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "SummaryWriter_208": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(out_dir, 'runs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_334": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt_config['alpha_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'epoch': args.epoch, 'n_task': args.n_task, 'n_up_train_step': args.n_up_train_step, 'n_up_test_step': args.n_up_test_step, 'alpha_lr': args.alpha_lr, 'beta_lr': args.beta_lr, 'gamma_lr': args.gamma_lr}",
                            "Dict"
                        ],
                        [
                            "opt_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_155": {
                "variable": {
                    "value": "slot_prototypes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "slot_mean_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_253": {
                "variable": {
                    "value": "base_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pre_trained_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pre_trained_model_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SGD_274": {
                "variable": {
                    "value": "triplet_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.trans_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_427": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_112": {
                "variable": {
                    "value": "torch_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intent_proto_dict[intent]",
                            "Subscript"
                        ],
                        [
                            "slot_proto_dict[slot]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_113": {
                "variable": {
                    "value": "intent_proto_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(embed_list)",
                            "Call"
                        ],
                        [
                            "torch.stack(embed_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_115": {
                "variable": {
                    "value": "intent_proto_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_count_231": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_244": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_429": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "torch_tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embed_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intent_proto_dict[intent]",
                            "Subscript"
                        ],
                        [
                            "slot_proto_dict[slot]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_142": {
                "variable": {
                    "value": "slot_proto_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(embed_list)",
                            "Call"
                        ],
                        [
                            "torch.stack(embed_list)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_144": {
                "variable": {
                    "value": "slot_proto_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_291": {
                "variable": {
                    "value": "all_inp_ids_anchor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_301": {
                "variable": {
                    "value": "all_inp_ids_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inp_ids_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_311": {
                "variable": {
                    "value": "all_inp_ids_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_inp_ids_neg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_inp_ids_neg, dim=0).cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_320": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_positive - distance_negative + 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_count_246": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qa/data_utils.py": {
        "tensorflow": {
            "TensorShape_429": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_430": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_431": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_432": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_435": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_436": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_437": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_438": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_439": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_371": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "variable": {
                    "value": "all_attention_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.attention_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_373": {
                "variable": {
                    "value": "all_token_type_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.token_type_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_374": {
                "variable": {
                    "value": "all_cls_index",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.cls_index for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_375": {
                "variable": {
                    "value": "all_p_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.p_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_376": {
                "variable": {
                    "value": "all_langs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.langs for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_379": {
                "variable": {
                    "value": "all_example_index",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_380": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_384": {
                "variable": {
                    "value": "all_start_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.start_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_385": {
                "variable": {
                    "value": "all_end_positions",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.end_position for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_386": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_618": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "l_input_ids_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_629": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "l_input_ids_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_641": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.stack(l_input_ids_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_647": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.stack(l_input_ids_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_811": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "l_input_ids_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_822": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "l_input_ids_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_834": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.stack(l_input_ids_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_840": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.stack(l_input_ids_s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_620": {
                "data": {
                    "value": "l_attention_masks_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_621": {
                "data": {
                    "value": "l_token_type_ids_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_622": {
                "data": {
                    "value": "l_all_cls_index_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_623": {
                "data": {
                    "value": "l_p_mask_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_624": {
                "data": {
                    "value": "l_langs_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_625": {
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_626": {
                "data": {
                    "value": "l_start_positions_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_627": {
                "data": {
                    "value": "l_end_positions_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_631": {
                "data": {
                    "value": "l_attention_masks_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_632": {
                "data": {
                    "value": "l_token_type_ids_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_633": {
                "data": {
                    "value": "l_all_cls_index_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_634": {
                "data": {
                    "value": "l_p_mask_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_635": {
                "data": {
                    "value": "l_langs_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_636": {
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_637": {
                "data": {
                    "value": "l_start_positions_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_638": {
                "data": {
                    "value": "l_end_positions_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_642": {
                "tensors": {
                    "value": "l_token_type_ids_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_643": {
                "tensors": {
                    "value": "l_langs_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_644": {
                "tensors": {
                    "value": "l_token_type_ids_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_645": {
                "tensors": {
                    "value": "l_langs_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_648": {
                "tensors": {
                    "value": "l_token_type_ids_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_649": {
                "tensors": {
                    "value": "l_cls_index_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_650": {
                "tensors": {
                    "value": "l_attention_masks_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_651": {
                "tensors": {
                    "value": "l_end_positions_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_652": {
                "tensors": {
                    "value": "l_langs_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_813": {
                "data": {
                    "value": "l_attention_masks_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_814": {
                "data": {
                    "value": "l_token_type_ids_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_815": {
                "data": {
                    "value": "l_all_cls_index_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_816": {
                "data": {
                    "value": "l_p_mask_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_817": {
                "data": {
                    "value": "l_langs_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_818": {
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_819": {
                "data": {
                    "value": "l_start_positions_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_820": {
                "data": {
                    "value": "l_end_positions_spt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_824": {
                "data": {
                    "value": "l_attention_masks_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_825": {
                "data": {
                    "value": "l_token_type_ids_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_826": {
                "data": {
                    "value": "l_all_cls_index_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_827": {
                "data": {
                    "value": "l_p_mask_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_828": {
                "data": {
                    "value": "l_langs_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_829": {
                "start": {
                    "value": "all_input_ids.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_830": {
                "data": {
                    "value": "l_start_positions_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_831": {
                "data": {
                    "value": "l_end_positions_qry",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_835": {
                "tensors": {
                    "value": "l_token_type_ids_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_836": {
                "tensors": {
                    "value": "l_langs_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_837": {
                "tensors": {
                    "value": "l_token_type_ids_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_838": {
                "tensors": {
                    "value": "l_langs_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_841": {
                "tensors": {
                    "value": "l_token_type_ids_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_842": {
                "tensors": {
                    "value": "l_cls_index_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_843": {
                "tensors": {
                    "value": "l_attention_masks_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_844": {
                "tensors": {
                    "value": "l_end_positions_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_845": {
                "tensors": {
                    "value": "l_langs_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "nlu/base_model.py": {
        "torch": {
            "Dropout_14": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.intent_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "trans_model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_intents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_intents",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_20": {
                "variable": {
                    "value": "self.intent_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_75": {
                "variable": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_84": {
                "variable": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.slot_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "trans_model.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_slots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nlu/crf.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self.transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_tags, num_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.start_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.stop_transitions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_tags)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_179": {
                "tensors": {
                    "value": "tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tag]",
                            "List"
                        ],
                        [
                            "tags",
                            "Method Argument"
                        ],
                        [
                            "tags",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_24": {
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_tags",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_27": {
                "*size": {
                    "value": "num_tags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_tags",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "nlu/data_utils.py": {
        "torch": {}
    },
    "nlu/main.py": {
        "torch": {
            "device_20": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "SummaryWriter_101": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(args.out_dir, 'runs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_266": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt_config['alpha_lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'epoch': args.epoch, 'n_task': args.n_task, 'n_up_train_step': args.n_up_train_step, 'n_up_test_step': args.n_up_test_step, 'alpha_lr': args.alpha_lr, 'beta_lr': args.beta_lr, 'gamma_lr': args.gamma_lr}",
                            "Dict"
                        ],
                        [
                            "opt_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_422": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_162": {
                "variable": {
                    "value": "pretrained_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "pre_trained_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.out_dir, args.pre_trained_model_name)",
                            "Call"
                        ],
                        [
                            "pre_trained_model_path",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_423": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_all_424": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_count_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_390": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "str(output_model_file)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nlu/meta_reader.py": {
        "torch": {}
    },
    "qa/main_fine_tune.py": {
        "torch": {
            "RandomSampler_107": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squad_convert_examples_to_features(examples=train_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squad_convert_examples_to_features(examples=train_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "fine_tune_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'pre_train_steps': args.pre_train_steps, 'batch_size': args.batch_size, 'adam_lr': args.adam_lr, 'adam_eps': args.adam_eps, 'gradient_accumulation_steps': args.gradient_accumulation_steps, 'warmup_steps': args.warmup_steps, 'max_grad_norm': args.max_grad_norm, 'save_steps': args.save_steps, 'weight_decay': args.weight_decay, 'logging_steps': args.logging_steps, 'eval_batch_size': args.eval_batch_size, 'n_best_size': args.n_best_size, 'max_answer_length': args.max_seq_length}",
                            "Dict"
                        ],
                        [
                            "fine_tune_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_332": {
                "variable": {
                    "value": "devices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_361": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(out_dir, 'runs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RandomSampler_240": {
                "variable": {
                    "value": "fine_tune_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "fine_tune_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squad_convert_examples_to_features(examples=fine_tune_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_241": {
                "variable": {
                    "value": "fine_tune_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "fine_tune_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squad_convert_examples_to_features(examples=fine_tune_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "fine_tune_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(fine_tune_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "fine_tune_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'pre_train_steps': args.pre_train_steps, 'batch_size': args.batch_size, 'adam_lr': args.adam_lr, 'adam_eps': args.adam_eps, 'gradient_accumulation_steps': args.gradient_accumulation_steps, 'warmup_steps': args.warmup_steps, 'max_grad_norm': args.max_grad_norm, 'save_steps': args.save_steps, 'weight_decay': args.weight_decay, 'logging_steps': args.logging_steps, 'eval_batch_size': args.eval_batch_size, 'n_best_size': args.n_best_size, 'max_answer_length': args.max_seq_length}",
                            "Dict"
                        ],
                        [
                            "fine_tune_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_331": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_366": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_367": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_370": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_135": {
                "variable": {
                    "value": "model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pre_trained_model_name + 'pytorch_model.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_335": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_369": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_131": {
                "f": {
                    "value": "os.path.join(args.pre_trained_model_name, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_132": {
                "f": {
                    "value": "os.path.join(args.pre_trained_model_name, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__290": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "fine_tune_config['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_309": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_arguments()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_312": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_313": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_366": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__183": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "fine_tune_config['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_202": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_arguments()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_206": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "qa/main_pre_en.py": {
        "torch": {
            "RandomSampler_107": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squad_convert_examples_to_features(examples=train_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squad_convert_examples_to_features(examples=train_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "fine_tune_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "fine_tune_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_216": {
                "variable": {
                    "value": "devices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_257": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(out_dir, 'runs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_215": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_262": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_263": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_266": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_219": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_265": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__174": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "fine_tune_config['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_193": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_arguments()",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_197": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qa/main_trans_ada.py": {
        "torch": {
            "RandomSampler_174": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squad_convert_examples_to_features(examples=train_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squad_convert_examples_to_features(examples=train_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "fine_tune_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'pre_train_steps': args.pre_train_steps, 'batch_size': args.batch_size, 'adam_lr': args.adam_lr, 'adam_eps': args.adam_eps, 'gradient_accumulation_steps': args.gradient_accumulation_steps, 'warmup_steps': args.warmup_steps, 'max_grad_norm': args.max_grad_norm, 'save_steps': args.save_steps, 'weight_decay': args.weight_decay, 'logging_steps': args.logging_steps, 'eval_batch_size': args.eval_batch_size, 'n_best_size': args.n_best_size, 'max_answer_length': args.max_seq_length}",
                            "Dict"
                        ],
                        [
                            "fine_tune_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomSampler_285": {
                "variable": {
                    "value": "fst_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "few_shot_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meta_squad_convert_examples_to_features(spt_examples=spt_examples, qry_examples=qry_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, opt_config=opt_config, data_config=data_config, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_286": {
                "variable": {
                    "value": "fst_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "few_shot_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meta_squad_convert_examples_to_features(spt_examples=spt_examples, qry_examples=qry_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, opt_config=opt_config, data_config=data_config, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "fst_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(few_shot_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt_config['n_task']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'epoch': args.epoch, 'n_task': args.n_task, 'n_up_train_step': args.n_up_train_step, 'n_up_test_step': args.n_up_test_step, 'alpha_lr': args.alpha_lr, 'beta_lr': args.beta_lr, 'gamma_lr': args.gamma_lr, 'batch_sz': args.batch_sz}",
                            "Dict"
                        ],
                        [
                            "opt_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_437": {
                "variable": {
                    "value": "devices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_476": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(out_dir, 'runs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_199": {
                "variable": {
                    "value": "model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pre_trained_model_name + 'pytorch_model.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RandomSampler_292": {
                "variable": {
                    "value": "ada_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "ada_few_shot_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meta_squad_convert_examples_to_features(spt_examples=tune_spt_examples, qry_examples=tune_qry_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, opt_config=opt_config, data_config=data_config, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_293": {
                "variable": {
                    "value": "ada_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ada_few_shot_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meta_squad_convert_examples_to_features(spt_examples=tune_spt_examples, qry_examples=tune_qry_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, opt_config=opt_config, data_config=data_config, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "ada_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(ada_few_shot_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt_config['n_task']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'epoch': args.epoch, 'n_task': args.n_task, 'n_up_train_step': args.n_up_train_step, 'n_up_test_step': args.n_up_test_step, 'alpha_lr': args.alpha_lr, 'beta_lr': args.beta_lr, 'gamma_lr': args.gamma_lr, 'batch_sz': args.batch_sz}",
                            "Dict"
                        ],
                        [
                            "opt_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_436": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_481": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_482": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_485": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_440": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_484": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_195": {
                "f": {
                    "value": "os.path.join(args.pre_trained_model_name, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_196": {
                "f": {
                    "value": "os.path.join(args.pre_trained_model_name, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_412": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Namespace(**vars(base_args), **vars(meta_args))",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_415": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_416": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__247": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "fine_tune_config['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_266": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Namespace(**vars(base_args), **vars(meta_args))",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_270": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_481": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qa/main_trans_ada_no_acc.py": {
        "torch": {
            "RandomSampler_176": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squad_convert_examples_to_features(examples=train_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_177": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squad_convert_examples_to_features(examples=train_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "fine_tune_config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'pre_train_steps': args.pre_train_steps, 'batch_size': args.batch_size, 'adam_lr': args.adam_lr, 'adam_eps': args.adam_eps, 'gradient_accumulation_steps': args.gradient_accumulation_steps, 'warmup_steps': args.warmup_steps, 'max_grad_norm': args.max_grad_norm, 'save_steps': args.save_steps, 'weight_decay': args.weight_decay, 'logging_steps': args.logging_steps, 'eval_batch_size': args.eval_batch_size, 'n_best_size': args.n_best_size, 'max_answer_length': args.max_seq_length}",
                            "Dict"
                        ],
                        [
                            "fine_tune_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RandomSampler_288": {
                "variable": {
                    "value": "fst_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "few_shot_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meta_squad_convert_examples_to_features(spt_examples=spt_examples, qry_examples=qry_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, opt_config=opt_config, data_config=data_config, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_289": {
                "variable": {
                    "value": "fst_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "few_shot_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meta_squad_convert_examples_to_features(spt_examples=spt_examples, qry_examples=qry_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, opt_config=opt_config, data_config=data_config, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "fst_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(few_shot_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt_config['n_task']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'epoch': args.epoch, 'n_task': args.n_task, 'n_up_train_step': args.n_up_train_step, 'n_up_test_step': args.n_up_test_step, 'alpha_lr': args.alpha_lr, 'beta_lr': args.beta_lr, 'gamma_lr': args.gamma_lr, 'batch_sz': args.batch_sz}",
                            "Dict"
                        ],
                        [
                            "opt_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_count_426": {
                "variable": {
                    "value": "devices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SummaryWriter_465": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(out_dir, 'runs')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_201": {
                "variable": {
                    "value": "model_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pre_trained_model_name + 'pytorch_model.bin'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RandomSampler_296": {
                "variable": {
                    "value": "ada_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "ada_few_shot_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meta_squad_convert_examples_to_features(spt_examples=tune_spt_examples, qry_examples=tune_qry_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, opt_config=opt_config, data_config=data_config, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_297": {
                "variable": {
                    "value": "ada_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ada_few_shot_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "meta_squad_convert_examples_to_features(spt_examples=tune_spt_examples, qry_examples=tune_qry_examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, opt_config=opt_config, data_config=data_config, is_training=True, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "ada_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RandomSampler(ada_few_shot_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt_config['n_task']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{'epoch': args.epoch, 'n_task': args.n_task, 'n_up_train_step': args.n_up_train_step, 'n_up_test_step': args.n_up_test_step, 'alpha_lr': args.alpha_lr, 'beta_lr': args.beta_lr, 'gamma_lr': args.gamma_lr, 'batch_sz': args.batch_sz}",
                            "Dict"
                        ],
                        [
                            "opt_config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_425": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_470": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_471": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_474": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_429": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_473": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_197": {
                "f": {
                    "value": "os.path.join(args.pre_trained_model_name, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_198": {
                "f": {
                    "value": "os.path.join(args.pre_trained_model_name, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_401": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_arguments() + get_meta_arguments()",
                            "BinOp"
                        ],
                        [
                            "Namespace(**vars(base_args), **vars(meta_args))",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_404": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_405": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__249": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "fine_tune_config['max_grad_norm']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_268": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_arguments() + get_meta_arguments()",
                            "BinOp"
                        ],
                        [
                            "Namespace(**vars(base_args), **vars(meta_args))",
                            "Call"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ],
                        [
                            "args",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_271": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_272": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_470": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qa/pre_compute_similarities.py": {
        "torch": {
            "device_count_75": {
                "variable": {
                    "value": "devices",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_108": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_109": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_112": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_77": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_111": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qa/roberta.py": {
        "torch": {
            "Embedding_50": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_51": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "self.padding_idx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_89": {
                "variable": {
                    "value": "position_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "sequence_length + self.padding_idx + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs_embeds.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_303": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_306": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_307": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_487": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_488": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_575": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_576": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_626": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_627": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_628": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_634": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dense(features)",
                            "Call"
                        ],
                        [
                            "gelu(x)",
                            "Call"
                        ],
                        [
                            "self.layer_norm(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(x) + self.bias",
                            "BinOp"
                        ],
                        [
                            "features[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.dense(x)",
                            "Call"
                        ],
                        [
                            "torch.tanh(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.out_proj(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_688": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_291": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_524": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_607": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_730": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cumsum_76": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.ne(self.padding_idx).long()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_393": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_396": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "qa/utils.py": {
        "torch": {
            "SequentialSampler_132": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squad_convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=False, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ],
                        [
                            "dataset_json['data']",
                            "Subscript"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "squad_convert_examples_to_features(examples=examples, tokenizer=tokenizer, max_seq_length=args.max_seq_length, doc_stride=args.doc_stride, max_query_length=args.max_query_length, is_training=False, return_dataset='pt', threads=8, lang2id=lang2id)",
                            "Call"
                        ],
                        [
                            "dataset_json['data']",
                            "Subscript"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}