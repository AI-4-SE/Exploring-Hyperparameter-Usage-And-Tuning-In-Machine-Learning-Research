{
    "code/oodMetrics.py": {
        "sklearn": {
            "precision_recall_curve_19": {
                "variable": {
                    "value": "(precision, recall, pr_thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_gt",
                            "Method Argument"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "average_precision_score_20": {
                "variable": {
                    "value": "average_precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_gt",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "precision_recall_curve_23": {
                "variable": {
                    "value": "(precision_reverse, recall_reverse, pr_reverse_thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "1 - y_gt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "-y_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "roc_curve_25": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_gt",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "auc_26": {
                "variable": {
                    "value": "auc_area",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(y_gt, y_pred)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(y_gt, y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_27": {
                "variable": {
                    "value": "aupr_in_area",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision_recall_curve(y_gt, y_pred)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision_recall_curve(y_gt, y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "auc_28": {
                "variable": {
                    "value": "aupr_out_area",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recall_reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision_recall_curve(1 - y_gt, -y_pred)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "precision_reverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "precision_recall_curve(1 - y_gt, -y_pred)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/train.py": {
        "sklearn": {
            "f1_score_989": {
                "variable": {
                    "value": "dev_macro_f1_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_gt_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(dev_batch_gt_list).numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "dev_pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(dev_batch_pred_list).numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "precision_recall_fscore_support_992": {
                "variable": {
                    "value": "precision_recall_fscore_support_statistics",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "dev_gt_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(dev_batch_gt_list).numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "dev_pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(dev_batch_pred_list).numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "f1_score_1012": {
                "variable": {
                    "value": "test_macro_f1_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_gt_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(test_batch_gt_list).numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(test_batch_pred_list).numpy()",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "NearestNeighbors_564": {
                "variable": {
                    "value": "model.neigh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LocalOutlierFactor_568": {
                "variable": {
                    "value": "model.neigh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "contamination": {
                    "value": "args.contamination",
                    "type": "Attribute",
                    "possible_values": []
                },
                "novelty": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_55": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(args.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_217": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reductionString",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'mean'",
                            "str"
                        ],
                        [
                            "'none'",
                            "str"
                        ]
                    ]
                }
            },
            "Adam_221": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_54": {
                "device": {
                    "value": "args.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_60": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_182": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume_snapshot",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(args.gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiMarginLoss_219": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_223": {
                "variable": {
                    "value": "opt_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "gen_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.gen_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_224": {
                "variable": {
                    "value": "opt_disc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "disc_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.disc_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_225": {
                "variable": {
                    "value": "opt_lm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "lm_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_226": {
                "variable": {
                    "value": "opt_mirror",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mirror_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_230": {
                "variable": {
                    "value": "config.freq_list_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_184": {
                "variable": {
                    "value": "lm_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume_snapshot[:-3] + '_lm' + args.resume_snapshot[-3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(args.gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_186": {
                "variable": {
                    "value": "mirror_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume_snapshot[:-3] + '_mirror' + args.resume_snapshot[-3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(args.gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_188": {
                "variable": {
                    "value": "gen_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume_snapshot[:-3] + '_gen' + args.resume_snapshot[-3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(args.gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_189": {
                "variable": {
                    "value": "disc_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume_snapshot[:-3] + '_disc' + args.resume_snapshot[-3:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(args.gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_357": {
                "variable": {
                    "value": "mixed_answer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_359": {
                "variable": {
                    "value": "mixed_answer_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixed_answer_shifted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mixed_answer + 1e-08",
                            "BinOp"
                        ]
                    ]
                }
            },
            "nll_loss_360": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixed_answer_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.log(mixed_answer_shifted)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "batch.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_421": {
                "variable": {
                    "value": "weightNorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.out.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_422": {
                "variable": {
                    "value": "weightNormDeviation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weightNorm * weightNorm - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_429": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss * (1 - oodLabel)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_cache_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_231": {
                "input": {
                    "value": "config.freq_list_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_253": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_347": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_364": {
                "variable": {
                    "value": "reg_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixed_answer[:, args.ood_index] * torch.log(confidence + 1e-08) + (1 - mixed_answer[:, args.ood_index]) * torch.log(1 - confidence + 1e-08)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nll_loss_372": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "batch.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_452": {
                "variable": {
                    "value": "answerClone",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[answerClone[:, :args.ood_index], answerClone[:, args.ood_index + 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_453": {
                "variable": {
                    "value": "answer_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answerClone",
                    "type": "variable",
                    "possible_values": [
                        [
                            "answer.clone()",
                            "Call"
                        ],
                        [
                            "torch.cat([answerClone[:, :args.ood_index], answerClone[:, args.ood_index + 1:]], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_460": {
                "variable": {
                    "value": "aux_H_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_H_loss_across_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1 * answer_log_probs.mean(dim=1)",
                            "BinOp"
                        ],
                        [
                            "aux_H_loss_across_examples * oodLabel",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_598": {
                "variable": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model.mu_maha_count",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_621": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_931": {
                "variable": {
                    "value": "dev_pred_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dev_batch_pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_932": {
                "variable": {
                    "value": "dev_gt_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dev_batch_gt_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "empty_cache_958": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_232": {
                "input": {
                    "value": "config.freq_list_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_232": {
                "input": {
                    "value": "torch.sqrt(config.freq_list_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_355": {
                "input": {
                    "value": "answerOOD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_368": {
                "variable": {
                    "value": "reg_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mixed_answer[:, args.ood_index] * confidence",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_430": {
                "input": {
                    "value": "1 - oodLabel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_487": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.resume_snapshot, map_location=device)",
                            "Call"
                        ],
                        [
                            "IntentClassifier(config, init_tuple=init_tuple)",
                            "Call"
                        ],
                        [
                            "IntentClassifierGenerative(config, init_tuple=init_tuple)",
                            "Call"
                        ],
                        [
                            "BareLSTMEncoder(config)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "snapshot_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snapshot_prefix + '_acc_{:.4f}_loss_{:.6f}_iter_{}_model.pt'.format(train_acc, loss.item(), iterations)",
                            "BinOp"
                        ],
                        [
                            "snapshot_prefix + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pinverse_617": {
                "variable": {
                    "value": "model.sigma_maha_shared_inverse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "model.sigma_maha_shared + args.covar_smooth",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_619": {
                "variable": {
                    "value": "model.sigma_maha_shared_inverse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "model.sigma_maha_shared_inverse.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(args.gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_631": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_934": {
                "variable": {
                    "value": "dev_maxP_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dev_batch_maxP_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_935": {
                "variable": {
                    "value": "dev_maxP_gt_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dev_batch_maxP_gt_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_981": {
                "variable": {
                    "value": "test_pred_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_batch_pred_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_982": {
                "variable": {
                    "value": "test_gt_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "test_batch_gt_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cross_entropy_376": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_scores.contiguous().view(-1, args.n_embed)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "batch.hypothesis.contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_382": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_scores.contiguous().view(-1, args.n_embed)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "batch.hypothesis.contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_390": {
                "variable": {
                    "value": "loss_lm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_scores_lm.contiguous().view(-1, args.n_embed)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "lm_batch.hypothesis.contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_402": {
                "variable": {
                    "value": "loss_mirror",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_scores_mirror.contiguous().view(-1, args.n_embed)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "mirror_batch.hypothesis.contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_461": {
                "input": {
                    "value": "oodLabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch.label == args.ood_index).long()",
                            "Call"
                        ],
                        [
                            "(batch.label == args.ood_index).float()",
                            "Call"
                        ],
                        [
                            "(batch.label == args.ood_index).long()",
                            "Call"
                        ],
                        [
                            "(batch.label == args.ood_index).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_505": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "isThisLabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(train_batch.label == L).float()",
                            "Call"
                        ],
                        [
                            "isThisLabel.to(train_batch.label.device)",
                            "Call"
                        ],
                        [
                            "(train_batch.label == L).float()",
                            "Call"
                        ],
                        [
                            "isThisLabel.to(train_batch.label.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_590": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "isThisLabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(train_batch.label == L).float()",
                            "Call"
                        ],
                        [
                            "isThisLabel.to(train_batch.label.device)",
                            "Call"
                        ],
                        [
                            "(train_batch.label == L).float()",
                            "Call"
                        ],
                        [
                            "isThisLabel.to(train_batch.label.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_605": {
                "variable": {
                    "value": "intermediate_mean_shifted_outer_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate_mean_shifted.view((a, b, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "intermediate_mean_shifted.view((a, 1, b))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_918": {
                "variable": {
                    "value": "dev_batch_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "dev_batch.label.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dev_batch.label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_962": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_1034": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.resume_snapshot, map_location=device)",
                            "Call"
                        ],
                        [
                            "IntentClassifier(config, init_tuple=init_tuple)",
                            "Call"
                        ],
                        [
                            "IntentClassifierGenerative(config, init_tuple=init_tuple)",
                            "Call"
                        ],
                        [
                            "BareLSTMEncoder(config)",
                            "Call"
                        ],
                        [
                            "model",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "snapshot_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snapshot_prefix + '_acc_{:.4f}_loss_{:.6f}_iter_{}_model.pt'.format(train_acc, loss.item(), iterations)",
                            "BinOp"
                        ],
                        [
                            "snapshot_prefix + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_366": {
                "input": {
                    "value": "(mixed_answer[:, args.ood_index] - confidence) * (mixed_answer[:, args.ood_index] - confidence)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_396": {
                "variable": {
                    "value": "loss_lm_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_scores_lm_diff.contiguous().view(-1, args.n_embed)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "batch.hypothesis.contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_431": {
                "input": {
                    "value": "1 - oodLabel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_575": {
                "data": {
                    "value": "answer_list_calibration",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x[2] for x in tupled_list[:calibration_count]]",
                            "ListComp"
                        ],
                        [
                            "np.concatenate(answer_list_calibration, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reciprocal_609": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(model.label_ratio)",
                            "Call"
                        ],
                        [
                            "model.mu_maha_count[train_batch.label].detach()",
                            "Call"
                        ],
                        [
                            "args.d_out * (Z - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.reciprocal(Z)",
                            "Call"
                        ],
                        [
                            "Z.view(-1, 1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_612": {
                "variable": {
                    "value": "intermediate_mean_shifted_outer_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate_mean_shifted_outer_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(intermediate_mean_shifted.view((a, b, 1)), intermediate_mean_shifted.view((a, 1, b)))",
                            "Call"
                        ],
                        [
                            "Z.expand_as(intermediate_mean_shifted_outer_product) * intermediate_mean_shifted_outer_product",
                            "BinOp"
                        ],
                        [
                            "torch.sum(intermediate_mean_shifted_outer_product, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(intermediate_mean_shifted_outer_product, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_615": {
                "variable": {
                    "value": "intermediate_mean_shifted_outer_product",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediate_mean_shifted_outer_product",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(intermediate_mean_shifted.view((a, b, 1)), intermediate_mean_shifted.view((a, 1, b)))",
                            "Call"
                        ],
                        [
                            "Z.expand_as(intermediate_mean_shifted_outer_product) * intermediate_mean_shifted_outer_product",
                            "BinOp"
                        ],
                        [
                            "torch.sum(intermediate_mean_shifted_outer_product, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sum(intermediate_mean_shifted_outer_product, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_674": {
                "variable": {
                    "value": "dev_batch_maxP",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lof_result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-model.neigh.score_samples(intermediateRepnNumpy)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "nll_loss_930": {
                "variable": {
                    "value": "dev_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "dev_batch.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_980": {
                "variable": {
                    "value": "test_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "test_batch.label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_1041": {
                "obj": {
                    "value": "mirror_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.resume_snapshot[:-3] + '_mirror' + args.resume_snapshot[-3:], map_location=device)",
                            "Call"
                        ],
                        [
                            "IntentClassifierGenerative(config, init_tuple=init_tuple)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "snapshot_path_mirror",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snapshot_path[:-3] + '_mirror' + snapshot_path[-3:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_1044": {
                "obj": {
                    "value": "lm_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.resume_snapshot[:-3] + '_lm' + args.resume_snapshot[-3:], map_location=device)",
                            "Call"
                        ],
                        [
                            "VVUL(config, args.vvul_size)",
                            "Call"
                        ],
                        [
                            "BareLSTMEncoder(config)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "snapshot_path_lm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snapshot_path[:-3] + '_lm' + snapshot_path[-3:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_1047": {
                "obj": {
                    "value": "gen_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Gen(config, init_tuple=init_tuple)",
                            "Call"
                        ],
                        [
                            "torch.load(args.resume_snapshot[:-3] + '_gen' + args.resume_snapshot[-3:], map_location=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "snapshot_path_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snapshot_path[:-3] + '_gen' + snapshot_path[-3:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_1049": {
                "obj": {
                    "value": "disc_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Disc(config, init_tuple=init_tuple)",
                            "Call"
                        ],
                        [
                            "torch.load(args.resume_snapshot[:-3] + '_disc' + args.resume_snapshot[-3:], map_location=device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "snapshot_path_disc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "snapshot_path[:-3] + '_disc' + snapshot_path[-3:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_364": {
                "input": {
                    "value": "1 - confidence + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_462": {
                "input": {
                    "value": "oodLabel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch.label == args.ood_index).long()",
                            "Call"
                        ],
                        [
                            "(batch.label == args.ood_index).float()",
                            "Call"
                        ],
                        [
                            "(batch.label == args.ood_index).long()",
                            "Call"
                        ],
                        [
                            "(batch.label == args.ood_index).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_694": {
                "variable": {
                    "value": "dev_batch_maxP",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "disagreements",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(ppnf_labels != predicted_labels[:, None]).astype(int)",
                            "Call"
                        ],
                        [
                            "neigh_sims * disagreements",
                            "BinOp"
                        ],
                        [
                            "np.mean(disagreements, axis=1) * np.reciprocal(np.sum(neigh_sims, axis=1))",
                            "BinOp"
                        ],
                        [
                            "np.mean(disagreements, axis=1)",
                            "Call"
                        ],
                        [
                            "np.greater(disagreements.reshape(-1, 1), disagreements_calibration.reshape(1, -1)).astype(int)",
                            "Call"
                        ],
                        [
                            "np.mean(disagreements, axis=1)",
                            "Call"
                        ],
                        [
                            "(ppnf_labels != predicted_labels[:, None]).astype(int)",
                            "Call"
                        ],
                        [
                            "neigh_sims * disagreements",
                            "BinOp"
                        ],
                        [
                            "np.mean(disagreements, axis=1) * np.reciprocal(np.sum(neigh_sims, axis=1))",
                            "BinOp"
                        ],
                        [
                            "np.mean(disagreements, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_40": {
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_593": {
                "input": {
                    "value": "intermediateRepn * isThisLabel.unsqueeze(dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_416": {
                "input": {
                    "value": "loss_class_from_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gen_model.sample_batch(batch.hypothesis, disc_model=disc_model, reduction=args.gen_reduction, class_model=class_model)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_699": {
                "variable": {
                    "value": "loss_lm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.contiguous().view(-1, args.n_embed)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "dev_batch.hypothesis.contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_724": {
                "variable": {
                    "value": "dev_prob_complement",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - torch.max(F.softmax(answer / T + 1e-08, dim=1), 1)[0].view(dev_batch.label.size())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_696": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_738": {
                "variable": {
                    "value": "loss_lm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_scores_lm.contiguous().view(-1, args.n_embed)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "dev_batch.hypothesis.contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logsumexp_746": {
                "variable": {
                    "value": "dev_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_749": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_scores.contiguous().view(-1, args.n_embed)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "dev_batch.hypothesis.contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_344": {
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logsumexp_713": {
                "input": {
                    "value": "log_probs_disc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "disc_model(dev_batch.hypothesis, log_prob=True, T=args.oodT)",
                            "Call"
                        ],
                        [
                            "log_probs_disc[:, :, 0]",
                            "Subscript"
                        ],
                        [
                            "log_probs_disc * is_not_pad_mask + (1 - is_not_pad_mask) * -300000.0",
                            "BinOp"
                        ],
                        [
                            "torch.logsumexp(log_probs_disc, dim=0) - torch.log(torch.sum(is_not_pad_mask, dim=0))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_713": {
                "input": {
                    "value": "torch.sum(is_not_pad_mask, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsumexp_744": {
                "variable": {
                    "value": "dev_log_prob_mirror",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer_mirror[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_747": {
                "variable": {
                    "value": "dev_log_prob_scramble",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer_scramble[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_784": {
                "variable": {
                    "value": "eucl_distances_accumulated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediateRepn_per_label_mean_shifted_collapsed.view(a, 1, b)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "intermediateRepn_per_label_mean_shifted_collapsed.view(a, b, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_791": {
                "variable": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_803": {
                "variable": {
                    "value": "maha_distances_intermediate",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediateRepn_per_label_mean_shifted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermediateRepn.unsqueeze(dim=1) - model.mu_maha.unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "intermediateRepn.unsqueeze(dim=1) - model.mu_maha.unsqueeze(dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "model.sigma_maha_shared_inverse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bmm_807": {
                "variable": {
                    "value": "maha_distances_accumulated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maha_distances_intermediate_collapsed.view((a, 1, b))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "intermediateRepn_per_label_mean_shifted_collapsed.view((a, b, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_916": {
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_972": {
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_713": {
                "input": {
                    "value": "is_not_pad_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(batch.hypothesis.contiguous().view(-1) != args.pad_id).float()",
                            "Call"
                        ],
                        [
                            "(lm_batch.hypothesis.contiguous().view(-1) != args.pad_id).float()",
                            "Call"
                        ],
                        [
                            "(dev_batch.hypothesis.contiguous().view(-1) != args.pad_id).float()",
                            "Call"
                        ],
                        [
                            "(dev_batch.hypothesis.contiguous() != args.pad_id).float()",
                            "Call"
                        ],
                        [
                            "(dev_batch.hypothesis.contiguous().view(-1) != args.pad_id).float()",
                            "Call"
                        ],
                        [
                            "(dev_batch.hypothesis.contiguous().view(-1) != args.pad_id).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_786": {
                "variable": {
                    "value": "eucl_distances_accumulated",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "intermediateRepn_per_label_mean_shifted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intermediateRepn.unsqueeze(dim=1) - model.mu_maha.unsqueeze(dim=0)",
                            "BinOp"
                        ],
                        [
                            "intermediateRepn.unsqueeze(dim=1) - model.mu_maha.unsqueeze(dim=0)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_813": {
                "variable": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_792": {
                "input": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparsemax(answer / T + 1e-08)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(answerList[0].size(), device=answerList[0].device)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T + 1e-08, dim=1)",
                            "Call"
                        ],
                        [
                            "dev_prob + 0.1 * probList[-1]",
                            "BinOp"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer[:, 1:] / T + 1e-08, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_822": {
                "variable": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "answerList[0].size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "answerList[0].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_832": {
                "variable": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_845": {
                "variable": {
                    "value": "tentropies",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tentropies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(tentropies, device=answer.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "answer.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_723": {
                "input": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparsemax(answer / T + 1e-08)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(answerList[0].size(), device=answerList[0].device)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T + 1e-08, dim=1)",
                            "Call"
                        ],
                        [
                            "dev_prob + 0.1 * probList[-1]",
                            "BinOp"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer[:, 1:] / T + 1e-08, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_795": {
                "input": {
                    "value": "eucl_similarities_accumulated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-eucl_distances_accumulated",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_814": {
                "input": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparsemax(answer / T + 1e-08)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(answerList[0].size(), device=answerList[0].device)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T + 1e-08, dim=1)",
                            "Call"
                        ],
                        [
                            "dev_prob + 0.1 * probList[-1]",
                            "BinOp"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer[:, 1:] / T + 1e-08, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_848": {
                "variable": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer / T + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_923": {
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_976": {
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_682": {
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_724": {
                "input": {
                    "value": "F.softmax(answer / T + 1e-08, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_817": {
                "input": {
                    "value": "maha_similarities_accumulated",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-maha_distances_accumulated",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_724": {
                "input": {
                    "value": "answer / T + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_825": {
                "input": {
                    "value": "answer / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_859": {
                "variable": {
                    "value": "dev_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_860": {
                "variable": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_862": {
                "variable": {
                    "value": "dev_H",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-dev_plogp",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_853": {
                "input": {
                    "value": "1 - dev_batch_maxP + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_856": {
                "input": {
                    "value": "answer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(batch)",
                            "Call"
                        ],
                        [
                            "model(batch, inferAll=False)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(train_batch)",
                            "Call"
                        ],
                        [
                            "model(dev_batch, addNoise=True)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(dev_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(dev_batch)",
                            "Call"
                        ],
                        [
                            "model.infer_generative(test_batch, answer_old)",
                            "Call"
                        ],
                        [
                            "model(test_batch)",
                            "Call"
                        ],
                        [
                            "answerList",
                            "variable"
                        ],
                        [
                            "answer",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_856": {
                "input": {
                    "value": "F.softmax(answer + 1e-08, dim=1) * answer",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_865": {
                "variable": {
                    "value": "dev_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer[:, 1:] / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_869": {
                "variable": {
                    "value": "dev_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_870": {
                "variable": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_833": {
                "input": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparsemax(answer / T + 1e-08)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(answerList[0].size(), device=answerList[0].device)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T + 1e-08, dim=1)",
                            "Call"
                        ],
                        [
                            "dev_prob + 0.1 * probList[-1]",
                            "BinOp"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer[:, 1:] / T + 1e-08, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_849": {
                "input": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparsemax(answer / T + 1e-08)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(answerList[0].size(), device=answerList[0].device)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T + 1e-08, dim=1)",
                            "Call"
                        ],
                        [
                            "dev_prob + 0.1 * probList[-1]",
                            "BinOp"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer[:, 1:] / T + 1e-08, dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_856": {
                "input": {
                    "value": "answer + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_874": {
                "variable": {
                    "value": "dev_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_876": {
                "variable": {
                    "value": "dev_kld_leading_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(model.label_ratio + 1e-08) * model.label_ratio",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_866": {
                "input": {
                    "value": "dev_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.logsumexp(answer[:, 1:], dim=1)",
                            "Call"
                        ],
                        [
                            "-loss",
                            "UnaryOp"
                        ],
                        [
                            "dev_log_prob - dev_back_log_prob",
                            "BinOp"
                        ],
                        [
                            "dev_log_prob - dev_log_prob_mirror",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(answer[:, 1:] / T, dim=1)",
                            "Call"
                        ],
                        [
                            "-dev_log_prob_scramble",
                            "UnaryOp"
                        ],
                        [
                            "dev_log_prob - dev_log_prob_scramble",
                            "BinOp"
                        ],
                        [
                            "dev_log_prob - 0.5 * dev_log_prob_scramble + 0.5 * dev_back_log_prob",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "dev_log_prob - 0.5 * dev_log_prob_scramble + 0.5 * dev_log_prob_mirror",
                            "BinOp"
                        ],
                        [
                            "F.log_softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(answer / T, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_881": {
                "variable": {
                    "value": "dev_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_882": {
                "variable": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_883": {
                "variable": {
                    "value": "dev_plogp_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dev_prob * dev_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_884": {
                "variable": {
                    "value": "dev_M_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dev_M_prob + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_885": {
                "variable": {
                    "value": "dev_M_plogp_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dev_M_prob * dev_M_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_871": {
                "input": {
                    "value": "args.d_out * dev_prob - dev_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_875": {
                "input": {
                    "value": "model.label_ratio.squeeze(0).expand_as(dev_log_prob) * dev_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_889": {
                "variable": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer[:, 1:] / T + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_876": {
                "input": {
                    "value": "model.label_ratio + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_880": {
                "input": {
                    "value": "answer / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_900": {
                "*size": {
                    "value": "(args.d_out - 1, args.d_out - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_900": {
                "n": {
                    "value": "args.d_out - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_905": {
                "*size": {
                    "value": "dev_prob.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_891": {
                "*size": {
                    "value": "dev_prob.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_895": {
                "input": {
                    "value": "dev_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sparsemax(answer / T + 1e-08)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.zeros(answerList[0].size(), device=answerList[0].device)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T + 1e-08, dim=1)",
                            "Call"
                        ],
                        [
                            "dev_prob + 0.1 * probList[-1]",
                            "BinOp"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer / T, dim=1)",
                            "Call"
                        ],
                        [
                            "F.softmax(answer[:, 1:] / T + 1e-08, dim=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code/model.py": {
        "torch": {
            "LSTM_29": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.d_proj if config.projection else config.d_embed",
                            "IfExp"
                        ],
                        [
                            "config.d_proj if config.projection else config.d_embed",
                            "IfExp"
                        ],
                        [
                            "self.h_size",
                            "Attribute"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "config.d_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "config.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ],
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ],
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ],
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "config.birnn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_47": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.d_proj if config.projection else config.d_embed",
                            "IfExp"
                        ],
                        [
                            "config.d_proj if config.projection else config.d_embed",
                            "IfExp"
                        ],
                        [
                            "self.h_size",
                            "Attribute"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "config.d_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "config.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ],
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ],
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ],
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "config.birnn",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "shifted_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, outputs[:-1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_77": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.d_proj if config.projection else config.d_embed",
                            "IfExp"
                        ],
                        [
                            "config.d_proj if config.projection else config.d_embed",
                            "IfExp"
                        ],
                        [
                            "self.h_size",
                            "Attribute"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.d_proj if config.projection else config.d_embed",
                            "IfExp"
                        ],
                        [
                            "config.d_proj if config.projection else config.d_embed",
                            "IfExp"
                        ],
                        [
                            "self.h_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ],
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ],
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ],
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_80": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "shifted_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h0, outputs[:-1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_106": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.d_proj if config.projection else config.d_embed",
                            "IfExp"
                        ],
                        [
                            "config.d_proj if config.projection else config.d_embed",
                            "IfExp"
                        ],
                        [
                            "self.h_size",
                            "Attribute"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.d_proj if config.projection else config.d_embed",
                            "IfExp"
                        ],
                        [
                            "config.d_proj if config.projection else config.d_embed",
                            "IfExp"
                        ],
                        [
                            "self.h_size",
                            "Attribute"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ],
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ],
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ],
                        [
                            "0 if config.n_layers == 1 else config.dp_ratio",
                            "IfExp"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_109": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.h_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_119": {
                "variable": {
                    "value": "shifted_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h0, outputs[:-1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_133": {
                "variable": {
                    "value": "replacement_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "len(inputs.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "tuple(batch.hypothesis.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "batch.hypothesis.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.hypothesis.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_154": {
                "variable": {
                    "value": "self.label_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.d_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_155": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_158": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dp_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_159": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_173": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(self.config.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_175": {
                "variable": {
                    "value": "self.prior_counts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.config.d_out,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "categorical_counts",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch.label.size()[0], self.config.d_out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_243": {
                "variable": {
                    "value": "infer_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "answer.contiguous().view(-1, self.config.n_embed)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "expanded_hypothesis.contiguous().view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_259": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_271": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dp_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_272": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_317": {
                "variable": {
                    "value": "self.inhibitor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_331": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(self.config.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_332": {
                "variable": {
                    "value": "self.label_ratio",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.config.d_out,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(config.gpu))",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(self.config.gpu))",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(self.config.gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "shifted_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shifted_outputs, inputs_labels.expand(shifted_outputs.size()[0], -1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_136": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(config.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_189": {
                "variable": {
                    "value": "self.prior_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prior_counts / self.Z + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_280": {
                "variable": {
                    "value": "self.intermediate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(*lin_config)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_292": {
                "variable": {
                    "value": "self.pre_embedding_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Linear(seq_in_size, config.n_embed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_307": {
                "variable": {
                    "value": "self.outSeq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.outSeq",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_321": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(self.config.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_322": {
                "variable": {
                    "value": "self.mu_maha_count",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.config.d_out,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(config.gpu))",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(self.config.gpu))",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(self.config.gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_327": {
                "variable": {
                    "value": "self.mu_maha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.config.d_out, space_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(config.gpu))",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(self.config.gpu))",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(self.config.gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_328": {
                "variable": {
                    "value": "self.sigma_maha_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(space_size, space_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(config.gpu))",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(self.config.gpu))",
                            "Call"
                        ],
                        [
                            "torch.device('cuda:{}'.format(self.config.gpu))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_375": {
                "variable": {
                    "value": "mixCoeffs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mixLayer(intermediateRepn)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_376": {
                "variable": {
                    "value": "scoresSeq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scoresSeq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(scoresSeq, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_378": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.add_(1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reciprocal_392": {
                "variable": {
                    "value": "weightNorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.norm(self.out.weight, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_398": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(scores[:, :self.config.ood_index], onesVector, scores[:, self.config.ood_index + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_184": {
                "input": {
                    "value": "categorical_counts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((batch.label.size()[0], self.config.d_out), device=self.device).scatter_(1, batch.label.unsqueeze(1), 1.0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_233": {
                "variable": {
                    "value": "inf_logits_list",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inf_logits_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(inf_logits_list, dim=0).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_317": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reciprocal_381": {
                "variable": {
                    "value": "scoresNorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1e-08 + torch.norm(intermediateRepn, dim=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_381": {
                "variable": {
                    "value": "scoresNorm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_131": {
                "*size": {
                    "value": "batch.hypothesis.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.hypothesis.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_135": {
                "input": {
                    "value": "config.freq_list_tensor.unsqueeze(dim=0).expand((batch.hypothesis.size()[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "batch.hypothesis.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_167": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_263": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_369": {
                "variable": {
                    "value": "inputMask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "scoresSeq[k].size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "scoresSeq[k].device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_372": {
                "variable": {
                    "value": "Zsum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scoresSeq[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reciprocal_373": {
                "variable": {
                    "value": "Z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Zsum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(scoresSeq[k], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_392": {
                "input": {
                    "value": "self.out.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_196": {
                "*size": {
                    "value": "hypo_embed.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hypo_embed.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hypo_embed.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_342": {
                "*size": {
                    "value": "hypo_embed.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hypo_embed.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "hypo_embed.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_365": {
                "input": {
                    "value": "self.outSeq[k](intermediateRepn)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_367": {
                "input": {
                    "value": "self.outSeq[k](hypothesis)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_397": {
                "*size": {
                    "value": "scores.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "scores.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_211": {
                "*size": {
                    "value": "batch.label.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.label.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "batch.label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_222": {
                "*size": {
                    "value": "batch.label.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "batch.label.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "batch.label.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_381": {
                "input": {
                    "value": "intermediateRepn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.intermediate(hypothesis)",
                            "Call"
                        ],
                        [
                            "self.shared_embedding_layer(self.pre_embedding_layer(intermediateRepn))",
                            "Call"
                        ],
                        [
                            "hypothesis",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/model_gan.py": {
        "torch": {
            "device_27": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(self.config.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_31": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dp_ratio",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_38": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_39": {
                "variable": {
                    "value": "self.start_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.share_out_embed",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "shifted_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, outputs[:-1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "all_ended",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[1]",
                            "Subscript"
                        ],
                        [
                            "batch.size(1) if not custom else sample_size",
                            "IfExp"
                        ],
                        [
                            "inputs.size()[1]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_172": {
                "variable": {
                    "value": "sampled_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_283": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(self.config.gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_289": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.n_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_290": {
                "variable": {
                    "value": "self.start_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_301": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.input_smoother",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_size, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_48": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.enc_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_78": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(shifted_outputs)",
                            "Call"
                        ],
                        [
                            "self.out(shifted_outputs)",
                            "Call"
                        ],
                        [
                            "self.forward(batch)",
                            "Call"
                        ],
                        [
                            "logits.view(L * B, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "state_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_142": {
                "variable": {
                    "value": "out_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_152": {
                "variable": {
                    "value": "out_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(ht)",
                            "Call"
                        ],
                        [
                            "out_logits.squeeze(dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_228": {
                "variable": {
                    "value": "log_probs_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "F.log_softmax(logits / T, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_249": {
                "variable": {
                    "value": "returns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "rewards.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_299": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.d_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.n_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self.enc_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_323": {
                "variable": {
                    "value": "shifted_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h1, outputs[:-1, :, :])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_326": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_345": {
                "variable": {
                    "value": "loss_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(shifted_outputs)",
                            "Call"
                        ],
                        [
                            "self.out(shifted_outputs)",
                            "Call"
                        ],
                        [
                            "self.forward(batch)",
                            "Call"
                        ],
                        [
                            "logits.view(L * B, 2)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(L * B, device=self.device).long() * broad_label",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_348": {
                "variable": {
                    "value": "loss_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(logits, target, reduction='none')",
                            "Call"
                        ],
                        [
                            "loss_value.view(L, B)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss_value)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, target, reduction='none')",
                            "Call"
                        ],
                        [
                            "loss_value.view(L, B)",
                            "Call"
                        ],
                        [
                            "loss_value.sum(dim=0).mean(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_365": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "state_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[1]",
                            "Subscript"
                        ],
                        [
                            "batch.size(1) if not custom else sample_size",
                            "IfExp"
                        ],
                        [
                            "inputs.size()[1]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "state_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_132": {
                "*size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_133": {
                "*size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_148": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(out_logits + 1e-08, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_186": {
                "variable": {
                    "value": "class_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits / self.config.genT",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_221": {
                "variable": {
                    "value": "baseline_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "disc_model.get_rewards_from_probs(disc_probs)",
                            "Call"
                        ],
                        [
                            "rewards",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_234": {
                "variable": {
                    "value": "overall_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(shifted_rewards * log_probs_tensor, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_305": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size()[1]",
                            "Subscript"
                        ],
                        [
                            "batch.size(1) if not custom else sample_size",
                            "IfExp"
                        ],
                        [
                            "inputs.size()[1]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_329": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits / T + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_341": {
                "*size": {
                    "value": "L * B",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_350": {
                "variable": {
                    "value": "loss_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.out(shifted_outputs)",
                            "Call"
                        ],
                        [
                            "self.out(shifted_outputs)",
                            "Call"
                        ],
                        [
                            "self.forward(batch)",
                            "Call"
                        ],
                        [
                            "logits.view(L * B, 2)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(L * B, device=self.device).long() * broad_label",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_367": {
                "variable": {
                    "value": "h0",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "state_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_139": {
                "input": {
                    "value": "all_ended",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, device=self.device).long()",
                            "Call"
                        ],
                        [
                            "all_ended + (action == self.config.eos_id).long()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_236": {
                "variable": {
                    "value": "overall_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shifted_rewards * log_probs_tensor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_293": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_144": {
                "input": {
                    "value": "all_ended",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(batch_size, device=self.device).long()",
                            "Call"
                        ],
                        [
                            "all_ended + (action == self.config.eos_id).long()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_156": {
                "*size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_191": {
                "variable": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits / self.config.genT",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_192": {
                "variable": {
                    "value": "class_prob_diff_with_uniform_squared",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_prob - 1.0 / label_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_207": {
                "input": {
                    "value": "class_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.config.seq_gan_class_beta * torch.mean(class_log_prob, dim=1)",
                            "BinOp"
                        ],
                        [
                            "class_H.detach()",
                            "Call"
                        ],
                        [
                            "self.config.seq_gan_class_beta * -torch.mean(class_prob_diff_with_uniform_squared, dim=1)",
                            "BinOp"
                        ],
                        [
                            "self.config.seq_gan_class_beta * -emd_distance",
                            "BinOp"
                        ],
                        [
                            "self.config.seq_gan_class_beta * torch.sum(-class_prob * class_log_prob, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_234": {
                "input": {
                    "value": "shifted_rewards * log_probs_tensor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "*size": {
                    "value": "state_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ],
                        [
                            "(self.n_layers, batch_size, self.hidden_size)",
                            "Tuple"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_188": {
                "input": {
                    "value": "class_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(class_logits / self.config.genT, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_196": {
                "variable": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits / self.config.genT",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_204": {
                "variable": {
                    "value": "class_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "class_logits / self.config.genT",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_216": {
                "input": {
                    "value": "class_H",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.config.seq_gan_class_beta * torch.mean(class_log_prob, dim=1)",
                            "BinOp"
                        ],
                        [
                            "class_H.detach()",
                            "Call"
                        ],
                        [
                            "self.config.seq_gan_class_beta * -torch.mean(class_prob_diff_with_uniform_squared, dim=1)",
                            "BinOp"
                        ],
                        [
                            "self.config.seq_gan_class_beta * -emd_distance",
                            "BinOp"
                        ],
                        [
                            "self.config.seq_gan_class_beta * torch.sum(-class_prob * class_log_prob, dim=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_193": {
                "input": {
                    "value": "class_prob_diff_with_uniform_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(class_prob - 1.0 / label_size, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_197": {
                "*size": {
                    "value": "class_prob.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "class_prob.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_198": {
                "*size": {
                    "value": "(label_size, label_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_198": {
                "n": {
                    "value": "label_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "class_logits.size(1)",
                            "Call"
                        ],
                        [
                            "class_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_205": {
                "input": {
                    "value": "-class_prob * class_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "code/wasserstein.py": {
        "torch": {
            "exp_22": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.cost / self.lam",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_73": {
                "variable": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.cost / self.lam",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_97": {
                "variable": {
                    "value": "log_v_max",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_98": {
                "variable": {
                    "value": "v_stab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_v - log_v_max.expand_as(log_v)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_100": {
                "variable": {
                    "value": "wnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_u + logcostpart1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_100": {
                "variable": {
                    "value": "wnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_90": {
                "variable": {
                    "value": "log_u_max",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_91": {
                "variable": {
                    "value": "u_stab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_u - log_u_max.expand_as(log_u)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_93": {
                "variable": {
                    "value": "log_v_max",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_94": {
                "variable": {
                    "value": "v_stab",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_v - log_v_max.expand_as(log_v)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_48": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lam * u.log() / nbatch",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "log_u * self.lam",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).unsqueeze(dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).unsqueeze(dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "grad / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_49": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lam * u.log() / nbatch",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "log_u * self.lam",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).unsqueeze(dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).unsqueeze(dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "grad / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_85": {
                "input": {
                    "value": "target + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_99": {
                "input": {
                    "value": "self.eps + torch.mm(self.KM, v_stab.t()).t()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_103": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lam * u.log() / nbatch",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "log_u * self.lam",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).unsqueeze(dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).unsqueeze(dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "grad / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_103": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_104": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lam * u.log() / nbatch",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "log_u * self.lam",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).unsqueeze(dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "grad - torch.mean(grad, dim=1).unsqueeze(dim=1).expand_as(grad)",
                            "BinOp"
                        ],
                        [
                            "grad / batch_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_104": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_37": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cost.new(nbatch, self.na).fill_(1.0 / self.na)",
                            "Call"
                        ],
                        [
                            "pred / torch.mm(v, self.K)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.K.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_38": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target / torch.mm(u, self.K.t())",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_92": {
                "input": {
                    "value": "self.eps + torch.mm(self.K.t(), u_stab.t()).t()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_95": {
                "input": {
                    "value": "self.eps + torch.mm(self.K, v_stab.t()).t()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_97": {
                "input": {
                    "value": "log_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cost.new(batch_size, self.nb).fill_(-np.log(self.nb + self.eps))",
                            "Call"
                        ],
                        [
                            "log_b - torch.log(self.eps + torch.mm(self.K.t(), u_stab.t()).t()) - log_u_max.expand_as(log_v)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_99": {
                "input": {
                    "value": "self.KM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v_stab.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_90": {
                "input": {
                    "value": "log_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cost.new(batch_size, self.na).fill_(-np.log(self.na + self.eps))",
                            "Call"
                        ],
                        [
                            "log_a - torch.log(self.eps + torch.mm(self.K, v_stab.t()).t()) - log_v_max.expand_as(log_u)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_93": {
                "input": {
                    "value": "log_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cost.new(batch_size, self.nb).fill_(-np.log(self.nb + self.eps))",
                            "Call"
                        ],
                        [
                            "log_b - torch.log(self.eps + torch.mm(self.K.t(), u_stab.t()).t()) - log_u_max.expand_as(log_v)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_46": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target / torch.mm(u, self.K.t())",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.KM.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_92": {
                "input": {
                    "value": "self.K.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "u_stab.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_95": {
                "input": {
                    "value": "self.K",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "v_stab.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}