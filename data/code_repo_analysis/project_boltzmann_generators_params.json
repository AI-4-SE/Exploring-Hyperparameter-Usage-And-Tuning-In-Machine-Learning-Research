{
    "latent_mcmc_pt/invertible_wu.py": {
        "tensorflow": {
            "reduce_mean_465": {
                "variable": {
                    "value": "Jmean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.log_det_Jzx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_466": {
                "variable": {
                    "value": "Jdev",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(self.log_det_Jzx - Jmean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_473": {
                "variable": {
                    "value": "Jmean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.log_det_Jxz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_474": {
                "variable": {
                    "value": "Jdev",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(self.log_det_Jxz - Jmean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_482": {
                "variable": {
                    "value": "LL1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "J[:trajlength] - 0.5 / std ** 2 * tf.reduce_sum(self.output_z[:trajlength] ** 2, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_483": {
                "variable": {
                    "value": "LL2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "J[trajlength:] - 0.5 / std ** 2 * tf.reduce_sum(self.output_z[trajlength:] ** 2, axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_734": {
                "variable": {
                    "value": "log_pacc_0_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[np.array([0], dtype=np.float32), log_pacc]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_735": {
                "variable": {
                    "value": "log_pacc__0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[log_pacc, np.array([0], dtype=np.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_144": {
                "x": {
                    "value": "self.log_scaling_factors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_439": {
                "input_tensor": {
                    "value": "log_det_Jxzs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_453": {
                "input_tensor": {
                    "value": "log_det_Jzxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_484": {
                "input_tensor": {
                    "value": "[LL1, LL2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_740": {
                "variable": {
                    "value": "d_0_",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[np.array([0], dtype=np.float32), d]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_741": {
                "variable": {
                    "value": "d__0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[d, np.array([0], dtype=np.float32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_436": {
                "shape": {
                    "value": "(self.output_z.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_450": {
                "shape": {
                    "value": "(self.output_x.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_689": {
                "input_tensor": {
                    "value": "z1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_690": {
                "input_tensor": {
                    "value": "z2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_720": {
                "input_tensor": {
                    "value": "z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_730": {
                "x": {
                    "value": "1 + tf.exp(arg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_165": {
                "input_tensor": {
                    "value": "self.log_scaling_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_173": {
                "input_tensor": {
                    "value": "-self.log_scaling_factors",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_459": {
                "input_tensor": {
                    "value": "self.output_z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_703": {
                "x": {
                    "value": "1 + tf.exp(arg1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_706": {
                "x": {
                    "value": "1 + tf.exp(arg)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_117": {
                "x": {
                    "value": "self.log_scaling_factors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_126": {
                "x": {
                    "value": "-self.log_scaling_factors",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_482": {
                "input_tensor": {
                    "value": "self.output_z[:trajlength] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_483": {
                "input_tensor": {
                    "value": "self.output_z[trajlength:] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_730": {
                "x": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linlogcut(F2 - F1, 10, 1000, tf=True)",
                            "Call"
                        ],
                        [
                            "linlogcut(F[1:] - F[:-1], 10, 1000, tf=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_703": {
                "x": {
                    "value": "arg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linlogcut(F2 - F1, 10, 1000, tf=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_706": {
                "x": {
                    "value": "arg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linlogcut(F2 - F1, 10, 1000, tf=True)",
                            "Call"
                        ],
                        [
                            "linlogcut(F[1:] - F[:-1], 10, 1000, tf=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_166": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Szx(z)",
                            "Call"
                        ],
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.layers[i].connect_zx(z)",
                            "Call"
                        ],
                        [
                            "np.vstack([trajs[0][np.random.choice(I, size=batch_size)], trajs[1][np.random.choice(I, size=batch_size)]])",
                            "Call"
                        ],
                        [
                            "ensure_traj(x)",
                            "Call"
                        ],
                        [
                            "self.TzxJ.predict(z)",
                            "Call"
                        ],
                        [
                            "self.output_x",
                            "Attribute"
                        ],
                        [
                            "self.output_x",
                            "Attribute"
                        ],
                        [
                            "self.output_x",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_174": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Szx(z)",
                            "Call"
                        ],
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.layers[i].connect_zx(z)",
                            "Call"
                        ],
                        [
                            "np.vstack([trajs[0][np.random.choice(I, size=batch_size)], trajs[1][np.random.choice(I, size=batch_size)]])",
                            "Call"
                        ],
                        [
                            "ensure_traj(x)",
                            "Call"
                        ],
                        [
                            "self.TzxJ.predict(z)",
                            "Call"
                        ],
                        [
                            "self.output_x",
                            "Attribute"
                        ],
                        [
                            "self.output_x",
                            "Attribute"
                        ],
                        [
                            "self.output_x",
                            "Attribute"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}