{
    "muver/multi_view/data_loader.py": {
        "torch": {
            "tensor_230": {
                "variable": {
                    "value": "token_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sample['token_ids'] for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_232": {
                "variable": {
                    "value": "title_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sample['title_ids'] for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_380": {
                "variable": {
                    "value": "label_world_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sample['label_world_idx'] for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_381": {
                "variable": {
                    "value": "label_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sample['label_ids'] for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_382": {
                "variable": {
                    "value": "context_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[sample['context_ids'] for sample in batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Generator_68": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_37": {
                "variable": {
                    "value": "world_value[perm_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "len(world_value['idx'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randperm_72": {
                "variable": {
                    "value": "world_value[perm_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "len(world_value['idx'])",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_120": {
                "variable": {
                    "value": "(self.samples, self.entity_title_to_id)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(preprocess_path, world + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_128": {
                "obj": {
                    "value": "[self.samples, self.entity_title_to_id]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(preprocess_path, world + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_77": {
                "low": {
                    "value": "len(world_names)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "muver/multi_view/model.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.additional_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.cross_encoder.config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_28": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(scores, 0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_69": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "candidate_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "candidate_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(candidate_output, 0).view(batch_size, sentence_num, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat([ori_views, new_pools], 1)",
                            "Call"
                        ],
                        [
                            "torch.cat([candidate_output.squeeze(0), new_pools], 0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_250": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ent_output",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.encode_candidates(ent_ids, view_expansion=False)",
                            "Call"
                        ],
                        [
                            "torch.cat(GatherLayer.apply(ent_output), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "ctx_output.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_253": {
                "variable": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "score.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_254": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.max(scores, -1).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(score, -1).values",
                            "Attribute"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(score.size(0)).to(ctx_output.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cross_entropy_53": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_score",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.max(scores, -1).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(score, -1).values",
                            "Attribute"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(score.size(0)).to(ctx_output.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "bmm_206": {
                "variable": {
                    "value": "context_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ctx_mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "context_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model_output.last_hidden_state",
                            "Attribute"
                        ],
                        [
                            "context_output[:, 0, :]",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(ctx_mask.unsqueeze(1), context_output).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_206": {
                "variable": {
                    "value": "context_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "ctx_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "GatherLayer.apply(ctx_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "ent_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "GatherLayer.apply(ent_output)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_50": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(scores, 0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_118": {
                "variable": {
                    "value": "s_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(sentences), max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_189": {
                "variable": {
                    "value": "new_pools",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_pools",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(new_pools, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_pools, 0)",
                            "Call"
                        ],
                        [
                            "new_pools + new_pool",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "candidate_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ori_views, new_pools]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_252": {
                "input": {
                    "value": "score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(ent_output, ctx_output.T)",
                            "Call"
                        ],
                        [
                            "score.permute(2, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_256": {
                "input": {
                    "value": "max_score",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.max(scores, -1).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(score, -1).values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "max_54": {
                "input": {
                    "value": "max_score",
                    "type": "Attribute",
                    "possible_values": [
                        [
                            "torch.max(scores, -1).values",
                            "Attribute"
                        ],
                        [
                            "torch.max(score, -1).values",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "s_tensor[i, :len(s)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "s",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "ent_ids[seq[0]]",
                            "Subscript"
                        ],
                        [
                            "ent_ids[seq[i]]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_131": {
                "variable": {
                    "value": "dis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.mse_loss(views[:-1], views[1:], reduction='none')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_194": {
                "variable": {
                    "value": "new_pools",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_pools",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(new_pools, 0)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_pools, 0)",
                            "Call"
                        ],
                        [
                            "new_pools + new_pool",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "candidate_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[candidate_output.squeeze(0), new_pools]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_195": {
                "variable": {
                    "value": "candidate_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "new_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_pool",
                    "type": "Call",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "ori_view[-1].unsqueeze(0).repeat(target_sentence_num, 1)",
                            "Call"
                        ],
                        [
                            "torch.stack(new_pool, 0)",
                            "Call"
                        ],
                        [
                            "torch.cat([new_pool, ori_view[-1].unsqueeze(0).repeat(target_sentence_num - len(new_pool), 1)], 0)",
                            "Call"
                        ],
                        [
                            "new_pool + new_repr",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_131": {
                "input": {
                    "value": "views[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "views[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_174": {
                "tensors": {
                    "value": "new_views",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "new_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[new_pool, ori_view[-1].unsqueeze(0).repeat(target_sentence_num - len(new_pool), 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_132": {
                "input": {
                    "value": "dis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sum(F.mse_loss(views[:-1], views[1:], reduction='none'), -1)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "muver/multi_view/train.py": {
        "torch": {
            "device_count_261": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_112": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "grid_args.bi_ckpt_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ZeshelDataset(mode='train', desc_path=os.path.join(args.dataset_path, 'documents'), dataset_path=os.path.join(args.dataset_path, 'blink_format'), tokenizer=tokenizer, max_cand_len=args.max_cand_len, max_sentence_num=args.max_sentence_num, max_seq_len=args.max_seq_len)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "SubWorldDistributedSampler(batch_size=grid_args.train_batch_size, subworld_idx=train_dataset.subworld_idx, num_replicas=args.n_gpu, rank=args.local_rank)",
                            "Call"
                        ],
                        [
                            "SubworldBatchSampler(batch_size=grid_args.train_batch_size, subworld_idx=train_dataset.subworld_idx)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "cross_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_device_94": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_222": {
                "f": {
                    "value": "logger.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "bi_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(logger.sub_dir, 'epoch_{}.bin'.format(e))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__178": {
                "parameters": {
                    "value": "bi_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "bi_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "logger.lastest_checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_208": {
                "obj": {
                    "value": "bi_model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "logger.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "muver/multi_view/zeshel_evaluate.py": {
        "torch": {
            "DataLoader_120": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "encode_batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "cross_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_175": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "encode_batch_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "encode_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "world_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "bi_collate_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sampler": {
                    "value": "sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DistributedSampler(world_dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(world_dataset)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_65": {
                "variable": {
                    "value": "world_entity_pool[world]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "entity_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "[world_entity_pool, world_entity_titles]",
                    "type": "List",
                    "possible_values": []
                },
                "f": {
                    "value": "'entity_{}.pt'.format(local_rank)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_79": {
                "variable": {
                    "value": "(sub_entity_pool, sub_entity_titles)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "'entity_{}.pt'.format(i)",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pool",
                    "type": "Call",
                    "possible_values": [
                        [
                            "world_entity_pool[key]",
                            "Subscript"
                        ],
                        [
                            "torch.cat(pool, 0).to('cuda:0')",
                            "Call"
                        ],
                        [
                            "world_entity_pool.get(world_name, [])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedSampler_48": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "world_dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_50": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "world_dataset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "predict_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.softmax(predict_score, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_187": {
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sort_131": {
                "input": {
                    "value": "predict_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.softmax(predict_score, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_132": {
                "input": {
                    "value": "predict_score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.softmax(predict_score, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "muver/utils/logger.py": {
        "torch": {
            "SummaryWriter_58": {
                "variable": {
                    "value": "self.painter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.sub_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "muver/utils/multigpu.py": {
        "torch": {
            "zeros_like_28": {
                "variable": {
                    "value": "grad_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_21": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "muver/utils/tools.py": {
        "torch": {
            "manual_seed_28": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_all_29": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}