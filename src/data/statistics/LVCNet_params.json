{
    "vocoder/audio/mel.py": {
        "torch": {
            "mm_23": {
                "variable": {
                    "value": "spec_from_mel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mel_decompress[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mat2": {
                    "value": "_stft.mel_basis",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/audio/stft.py": {
        "torch": {
            "pad_59": {
                "variable": {
                    "value": "input_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_data.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(int(self.filter_length / 2), int(self.filter_length / 2), 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_65": {
                "variable": {
                    "value": "forward_transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_data.cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "Variable(self.forward_basis, requires_grad=False).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.hop_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_75": {
                "variable": {
                    "value": "magnitude",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_part ** 2 + imag_part ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "recombine_magnitude_phase",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[magnitude * torch.cos(phase), magnitude * torch.sin(phase)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv_transpose1d_85": {
                "variable": {
                    "value": "inverse_transform",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recombine_magnitude_phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([magnitude * torch.cos(phase), magnitude * torch.sin(phase)], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "Variable(self.inverse_basis, requires_grad=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.hop_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "mel_basis",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mel_basis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "librosa_mel_fn(sampling_rate, filter_length, n_mel_channels, mel_fmin, mel_fmax)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mel_basis).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_180": {
                "variable": {
                    "value": "mel_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mel_basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "magnitudes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "magnitudes.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "norm_182": {
                "variable": {
                    "value": "energy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "magnitudes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "magnitudes.data",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "fft_window",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "fft_window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_window(window, win_length, fftbins=True)",
                            "Call"
                        ],
                        [
                            "pad_center(fft_window, filter_length)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(fft_window).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_97": {
                "variable": {
                    "value": "approx_nonzero_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.where(window_sum > tiny(window_sum))[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "atan2_77": {
                "input": {
                    "value": "imag_part.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "real_part.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_175": {
                "input": {
                    "value": "y.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_176": {
                "input": {
                    "value": "y.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_100": {
                "ndarray": {
                    "value": "window_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "window_sumsquare(self.window, magnitude.size(-1), hop_length=self.hop_length, win_length=self.win_length, n_fft=self.filter_length, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.from_numpy(window_sum), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "window_sum.cuda() if magnitude.is_cuda else window_sum",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cos_83": {
                "input": {
                    "value": "phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.atan2(imag_part.data, real_part.data))",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_83": {
                "input": {
                    "value": "phase",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.atan2(imag_part.data, real_part.data))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vocoder/audio/util.py": {
        "torch": {
            "clamp_87": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x + 100) / 100",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_98": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "exponent": {
                    "value": "x / 20 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "ndarray": {
                    "value": "angles",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.angle(np.exp(2j * np.pi * np.random.rand(*magnitudes.size())))",
                            "Call"
                        ],
                        [
                            "angles.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.from_numpy(angles))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_116": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log10_86": {
                "input": {
                    "value": "torch.clamp(x, min=clip_val)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_86": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(n, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "20 * torch.log10(torch.clamp(x, min=clip_val)) - 20",
                            "BinOp"
                        ],
                        [
                            "torch.clamp((x + 100) / 100, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x * 100 - 100",
                            "BinOp"
                        ],
                        [
                            "torch.pow(10, x / 20 + 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "clip_val",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "vocoder/datasets/audio_mel.py": {
        "torch": {
            "from_numpy_69": {
                "variable": {
                    "value": "mel",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mel.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_70": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "audio[:, 2 * self.hop_length:(mel.shape[0] - 2) * self.hop_length]",
                            "Subscript"
                        ],
                        [
                            "audio[:, audio_start:audio_start + (self.batch_mel_length - 4) * self.hop_length]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "vocoder/layers/causal_conv.py": {
        "torch": {
            "Conv1d_20": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ConvTranspose1d_42": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "vocoder/layers/pqmf.py": {
        "torch": {
            "from_numpy_91": {
                "variable": {
                    "value": "analysis_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h_analysis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((subbands, len(h_proto)))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_91": {
                "variable": {
                    "value": "analysis_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_92": {
                "variable": {
                    "value": "synthesis_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "h_synthesis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros((subbands, len(h_proto)))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_92": {
                "variable": {
                    "value": "synthesis_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "updown_filter",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(subbands, subbands, subbands)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ConstantPad1d_106": {
                "variable": {
                    "value": "self.pad_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "taps // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "conv1d_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pad_fn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.analysis_filter",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose1d_134": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv1d(self.pad_fn(x), self.analysis_filter)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose1d(x, self.updown_filter * self.subbands, stride=self.subbands)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.updown_filter * self.subbands",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.subbands",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_119": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.conv1d(self.pad_fn(x), self.analysis_filter)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose1d(x, self.updown_filter * self.subbands, stride=self.subbands)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.updown_filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.subbands",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv1d_135": {
                "input": {
                    "value": "self.pad_fn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.synthesis_filter",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/layers/residual_block.py": {
        "torch": {
            "dropout_104": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.dropout(x, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, :residual.size(-1)] if self.use_causal_conv else x",
                            "IfExp"
                        ],
                        [
                            "torch.tanh(xa) * torch.sigmoid(xb)",
                            "BinOp"
                        ],
                        [
                            "(self.conv1x1_out(x) + residual) * math.sqrt(0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_121": {
                "input": {
                    "value": "xa",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_121": {
                "input": {
                    "value": "xb",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/layers/residual_stack.py": {
        "torch": {
            "Conv1d_63": {
                "variable": {
                    "value": "self.skip_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "getattr(torch.nn, nonlinear_activation)(**nonlinear_activation_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.stack",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "getattr(torch.nn, nonlinear_activation)(**nonlinear_activation_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_49": {
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_51": {
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_59": {
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "vocoder/layers/upsample.py": {
        "torch": {
            "ModuleList_84": {
                "variable": {
                    "value": "self.up_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_43": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "(self.y_scale, self.x_scale)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/losses/pwg_loss.py": {
        "torch": {
            "MSELoss_11": {
                "variable": {
                    "value": "self.mse_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_19": {
                "input": {
                    "value": "prob_",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_22": {
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "input": {
                    "value": "prob_",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/losses/stft_loss.py": {
        "torch": {
            "stft_26": {
                "variable": {
                    "value": "x_stft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_fft": {
                    "value": "fft_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "hop_length": {
                    "value": "hop_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "win_length": {
                    "value": "win_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "600",
                            "MethodArgument"
                        ]
                    ]
                },
                "window": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(torch, window)(win_length)",
                            "Call"
                        ],
                        [
                            "'hann_window'",
                            "MethodArgument"
                        ],
                        [
                            "'hann_window'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_31": {
                "input": {
                    "value": "torch.clamp(real ** 2 + imag ** 2, min=1e-07)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_31": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_129": {
                "variable": {
                    "value": "self.stft_losses",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_loss_73": {
                "input": {
                    "value": "torch.log(y_mag)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch.log(x_mag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_52": {
                "input": {
                    "value": "y_mag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stft(y, self.fft_size, self.shift_size, self.win_length, self.window)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "fro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_73": {
                "input": {
                    "value": "x_mag",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "stft(x, self.fft_size, self.shift_size, self.win_length, self.window)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_31": {
                "input": {
                    "value": "real ** 2 + imag ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/models/lvcgan.py": {
        "torch": {
            "ModuleList_85": {
                "variable": {
                    "value": "self.lvc_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_100": {
                "variable": {
                    "value": "self.last_conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.ReLU(inplace=True), Conv1d1x1(inner_channels, inner_channels, bias=True), torch.nn.ReLU(inplace=True), Conv1d1x1(inner_channels, out_channels, bias=True)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_184": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(c) * self.upsample_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_180": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.first_conv(x)",
                            "Call"
                        ],
                        [
                            "self.lvc_blocks[0](x, c)",
                            "Call"
                        ],
                        [
                            "x + self.lvc_blocks[n](x, c)",
                            "BinOp"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float).to(next(self.parameters()).device)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, len(c) * self.upsample_factor).to(next(self.parameters()).device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(c, dtype=torch.float).to(next(self.parameters()).device)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.nn.ReplicationPad1d(self.aux_context_window)(c)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "remove_weight_norm_139": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "weight_norm_149": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReplicationPad1d_189": {
                "padding": {
                    "value": "self.aux_context_window",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/models/lvcnet.py": {
        "torch": {
            "Sequential_44": {
                "variable": {
                    "value": "self.input_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv1d(cond_channels, kpnet_hidden_channels, 5, padding=0, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "self.residual_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Dropout(kpnet_dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_56": {
                "variable": {
                    "value": "self.kernel_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "kpnet_kernel_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_in_channels * conv_out_channels * conv_kernel_size * conv_layers",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kpnet_conv_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kpnet_conv_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "dilation * int((kernel_size - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_57": {
                "variable": {
                    "value": "self.bias_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "kpnet_bias_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "conv_out_channels * conv_layers",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kpnet_conv_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kpnet_conv_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "dilation * int((kernel_size - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_161": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.location_variable_convolution(x, k, b, dilation, self.cond_hop_length)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x[:, :in_channels, :]) * torch.tanh(x[:, in_channels:, :])",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (padding, padding), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, hop_size + 2 * padding, hop_size)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, dilation), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(3, dilation, dilation)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :, :hop_size]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 4)",
                            "Call"
                        ],
                        [
                            "x.unfold(4, kernel_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(padding, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_171": {
                "variable": {
                    "value": "o",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bildsk,biokl->bolsd",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.location_variable_convolution(x, k, b, dilation, self.cond_hop_length)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x[:, :in_channels, :]) * torch.tanh(x[:, in_channels:, :])",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (padding, padding), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, hop_size + 2 * padding, hop_size)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, dilation), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(3, dilation, dilation)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :, :hop_size]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 4)",
                            "Call"
                        ],
                        [
                            "x.unfold(4, kernel_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_165": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.location_variable_convolution(x, k, b, dilation, self.cond_hop_length)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x[:, :in_channels, :]) * torch.tanh(x[:, in_channels:, :])",
                            "BinOp"
                        ],
                        [
                            "F.pad(x, (padding, padding), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(2, hop_size + 2 * padding, hop_size)",
                            "Call"
                        ],
                        [
                            "F.pad(x, (0, dilation), 'constant', 0)",
                            "Call"
                        ],
                        [
                            "x.unfold(3, dilation, dilation)",
                            "Call"
                        ],
                        [
                            "x[:, :, :, :, :hop_size]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 4)",
                            "Call"
                        ],
                        [
                            "x.unfold(4, kernel_size, 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, dilation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_45": {
                "in_channels": {
                    "value": "cond_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "p": {
                    "value": "kpnet_dropout",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_51": {
                "in_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kpnet_conv_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kpnet_conv_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "dilation * int((kernel_size - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_53": {
                "in_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "kpnet_hidden_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kpnet_conv_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(kpnet_conv_size - 1) // 2",
                            "BinOp"
                        ],
                        [
                            "dilation * int((kernel_size - 1) / 2)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_137": {
                "input": {
                    "value": "x[:, :in_channels, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tanh_137": {
                "input": {
                    "value": "x[:, in_channels:, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/models/melgan.py": {
        "torch": {
            "Sequential_138": {
                "variable": {
                    "value": "self.melgan",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_250": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_370": {
                "variable": {
                    "value": "self.discriminators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_207": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(c, dtype=torch.float).to(next(self.parameters()).device)",
                            "Call"
                        ],
                        [
                            "self.melgan(c.transpose(1, 0).unsqueeze(0))",
                            "Call"
                        ],
                        [
                            "self.pqmf.synthesis(c)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_259": {
                "*args": {
                    "value": "getattr(torch.nn, pad)((np.prod(kernel_sizes) - 1) // 2, **pad_params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "*args": {
                    "value": "torch.nn.Conv1d(in_chs, out_chs, kernel_sizes[0], padding=(kernel_sizes[0] - 1) // 2, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_298": {
                "in_channels": {
                    "value": "out_chs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(in_chs * downsample_scale, max_downsample_channels)",
                            "Call"
                        ],
                        [
                            "min(in_chs * 2, max_downsample_channels)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_sizes[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_sizes[1] - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_72": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "80",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_127": {
                "in_channels": {
                    "value": "channels // 2 ** (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Tanh_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "remove_weight_norm_167": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "weight_norm_177": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv1d_261": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "80",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "np.prod(kernel_sizes)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_271": {
                "*args": {
                    "value": "torch.nn.Conv1d(in_chs, out_chs, kernel_size=downsample_scale * 10 + 1, stride=downsample_scale, padding=downsample_scale * 5, groups=in_chs // 4, bias=bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv1d_289": {
                "in_channels": {
                    "value": "in_chs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channels",
                            "Name"
                        ],
                        [
                            "out_chs",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(in_chs * downsample_scale, max_downsample_channels)",
                            "Call"
                        ],
                        [
                            "min(in_chs * 2, max_downsample_channels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "padding": {
                    "value": "(kernel_sizes[0] - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "remove_weight_norm_420": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "weight_norm_430": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_85": {
                "in_channels": {
                    "value": "channels // 2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels // 2 ** (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "upsample_scale * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "upsample_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "upsample_scale // 2 + upsample_scale % 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "upsample_scale % 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv1d_272": {
                "in_channels": {
                    "value": "in_chs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "channels",
                            "Name"
                        ],
                        [
                            "out_chs",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_chs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(in_chs * downsample_scale, max_downsample_channels)",
                            "Call"
                        ],
                        [
                            "min(in_chs * 2, max_downsample_channels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "downsample_scale * 10 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "stride": {
                    "value": "downsample_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "downsample_scales",
                            "Name"
                        ]
                    ]
                },
                "padding": {
                    "value": "downsample_scale * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_chs // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "vocoder/models/parallel_wavegan.py": {
        "torch": {
            "ModuleList_122": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_139": {
                "variable": {
                    "value": "self.last_conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[torch.nn.ReLU(inplace=True), Conv1d1x1(skip_channels, skip_channels, bias=True), torch.nn.ReLU(inplace=True), Conv1d1x1(skip_channels, out_channels, bias=True)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ModuleList_275": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_388": {
                "variable": {
                    "value": "self.first_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv1d1x1(in_channels, residual_channels, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_395": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_412": {
                "variable": {
                    "value": "self.last_conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[getattr(torch.nn, nonlinear_activation)(inplace=True, **nonlinear_activation_params), Conv1d1x1(skip_channels, skip_channels, bias=True), getattr(torch.nn, nonlinear_activation)(inplace=True, **nonlinear_activation_params), Conv1d1x1(skip_channels, out_channels, bias=True)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randn_231": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "len(c) * self.upsample_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.first_conv(x)",
                            "Call"
                        ],
                        [
                            "skips",
                            "Name"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "torch.tensor(x, dtype=torch.float).to(next(self.parameters()).device)",
                            "Call"
                        ],
                        [
                            "x.transpose(1, 0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.randn(1, 1, len(c) * self.upsample_factor).to(next(self.parameters()).device)",
                            "Call"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "self.first_conv(x)",
                            "Call"
                        ],
                        [
                            "skips",
                            "Name"
                        ],
                        [
                            "f(x)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_234": {
                "variable": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upsample_net(c)",
                            "Call"
                        ],
                        [
                            "torch.tensor(c, dtype=torch.float).to(next(self.parameters()).device)",
                            "Call"
                        ],
                        [
                            "c.transpose(1, 0).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.nn.ReplicationPad1d(self.aux_context_window)(c)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_140": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "remove_weight_norm_186": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "weight_norm_196": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReplicationPad1d_236": {
                "padding": {
                    "value": "self.aux_context_window",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weight_norm_319": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "remove_weight_norm_329": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "weight_norm_453": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "remove_weight_norm_463": {
                "module": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/optimizers/pwg_opt.py": {
        "torch": {
            "StepLR_17": {
                "variable": {
                    "value": "self.generator_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.generator_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_22": {
                "variable": {
                    "value": "self.discriminator_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.discriminator_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/optimizers/radam.py": {
        "torch": {
            "zeros_like_48": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_49": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p_data_fp32",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "p.data.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vocoder/preprocess.py": {
        "torch": {
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/strategy/pwg_strategy.py": {
        "torch": {
            "zeros_53": {
                "variable": {
                    "value": "adv_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__62": {
                "parameters": {
                    "value": "model.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.generator_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__84": {
                "parameters": {
                    "value": "model.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.discriminator_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/test.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_38": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.exp_dir, os.readlink(pt))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/train.py": {
        "torch": {
            "device_25": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_68": {
                "obj": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(checkpoint, map_location='cpu')",
                            "Call"
                        ],
                        [
                            "{'step': self.step, 'epoch': self.epoch, 'optimizer': self.optimizer.state_dict(), 'model': self.model.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.exp_dir, f'checkpoint-{self.step}.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_50": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.exp_dir, os.readlink(pt))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "vocoder/utils/log.py": {
        "torch": {
            "SummaryWriter_29": {
                "variable": {
                    "value": "self.tbwriter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "log_dir",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}