{
    "examples/example.py": {
        "torch": {
            "randn_14": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "262144",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_conv.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "510",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_enc_dec.py": {
        "torch": {
            "randint_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_31": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_like_33": {
                "variable": {
                    "value": "x_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(1, 10000, (1, 512))",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_34": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(1, 10000, (1, 512))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/example_enc_dec_module.py": {
        "torch": {
            "randint_16": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_17": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_full_attn.py": {
        "torch": {
            "randn_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_intermediate_ff.py": {
        "torch": {
            "randn_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "510",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_lm.py": {
        "torch": {
            "randint_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 512)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_no_params.py": {
        "torch": {
            "randn_22": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "510",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "21",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_padder.py": {
        "torch": {
            "randn_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(1, 510)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_small.py": {
        "torch": {
            "randn_20": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_vis.py": {
        "torch": {
            "randn_19": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/example_wo_intermediate.py": {
        "torch": {
            "randn_21": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "examples/pretrain_tutorial.py": {
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if not config[no_cuda] and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MSELoss_44": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_106": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data_points, config['dummy_seq_len'], config['dummy_ch'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_107": {
                "variable": {
                    "value": "y_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(data_points, config['dummy_seq_len'], config['dummy_ch'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_109": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_34": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SGD_96": {
                "params": {
                    "value": "model_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_parameters",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "OrderedDict(batch_size=16, lr=0.1, no_cuda=True, num_epochs=15, output_dir='./output', seed=2222, dummy_seq_len=64, dummy_ch=16)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_110": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(x_tensor, y_tensor)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "OrderedDict(batch_size=16, lr=0.1, no_cuda=True, num_epochs=15, output_dir='./output', seed=2222, dummy_seq_len=64, dummy_ch=16)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/pretrain_tutorial_lm.py": {
        "torch": {
            "device_46": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if not config[no_cuda] and torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_61": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_113": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_parameters",
                            "Method Argument"
                        ]
                    ]
                },
                "lr": {
                    "value": "config['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "OrderedDict(batch_size=20, gamma=0.9, log_interval=200, lr=5.0, no_cuda=False, num_epochs=15, output_dir='./output', seed=2222, seq_len=20, ch=200, emb_dim=200, num_tokens=28785, bptt=35)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_114": {
                "variable": {
                    "value": "sched",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model_parameters, lr=config['lr'])",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "gamma": {
                    "value": "config['gamma']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "OrderedDict(batch_size=20, gamma=0.9, log_interval=200, lr=5.0, no_cuda=False, num_epochs=15, output_dir='./output', seed=2222, seq_len=20, ch=200, emb_dim=200, num_tokens=28785, bptt=35)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "config['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clip_grad_norm__77": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "linformer_pytorch/linformer_pytorch.py": {
        "torch": {
            "Linear_40": {
                "variable": {
                    "value": "lin",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv1d_34": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "head_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // nhead if dim_d is None else dim_d",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "head_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // nhead if dim_d is None else dim_d",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "int(input_size / dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "stride": {
                    "value": "int(input_size / dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input_size, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNorm_54": {
                "variable": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ff_intermediate if (index != depth - 1 and ff_intermediate is not None) and (not decoder_mode) else channels",
                            "IfExp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_77": {
                "variable": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "tensor.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_78": {
                "variable": {
                    "value": "sin_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(tensor.shape[1], device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_79": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_inp.sin(), sin_inp.cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.project_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_out",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ff_intermediate if (index != 0 and ff_intermediate is not None) and (not decoder_mode) else channels",
                            "IfExp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "ff_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ff_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "ff_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ff_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ff_intermediate if (index != depth - 1 and ff_intermediate is not None) and (not decoder_mode) else channels",
                            "IfExp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_107": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_108": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_128": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_162": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q.masked_fill_(~mask, 0.0)",
                            "Call"
                        ],
                        [
                            "torch.matmul(Q, K)",
                            "Call"
                        ],
                        [
                            "self.to_q[index](tensor)",
                            "Call"
                        ],
                        [
                            "Q",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.masked_fill_(~mask, 0.0)",
                            "Call"
                        ],
                        [
                            "K.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(K, self.E)",
                            "Call"
                        ],
                        [
                            "self.E(K)",
                            "Call"
                        ],
                        [
                            "self.to_k[index](tensor) if not self.decoder_mode else self.to_k[index](kwargs['embeddings'])",
                            "IfExp"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_184": {
                "variable": {
                    "value": "out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "P_bar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Q / torch.sqrt(torch.tensor(self.dim).type(Q.type())).to(Q.device)",
                            "BinOp"
                        ],
                        [
                            "P_bar.masked_fill_(~self.causal_mask, float('-inf'))",
                            "Call"
                        ],
                        [
                            "P_bar.softmax(dim=-1)",
                            "Call"
                        ],
                        [
                            "self.dropout(P_bar)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V.masked_fill_(~mask, 0.0)",
                            "Call"
                        ],
                        [
                            "V.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(V, self.F)",
                            "Call"
                        ],
                        [
                            "self.F(V)",
                            "Call"
                        ],
                        [
                            "V.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.to_v[index](tensor) if not self.decoder_mode else self.to_v[index](kwargs['embeddings'])",
                            "IfExp"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_196": {
                "variable": {
                    "value": "self.heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_208": {
                "variable": {
                    "value": "self.to_q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_209": {
                "variable": {
                    "value": "self.to_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_210": {
                "variable": {
                    "value": "self.to_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_226": {
                "variable": {
                    "value": "self.mh_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "dropout",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_241": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "head_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_264": {
                "variable": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_345": {
                "variable": {
                    "value": "self.to_token_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_tokens",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels if emb_dim is None else emb_dim",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_358": {
                "variable": {
                    "value": "self.dropout_tokens",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_222": {
                "variable": {
                    "value": "self.w_o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * nhead",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_224": {
                "variable": {
                    "value": "self.w_o_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * nhead",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "w_o_intermediate_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_225": {
                "variable": {
                    "value": "self.w_o_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "w_o_intermediate_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ff_intermediate if (index != 0 and ff_intermediate is not None) and (not decoder_mode) else channels",
                            "IfExp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ff_intermediate if (index != depth - 1 and ff_intermediate is not None) and (not decoder_mode) else channels",
                            "IfExp"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "output_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_90": {
                "in_features": {
                    "value": "dim_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_out",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_in",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_159": {
                "variable": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.masked_fill_(~mask, 0.0)",
                            "Call"
                        ],
                        [
                            "K.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(K, self.E)",
                            "Call"
                        ],
                        [
                            "self.E(K)",
                            "Call"
                        ],
                        [
                            "self.to_k[index](tensor) if not self.decoder_mode else self.to_k[index](kwargs['embeddings'])",
                            "IfExp"
                        ],
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.E",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_164": {
                "input": {
                    "value": "torch.tensor(self.dim).type(Q.type())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_180": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "V.masked_fill_(~mask, 0.0)",
                            "Call"
                        ],
                        [
                            "V.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(V, self.F)",
                            "Call"
                        ],
                        [
                            "self.F(V)",
                            "Call"
                        ],
                        [
                            "V.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "self.to_v[index](tensor) if not self.decoder_mode else self.to_v[index](kwargs['embeddings'])",
                            "IfExp"
                        ],
                        [
                            "V",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "self.F",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_357": {
                "in_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels if emb_dim is None else emb_dim",
                            "IfExp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_tokens",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "triu_24": {
                "input": {
                    "value": "torch.ones(dim_k, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_218": {
                "in_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_219": {
                "in_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_220": {
                "in_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "triu_23": {
                "input": {
                    "value": "torch.ones(input_size, input_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_24": {
                "*size": {
                    "value": "dim_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_k",
                            "Method Argument"
                        ],
                        [
                            "dim_k",
                            "Method Argument"
                        ],
                        [
                            "dim_k",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_73": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_23": {
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ],
                        [
                            "input_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_164": {
                "data": {
                    "value": "self.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "linformer_pytorch/padder.py": {
        "torch": {
            "zeros_19": {
                "variable": {
                    "value": "net_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, seq_len + padding_amount, tensor.shape[-1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "net_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, seq_len + padding_amount)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "linformer_pytorch/visualizer.py": {
        "torch": {}
    }
}