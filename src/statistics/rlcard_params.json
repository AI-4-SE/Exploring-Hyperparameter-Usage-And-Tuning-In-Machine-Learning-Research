{
    "examples/blackjack_dqn.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_35": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_49": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/blackjack_dqn_multi_process.py": {
        "tensorflow": {
            "Session_45": {
                "variable": {
                    "value": "self.sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Variable_112": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_109": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_54": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_122": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "convert_to_tensor_71": {
                "value": {
                    "value": "var",
                    "possible_values": []
                }
            }
        }
    },
    "examples/doudizhu_dqn.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/doudizhu_nfsp.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/leduc_holdem_dqn.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/leduc_holdem_nfsp.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_52": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/leduc_holdem_nfsp_save_model.py": {
        "tensorflow": {
            "Variable_52": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Saver_73": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_50": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_71": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/leduc_holdem_single.py": {
        "tensorflow": {
            "Variable_41": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_40": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_51": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/limit_holdem_dqn.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/limit_holdem_nfsp.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_53": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/mahjong_dqn.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/mahjong_nfsp.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/nolimit_holdem_dqn.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/nolimit_holdem_nfsp.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_52": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/uno_dqn.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/uno_nfsp.py": {
        "tensorflow": {
            "Variable_38": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_36": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_58": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/uno_single.py": {
        "tensorflow": {
            "Variable_41": {
                "variable": {
                    "value": "global_step",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Session_40": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_51": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "rlcard/agents/deep_cfr_agent.py": {
        "tensorflow": {
            "placeholder_175": {
                "variable": {
                    "value": "self._info_state_ph",
                    "possible_values": []
                },
                "shape": {
                    "value": "info_state_shape",
                    "possible_values": [
                        [
                            "[None]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "info_state_ph",
                    "possible_values": []
                }
            },
            "placeholder_180": {
                "variable": {
                    "value": "self._action_probs_ph",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._num_actions]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "action_probs_ph",
                    "possible_values": []
                }
            },
            "placeholder_184": {
                "variable": {
                    "value": "self._iter_ph",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "iter_ph",
                    "possible_values": []
                }
            },
            "softmax_212": {
                "variable": {
                    "value": "self._action_probs",
                    "possible_values": []
                },
                "logits": {
                    "value": "action_logits",
                    "possible_values": [
                        [
                            "self._policy_network(self._info_state_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_213": {
                "variable": {
                    "value": "self._loss_policy",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.mean_squared_error(labels=self._action_probs_ph * tf.math.sqrt(self._iter_ph)[:, tf.newaxis], predictions=self._action_probs * tf.math.sqrt(self._iter_ph)[:, tf.newaxis])",
                    "possible_values": []
                }
            },
            "AdamOptimizer_217": {
                "variable": {
                    "value": "self._optimizer_policy",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_446": {
                "variable": {
                    "value": "flattened",
                    "possible_values": []
                },
                "tensor": {
                    "value": "state",
                    "possible_values": [
                        [
                            "state['obs'].flatten()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "possible_values": []
                }
            },
            "gather_241": {
                "variable": {
                    "value": "action_predictions",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(pred, [-1])",
                    "possible_values": []
                },
                "indices": {
                    "value": "gather_indices",
                    "possible_values": [
                        [
                            "tf.range(batch_size) * tf.shape(pred)[1] + self._action_ph[p]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_243": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.mean_squared_error(labels=lbl, predictions=action_predictions)",
                    "possible_values": []
                }
            },
            "mean_squared_error_214": {
                "labels": {
                    "value": "self._action_probs_ph * tf.math.sqrt(self._iter_ph)[:, tf.newaxis]",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self._action_probs * tf.math.sqrt(self._iter_ph)[:, tf.newaxis]",
                    "possible_values": []
                }
            },
            "global_variables_initializer_250": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "placeholder_189": {
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "'advantage_ph_' + str(p)",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "name": {
                    "value": "'action_ph_' + str(p)",
                    "possible_values": []
                }
            },
            "sqrt_236": {
                "x": {
                    "value": "self._iter_ph",
                    "possible_values": []
                }
            },
            "shape_239": {
                "input": {
                    "value": "self._info_state_ph",
                    "possible_values": []
                }
            },
            "reshape_241": {
                "tensor": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "self._advantage_outputs[p] * tf.math.sqrt(self._iter_ph)[:, tf.newaxis]",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "mean_squared_error_243": {
                "labels": {
                    "value": "lbl",
                    "possible_values": [
                        [
                            "tf.math.sqrt(self._iter_ph) * self._advantage_ph[p]",
                            "BinOp"
                        ]
                    ]
                },
                "predictions": {
                    "value": "action_predictions",
                    "possible_values": [
                        [
                            "tf.gather(tf.reshape(pred, [-1]), gather_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_246": {
                "learning_rate": {
                    "value": "learning_rate",
                    "possible_values": [
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sqrt_237": {
                "x": {
                    "value": "self._iter_ph",
                    "possible_values": []
                }
            },
            "shape_240": {
                "input": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "self._advantage_outputs[p] * tf.math.sqrt(self._iter_ph)[:, tf.newaxis]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_215": {
                "x": {
                    "value": "self._iter_ph",
                    "possible_values": []
                }
            },
            "sqrt_216": {
                "x": {
                    "value": "self._iter_ph",
                    "possible_values": []
                }
            }
        }
    },
    "rlcard/agents/dqn_agent.py": {
        "tensorflow": {
            "AdamOptimizer_296": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "possible_values": []
                },
                "name": {
                    "value": "dqn_adam",
                    "possible_values": []
                }
            },
            "placeholder_307": {
                "variable": {
                    "value": "self.X_pl",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "[None]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "possible_values": []
                }
            },
            "placeholder_309": {
                "variable": {
                    "value": "self.y_pl",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "possible_values": []
                }
            },
            "placeholder_311": {
                "variable": {
                    "value": "self.actions_pl",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "possible_values": []
                },
                "name": {
                    "value": "actions",
                    "possible_values": []
                }
            },
            "flatten_316": {
                "variable": {
                    "value": "fc",
                    "possible_values": []
                },
                "structure": {
                    "value": "self.X_pl",
                    "possible_values": []
                }
            },
            "gather_323": {
                "variable": {
                    "value": "self.action_predictions",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(self.predictions, [-1])",
                    "possible_values": []
                },
                "indices": {
                    "value": "gather_indices",
                    "possible_values": [
                        [
                            "tf.range(batch_size) * tf.shape(self.predictions)[1] + self.actions_pl",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squared_difference_326": {
                "variable": {
                    "value": "self.losses",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_pl",
                    "possible_values": []
                },
                "y": {
                    "value": "self.action_predictions",
                    "possible_values": []
                }
            },
            "reduce_mean_327": {
                "variable": {
                    "value": "self.loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.losses",
                    "possible_values": []
                }
            },
            "variable_scope_292": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": [
                        [
                            "'estimator'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_313": {
                "input": {
                    "value": "self.X_pl",
                    "possible_values": []
                }
            },
            "reshape_323": {
                "tensor": {
                    "value": "self.predictions",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "possible_values": []
                }
            },
            "trainable_variables_409": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "trainable_variables_411": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_global_step_298": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "get_global_step_356": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "shape_322": {
                "input": {
                    "value": "self.predictions",
                    "possible_values": []
                }
            }
        }
    },
    "rlcard/agents/nfsp_agent.py": {
        "tensorflow": {
            "placeholder_123": {
                "variable": {
                    "value": "self._info_state_ph",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "possible_values": [
                        [
                            "[None]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "flatten_127": {
                "variable": {
                    "value": "self._X",
                    "possible_values": []
                },
                "structure": {
                    "value": "self._info_state_ph",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "self._action_probs_ph",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._action_num]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "possible_values": []
                }
            },
            "softmax_135": {
                "variable": {
                    "value": "self._avg_policy_probs",
                    "possible_values": []
                },
                "logits": {
                    "value": "self._avg_policy",
                    "possible_values": []
                }
            },
            "reduce_mean_138": {
                "variable": {
                    "value": "self._loss",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits_v2(labels=tf.stop_gradient(self._action_probs_ph), logits=self._avg_policy)",
                    "possible_values": []
                }
            },
            "AdamOptimizer_143": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._sl_learning_rate",
                    "possible_values": []
                },
                "name": {
                    "value": "nfsp_adam",
                    "possible_values": []
                }
            },
            "variable_scope_108": {
                "name_or_scope": {
                    "value": "scope",
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_v2_139": {
                "labels": {
                    "value": "tf.stop_gradient(self._action_probs_ph)",
                    "possible_values": []
                },
                "logits": {
                    "value": "self._avg_policy",
                    "possible_values": []
                }
            },
            "stop_gradient_140": {
                "input": {
                    "value": "self._action_probs_ph",
                    "possible_values": []
                }
            }
        }
    },
    "rlcard/models/pretrained_models.py": {
        "tensorflow": {
            "Graph_22": {
                "variable": {
                    "value": "self.graph",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Session_23": {
                "variable": {
                    "value": "self.sess",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "possible_values": []
                }
            },
            "Saver_43": {
                "variable": {
                    "value": "saver",
                    "possible_values": []
                },
                "var_list": {
                    "value": "tf.model_variables()",
                    "possible_values": []
                }
            },
            "global_variables_initializer_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "model_variables_43": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "latest_checkpoint_44": {
                "checkpoint_dir": {
                    "value": "check_point_path",
                    "possible_values": [
                        [
                            "os.path.join(ROOT_PATH, 'leduc_holdem_nfsp')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rlcard/utils/utils.py": {
        "tensorflow": {
            "set_random_seed_328": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "manual_seed_333": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/agents/test_deepcfr.py": {
        "tensorflow": {
            "InteractiveSession_12": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "InteractiveSession_37": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reset_default_graph_31": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "reset_default_graph_68": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/agents/test_dqn.py": {
        "tensorflow": {
            "InteractiveSession_11": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "InteractiveSession_46": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reset_default_graph_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reset_default_graph_73": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_56": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/agents/test_nfsp.py": {
        "tensorflow": {
            "InteractiveSession_11": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "InteractiveSession_32": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "InteractiveSession_89": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "InteractiveSession_107": {
                "variable": {
                    "value": "sess",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Variable_12": {
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reset_default_graph_24": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reset_default_graph_66": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reset_default_graph_105": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Variable_108": {
                "initial_value": {
                    "value": "0",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "reset_default_graph_122": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_47": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_99": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "global_variables_initializer_117": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "examples/limit_holdem_dqn_pytorch.py": {
        "torch": {
            "device_42": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "examples/limit_holdem_nfsp_pytorch.py": {
        "torch": {}
    },
    "rlcard/agents/dqn_agent_pytorch.py": {
        "torch": {
            "MSELoss_272": {
                "variable": {
                    "value": "self.mse_loss",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            },
            "Adam_275": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.qnet.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "possible_values": []
                }
            },
            "from_numpy_312": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "s",
                    "possible_values": [
                        [
                            "torch.from_numpy(s).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(s).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_313": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "a",
                    "possible_values": [
                        [
                            "torch.from_numpy(a).long().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_314": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "possible_values": [
                        [
                            "torch.from_numpy(y).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_320": {
                "variable": {
                    "value": "Q",
                    "possible_values": []
                },
                "input": {
                    "value": "q_as",
                    "possible_values": [
                        [
                            "self.qnet(s).numpy()",
                            "Call"
                        ],
                        [
                            "self.qnet(s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                },
                "index": {
                    "value": "a.unsqueeze(-1)",
                    "possible_values": []
                }
            },
            "squeeze_320": {
                "variable": {
                    "value": "Q",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Sequential_358": {
                "variable": {
                    "value": "self.fc_layers",
                    "possible_values": []
                },
                "*args": {
                    "value": "*fc",
                    "possible_values": []
                }
            },
            "device_98": {
                "variable": {
                    "value": "self.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "from_numpy_290": {
                "variable": {
                    "value": "s",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "s",
                    "possible_values": [
                        [
                            "torch.from_numpy(s).float().to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(s).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_289": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Flatten_353": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_357": {
                "in_features": {
                    "value": "layer_dims[-1]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.action_num",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_355": {
                "in_features": {
                    "value": "layer_dims[i]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_dims[i + 1]",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Tanh_356": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "rlcard/agents/nfsp_agent_pytorch.py": {
        "torch": {
            "Adam_142": {
                "variable": {
                    "value": "self.policy_network_optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "self.policy_network.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "self._sl_learning_rate",
                    "possible_values": []
                }
            },
            "from_numpy_205": {
                "variable": {
                    "value": "info_state",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "info_state",
                    "possible_values": [
                        [
                            "np.expand_dims(info_state, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(info_state).float().to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_254": {
                "variable": {
                    "value": "info_states",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(info_states)",
                    "possible_values": []
                }
            },
            "from_numpy_257": {
                "variable": {
                    "value": "eval_action_probs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(action_probs)",
                    "possible_values": []
                }
            },
            "Sequential_301": {
                "variable": {
                    "value": "self.mlp",
                    "possible_values": []
                },
                "*args": {
                    "value": "*mlp",
                    "possible_values": []
                }
            },
            "log_softmax_313": {
                "variable": {
                    "value": "log_action_probs",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "self.mlp(s)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "device_108": {
                "variable": {
                    "value": "self.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Flatten_296": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_298": {
                "in_features": {
                    "value": "layer_dims[i]",
                    "possible_values": []
                },
                "out_features": {
                    "value": "layer_dims[i + 1]",
                    "possible_values": []
                }
            },
            "is_available_108": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "ReLU_300": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "tests/agents/test_dqn_pytorch.py": {
        "torch": {
            "device_24": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_47": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    },
    "tests/agents/test_nfsp_pytorch.py": {
        "torch": {
            "device_16": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "device_38": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            }
        }
    }
}