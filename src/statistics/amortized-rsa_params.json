{
    "data.py": {
        "sklearn": {
            "train_test_split_63": {
                "variable": {
                    "value": "(idx_train, idx_valtest)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "val_size + test_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "train_test_split_67": {
                "variable": {
                    "value": "(idx_val, idx_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "idx_valtest",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "test_size / (val_size + test_size)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "colors.py": {
        "torch": {
            "from_numpy_281": {
                "variable": {
                    "value": "text_seq",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.text_seq[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_285": {
                "tensors": {
                    "value": "(color_tgt_pt.unsqueeze(0), color_alt1_pt.unsqueeze(0), color_alt2_pt.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "language_model.py": {
        "torch": {
            "load_64": {
                "variable": {
                    "value": "vocab",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "./models/ + str(args.dataset) + /vocab.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_66": {
                "variable": {
                    "value": "speaker_embs",
                    "type": "Name",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['w2i'].keys())",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_67": {
                "variable": {
                    "value": "listener_embs",
                    "type": "Name",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['w2i'].keys())",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "list(language_model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_77": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "language_model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "models.LanguageModel(speaker_embs)",
                            "Call"
                        ],
                        [
                            "language_model.cuda()",
                            "Call"
                        ],
                        [
                            "best_language_model",
                            "Name"
                        ]
                    ]
                },
                "f": {
                    "value": "./models/ + str(args.dataset) + /language-model.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "zeros_30": {
                "variable": {
                    "value": "y_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_size, output_size)",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_45": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_dim",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self.outputs2vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.init_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * (self.feat_size + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "feats_and_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feats_emb, targets_onehot.unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_89": {
                "variable": {
                    "value": "lang_length",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.size(0)",
                            "Call"
                        ],
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "inputs_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.size(0)",
                            "Call"
                        ],
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "eos_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.size(0)",
                            "Call"
                        ],
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "lang_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lang",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "lang_onehot.argmax(2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "GRU_240": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_dim",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_241": {
                "variable": {
                    "value": "self.outputs2vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_365": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_dim",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_366": {
                "variable": {
                    "value": "self.outputs2vocab",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_381": {
                "variable": {
                    "value": "feats_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.size(0)",
                            "Call"
                        ],
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_436": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embedding_dim",
                    "type": null,
                    "possible_values": []
                }
            },
            "pack_padded_sequence_451": {
                "variable": {
                    "value": "packed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "embed_seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seq @ self.embedding.weight",
                            "BinOp"
                        ],
                        [
                            "seq.cuda() @ self.embedding.weight",
                            "BinOp"
                        ],
                        [
                            "seq.cuda() @ self.embedding.weight",
                            "BinOp"
                        ],
                        [
                            "seq.cuda() @ self.embedding.weight",
                            "BinOp"
                        ]
                    ]
                },
                "lengths": {
                    "value": "sorted_lengths.data.tolist() if batch_size > 1 else length.data.tolist()",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Linear_474": {
                "variable": {
                    "value": "self.bilinear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.lang_model.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_169": {
                "variable": {
                    "value": "idx_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "lang_prob_tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lang_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "lang_prob_tensor.sum(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_202": {
                "variable": {
                    "value": "eos_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "eos_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(eos_prob, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_243": {
                "variable": {
                    "value": "self.init_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3 * (self.feat_size + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_245": {
                "variable": {
                    "value": "self.init_h",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feat_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "feats_and_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feats_emb, targets_onehot.unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_263": {
                "variable": {
                    "value": "feats",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([np.array(feat[y[idx], :, :, :].cpu()) for (idx, feat) in enumerate(feats)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_317": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_onehot @ self.embedding.weight",
                            "BinOp"
                        ],
                        [
                            "predicted_onehot.unsqueeze(0) @ self.embedding.weight",
                            "BinOp"
                        ],
                        [
                            "np.array([SOS_IDX for _ in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "inputs.to(feats.device)",
                            "Call"
                        ],
                        [
                            "F.one_hot(inputs, num_classes=self.vocab_size).float()",
                            "Call"
                        ],
                        [
                            "inputs.transpose(0, 1).to(feats.device)",
                            "Call"
                        ],
                        [
                            "inputs @ self.embedding.weight",
                            "BinOp"
                        ],
                        [
                            "predicted.to(feats.device) @ self.embedding.weight",
                            "BinOp"
                        ],
                        [
                            "embed_seq",
                            "Name"
                        ]
                    ]
                }
            },
            "one_hot_320": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inputs_onehot @ self.embedding.weight",
                            "BinOp"
                        ],
                        [
                            "predicted_onehot.unsqueeze(0) @ self.embedding.weight",
                            "BinOp"
                        ],
                        [
                            "np.array([SOS_IDX for _ in range(batch_size)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(inputs)",
                            "Call"
                        ],
                        [
                            "inputs.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "inputs.to(feats.device)",
                            "Call"
                        ],
                        [
                            "F.one_hot(inputs, num_classes=self.vocab_size).float()",
                            "Call"
                        ],
                        [
                            "inputs.transpose(0, 1).to(feats.device)",
                            "Call"
                        ],
                        [
                            "inputs @ self.embedding.weight",
                            "BinOp"
                        ],
                        [
                            "predicted.to(feats.device) @ self.embedding.weight",
                            "BinOp"
                        ],
                        [
                            "embed_seq",
                            "Name"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_352": {
                "variable": {
                    "value": "sampled",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "sampled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([[w] for w in inputs_npy])",
                            "Call"
                        ],
                        [
                            "np.transpose(sampled, (1, 0, 2))",
                            "Call"
                        ],
                        [
                            "torch.tensor(sampled).permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "np.concatenate((sampled, predicted), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_352": {
                "variable": {
                    "value": "sampled",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_355": {
                "variable": {
                    "value": "sampled_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[np.count_nonzero(t) for t in sampled_id.cpu()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_371": {
                "variable": {
                    "value": "(sorted_lengths, sorted_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_389": {
                "variable": {
                    "value": "(_, reversed_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "pad_402": {
                "variable": {
                    "value": "seq",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "seq",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seq.transpose(0, 1).to(feats.device)",
                            "Call"
                        ],
                        [
                            "seq[sorted_idx]",
                            "Subscript"
                        ],
                        [
                            "seq.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.pad(seq, (0, 0, 0, max_len - seq.shape[1])).float()",
                            "Call"
                        ],
                        [
                            "seq.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "seq[sorted_idx]",
                            "Subscript"
                        ],
                        [
                            "seq.transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, max_len - seq.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_409": {
                "variable": {
                    "value": "feats_emb",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.size(0)",
                            "Call"
                        ],
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_413": {
                "variable": {
                    "value": "prob",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ],
                        [
                            "feats.size(0)",
                            "Call"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.shape[0]",
                            "Subscript"
                        ],
                        [
                            "seq.size(0)",
                            "Call"
                        ],
                        [
                            "feats.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_420": {
                "variable": {
                    "value": "idx_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_442": {
                "variable": {
                    "value": "(sorted_lengths, sorted_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sort_460": {
                "variable": {
                    "value": "(_, reversed_idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sorted_idx",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "mul_489": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / (1 - lang[:, :, EOS_IDX]).sum(1).unsqueeze(1).repeat(1, 40)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - lang[:, :, EOS_IDX]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_489": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_516": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.einsum('ijh,ih->ij', (feats_emb, lang_bilinear))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "output_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_204": {
                "variable": {
                    "value": "r_len",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "eos_prob.shape[1] + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_294": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_304": {
                "variable": {
                    "value": "feats_and_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feats_emb, targets_onehot.unsqueeze(2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_307": {
                "variable": {
                    "value": "feats",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([np.array(feat[y[idx], :, :, :].cpu()) for (idx, feat) in enumerate(feats)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_347": {
                "variable": {
                    "value": "predicted",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predicted",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "predicted.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(idx_prob.exp(), 1)",
                            "Call"
                        ],
                        [
                            "outputs.max(1)[1].cpu()",
                            "Call"
                        ],
                        [
                            "predicted.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(outputs.cpu(), 1)",
                            "Call"
                        ],
                        [
                            "predicted.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.one_hot(predicted, num_classes=self.vocab_size).float()",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_399": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gumbel_softmax_128": {
                "variable": {
                    "value": "predicted_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ]
                    ]
                },
                "tau": {
                    "value": "tau",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "hard": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_147": {
                "variable": {
                    "value": "idx_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_343": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_344": {
                "variable": {
                    "value": "predicted",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_516": {
                "equation": {
                    "value": "ijh,ih->ij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(feats_emb, lang_bilinear)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_130": {
                "variable": {
                    "value": "predicted_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs / tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_503": {
                "input": {
                    "value": "weights[:, :, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.einsum('ijh,ih->ij', (feats_emb, lang_bilinear))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gumbel_softmax_132": {
                "variable": {
                    "value": "predicted_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ],
                        [
                            "F.softmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "outputs.squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.outputs2vocab(outputs)",
                            "Call"
                        ]
                    ]
                },
                "tau": {
                    "value": "tau",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "hard": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "einsum_503": {
                "equation": {
                    "value": "ijh,ih->ij",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "(feats_emb, lang_bilinear)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_136": {
                "variable": {
                    "value": "idx_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs / TEMP",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "multinomial_137": {
                "variable": {
                    "value": "predicted",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_prob.exp()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_139": {
                "variable": {
                    "value": "predicted_logprob",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.log_softmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(outputs, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(outputs / TEMP, dim=1)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(outputs, dim=2).cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "predicted",
                    "type": "Name",
                    "possible_values": [
                        [
                            "outputs.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "predicted.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(idx_prob.exp(), 1)",
                            "Call"
                        ],
                        [
                            "outputs.max(1)[1].cpu()",
                            "Call"
                        ],
                        [
                            "predicted.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "torch.multinomial(outputs.cpu(), 1)",
                            "Call"
                        ],
                        [
                            "predicted.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.one_hot(predicted, num_classes=self.vocab_size).float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "outputs.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "vocab",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "./models/single/vocab.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_31": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_51": {
                "variable": {
                    "value": "listener",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "listener",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(listener)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_53": {
                "variable": {
                    "value": "speaker",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "speaker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(speaker)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "zeros_64": {
                "variable": {
                    "value": "lang",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "40",
                            "Constant"
                        ],
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "len(vocab['w2i'].keys())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_89": {
                "variable": {
                    "value": "language_model",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "./models/ + dataset + /language_model.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_112": {
                "variable": {
                    "value": "context",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_85": {
                "variable": {
                    "value": "internal_listener",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "./models/ + dataset + /literal_listener_0.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_87": {
                "variable": {
                    "value": "internal_listener",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "./models/ + dataset + / + generalization + _literal_listener_0.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_71": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_75": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_137": {
                "variable": {
                    "value": "dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ShapeWorld(d, vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "dataloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ShapeWorld(d, vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_119": {
                "f": {
                    "value": "listener_dir + '10.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[np.count_nonzero(t) for t in lang.cpu()]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "np.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_154": {
                "variable": {
                    "value": "lang",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lang",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lang.argmax(2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, max_len, len(vocab['w2i'].keys())).to(lang.device)",
                            "Call"
                        ],
                        [
                            "lang.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.one_hot(lang, num_classes=len(vocab['w2i'].keys()))",
                            "Call"
                        ],
                        [
                            "F.pad(lang, (0, 0, 0, max_len - lang.shape[1])).float()",
                            "Call"
                        ],
                        [
                            "lang.cuda()",
                            "Call"
                        ],
                        [
                            "lang[:, 1:].contiguous()",
                            "Call"
                        ],
                        [
                            "lang.long().view(batch_size * lang.size(1), len(vocab['w2i'].keys()))",
                            "Call"
                        ],
                        [
                            "F.one_hot(lang_onehot, num_classes=len(vocab['w2i'].keys())).cuda().float()",
                            "Call"
                        ],
                        [
                            "langs.squeeze()",
                            "Call"
                        ],
                        [
                            "langs[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((lang0.unsqueeze(0), lang1.unsqueeze(0)), 0)",
                            "Call"
                        ],
                        [
                            "best_lang",
                            "Name"
                        ],
                        [
                            "lang.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "len(vocab['w2i'].keys())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_155": {
                "variable": {
                    "value": "lang",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "lang",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lang.argmax(2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, max_len, len(vocab['w2i'].keys())).to(lang.device)",
                            "Call"
                        ],
                        [
                            "lang.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.one_hot(lang, num_classes=len(vocab['w2i'].keys()))",
                            "Call"
                        ],
                        [
                            "F.pad(lang, (0, 0, 0, max_len - lang.shape[1])).float()",
                            "Call"
                        ],
                        [
                            "lang.cuda()",
                            "Call"
                        ],
                        [
                            "lang[:, 1:].contiguous()",
                            "Call"
                        ],
                        [
                            "lang.long().view(batch_size * lang.size(1), len(vocab['w2i'].keys()))",
                            "Call"
                        ],
                        [
                            "F.one_hot(lang_onehot, num_classes=len(vocab['w2i'].keys())).cuda().float()",
                            "Call"
                        ],
                        [
                            "langs.squeeze()",
                            "Call"
                        ],
                        [
                            "langs[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((lang0.unsqueeze(0), lang1.unsqueeze(0)), 0)",
                            "Call"
                        ],
                        [
                            "best_lang",
                            "Name"
                        ],
                        [
                            "lang.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 0, 0, max_len - lang.shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_284": {
                "variable": {
                    "value": "best_lang",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(langs.shape[1], langs.shape[2], langs.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "variable": {
                    "value": "best_lang_length",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "lang_lengths.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_334": {
                "variable": {
                    "value": "lang_length",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "lang_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4 * torch.ones(batch_size)",
                            "BinOp"
                        ],
                        [
                            "3 * torch.ones(batch_size)",
                            "BinOp"
                        ],
                        [
                            "lang_length.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "length",
                            "Name"
                        ],
                        [
                            "lang_lengths.squeeze()",
                            "Call"
                        ],
                        [
                            "torch.tensor(lang_length).cuda()",
                            "Call"
                        ],
                        [
                            "torch.cat((lang_length0.unsqueeze(0), lang_length1.unsqueeze(0)), 0)",
                            "Call"
                        ],
                        [
                            "best_lang_length",
                            "Name"
                        ],
                        [
                            "lang_length.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_195": {
                "variable": {
                    "value": "langs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(langs, lang)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_196": {
                "variable": {
                    "value": "lang_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lang_lengths, lang_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_330": {
                "variable": {
                    "value": "lang",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lang_onehot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lang.argmax(2)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "len(vocab['w2i'].keys())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Categorical_347": {
                "variable": {
                    "value": "lis_choices",
                    "type": "Name",
                    "possible_values": []
                },
                "probs": {
                    "value": "lis_scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "listener(img, lang, length)",
                            "Call"
                        ],
                        [
                            "listener(img, lang, lang_length)",
                            "Call"
                        ],
                        [
                            "listener(img, lang, lang_length, average=False)",
                            "Call"
                        ],
                        [
                            "listener(img, lang, lang_length, average=True)",
                            "Call"
                        ],
                        [
                            "listener(img, lang, lang_length)",
                            "Call"
                        ],
                        [
                            "internal_listener(img, lang, lang_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_358": {
                "variable": {
                    "value": "returns",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "returns",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lis_choices == y",
                            "Compare"
                        ],
                        [
                            "(returns & not_zero).float()",
                            "Call"
                        ],
                        [
                            "returns - LENGTH_PENALTY * (lang_length.to(returns.device).float() - 1)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(returns, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "variable": {
                    "value": "langs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "40",
                            "Constant"
                        ],
                        [
                            "40",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "len(vocab['w2i'].keys())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_262": {
                "input": {
                    "value": "lang",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lang.argmax(2)",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, max_len, len(vocab['w2i'].keys())).to(lang.device)",
                            "Call"
                        ],
                        [
                            "lang.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.one_hot(lang, num_classes=len(vocab['w2i'].keys()))",
                            "Call"
                        ],
                        [
                            "F.pad(lang, (0, 0, 0, max_len - lang.shape[1])).float()",
                            "Call"
                        ],
                        [
                            "lang.cuda()",
                            "Call"
                        ],
                        [
                            "lang[:, 1:].contiguous()",
                            "Call"
                        ],
                        [
                            "lang.long().view(batch_size * lang.size(1), len(vocab['w2i'].keys()))",
                            "Call"
                        ],
                        [
                            "F.one_hot(lang_onehot, num_classes=len(vocab['w2i'].keys())).cuda().float()",
                            "Call"
                        ],
                        [
                            "langs.squeeze()",
                            "Call"
                        ],
                        [
                            "langs[:, 0]",
                            "Subscript"
                        ],
                        [
                            "torch.cat((lang0.unsqueeze(0), lang1.unsqueeze(0)), 0)",
                            "Call"
                        ],
                        [
                            "best_lang",
                            "Name"
                        ],
                        [
                            "lang.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_283": {
                "*size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "img.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_214": {
                "variable": {
                    "value": "langs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(langs, lang)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "lang_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lang_lengths, lang_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "lang",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lang0.unsqueeze(0), lang1.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "lang_length",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(lang_length0.unsqueeze(0), lang_length1.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "Embedding_93": {
                "variable": {
                    "value": "speaker_embs",
                    "type": "Name",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['w2i'].keys())",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_99": {
                "variable": {
                    "value": "listener_embs",
                    "type": "Name",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['w2i'].keys())",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "list(speaker.parameters()) + list(listener.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_108": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "list(speaker.parameters()) + list(listener.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_116": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_90": {
                "variable": {
                    "value": "vocab",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "./models/ + args.dataset + /vocab.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_88": {
                "obj": {
                    "value": "vocab",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load('./models/' + args.dataset + '/vocab.pt')",
                            "Call"
                        ],
                        [
                            "data.init_vocab(langs)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./models/ + args.dataset + /vocab.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_135": {
                "variable": {
                    "value": "listener_embs",
                    "type": "Name",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab['w2i'].keys())",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "list(listener.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_176": {
                "variable": {
                    "value": "literal_listener",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "./models/shapeworld/generalization/ + args.generalization + /literal_listener_0.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_177": {
                "variable": {
                    "value": "literal_listener_val",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "./models/shapeworld/generalization/ + args.generalization + /literal_listener_1.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_179": {
                "variable": {
                    "value": "literal_listener",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "./models/ + args.dataset + /literal_listener_0.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_180": {
                "variable": {
                    "value": "literal_listener_val",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "./models/ + args.dataset + /literal_listener_1.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "literal_listener",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load('./models/shapeworld/generalization/' + args.generalization + '/literal_listener_0.pt')",
                            "Call"
                        ],
                        [
                            "torch.load('./models/' + args.dataset + '/literal_listener_0.pt')",
                            "Call"
                        ],
                        [
                            "best_listener",
                            "Name"
                        ]
                    ]
                },
                "f": {
                    "value": "output_file",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "best_speaker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./models/shapeworld/generalization/ + args.generalization + /literal_speaker.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_219": {
                "obj": {
                    "value": "best_speaker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./models/ + args.dataset + /literal_speaker.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "best_speaker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./models/ + random_file + .pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_258": {
                "obj": {
                    "value": "best_speaker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./models/shapeworld/generalization/ + args.generalization + /reinforce_speaker.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "best_speaker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./models/shapeworld/generalization/ + args.generalization + /literal_speaker.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "best_speaker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./models/ + args.dataset + /reinforce_speaker.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_265": {
                "obj": {
                    "value": "best_speaker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ],
                        [
                            "copy.deepcopy(speaker)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "./models/ + args.dataset + /amortized_speaker.pt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "vision.py": {
        "torch": {
            "Linear_35": {
                "variable": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_42": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "variable": {
                    "value": "x_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_44": {
                "variable": {
                    "value": "L_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.L.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "L_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "running_mean",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.data.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_131": {
                "variable": {
                    "value": "running_var",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.data.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_168": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_178": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.parametrized_layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_217": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_218": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_295": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_349": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_377": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_404": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_430": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_460": {
                "variable": {
                    "value": "relu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_461": {
                "variable": {
                    "value": "pool1",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_485": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "linear_72": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.fast",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_133": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(x.data.size()[1]).to(x.device)",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(x.data.size()[1]).to(x.device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_norm_143": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros(x.data.size()[1]).to(x.device)",
                            "Call"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.ones(x.data.size()[1]).to(x.device)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_166": {
                "variable": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_167": {
                "variable": {
                    "value": "self.BN",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_172": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_206": {
                "variable": {
                    "value": "self.C1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_213": {
                "variable": {
                    "value": "self.BN1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_214": {
                "variable": {
                    "value": "self.C2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_216": {
                "variable": {
                    "value": "self.BN2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_281": {
                "variable": {
                    "value": "self.C1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_283": {
                "variable": {
                    "value": "self.BN1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_284": {
                "variable": {
                    "value": "self.C2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_290": {
                "variable": {
                    "value": "self.BN2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_291": {
                "variable": {
                    "value": "self.C3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_293": {
                "variable": {
                    "value": "self.BN3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_456": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_458": {
                "variable": {
                    "value": "bn1",
                    "type": "Name",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_478": {
                "variable": {
                    "value": "avgpool",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_100": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_110": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias.fast",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_231": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_233": {
                "variable": {
                    "value": "self.BNshortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_307": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "3 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "1 if i == 0 else 64",
                            "IfExp"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "64",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}