{
    "action_predict.py": {
        "sklearn": {
            "accuracy_score_1106": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_data['data'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.round(test_results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "f1_score_1107": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_data['data'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.round(test_results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_1108": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_data['data'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "np.round(test_results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_curve_1109": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_data['data'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "test_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_model.predict(test_data['data'][0], batch_size=1, verbose=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "precision_score_1110": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_data['data'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.round(test_results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "recall_score_1111": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_data['data'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.round(test_results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_recall_curve_1112": {
                "variable": {
                    "value": "pre_recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_data['data'][1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "probas_pred": {
                    "value": "test_results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_model.predict(test_data['data'][0], batch_size=1, verbose=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "accuracy_score_1713": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "f1_score_1714": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_1715": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_curve_1716": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "np.mean(res, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "test_model.predict(data_test['data'][0], batch_size=8, verbose=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(results, (-1, data_test['effective_dimension'], 1))",
                            "Call"
                        ],
                        [
                            "np.mean(results, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ]
                    ]
                }
            },
            "precision_score_1717": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "recall_score_1718": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_recall_curve_1719": {
                "variable": {
                    "value": "pre_recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "np.mean(res, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "test_model.predict(data_test['data'][0], batch_size=8, verbose=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(results, (-1, data_test['effective_dimension'], 1))",
                            "Call"
                        ],
                        [
                            "np.mean(results, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ]
                    ]
                }
            },
            "make_pipeline_2446": {
                "variable": {
                    "value": "svm_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*steps": {
                    "value": "StandardScaler()",
                    "type": "Call",
                    "possible_values": []
                },
                "memory": {
                    "value": "LinearSVC(random_state=0, tol=1e-05, max_iter=num_iterations, class_weight=class_w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "accuracy_score_2517": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "f1_score_2518": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_2519": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_curve_2520": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "np.mean(res, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "test_model.predict(data_test['data'][0], batch_size=8, verbose=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(results, (-1, data_test['effective_dimension'], 1))",
                            "Call"
                        ],
                        [
                            "np.mean(results, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ]
                    ]
                }
            },
            "precision_score_2521": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "recall_score_2522": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_recall_curve_2523": {
                "variable": {
                    "value": "pre_recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "np.mean(res, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "test_model.predict(data_test['data'][0], batch_size=8, verbose=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(results, (-1, data_test['effective_dimension'], 1))",
                            "Call"
                        ],
                        [
                            "np.mean(results, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ]
                    ]
                }
            },
            "accuracy_score_2919": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "f1_score_2920": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_2921": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_curve_2922": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "np.mean(res, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "test_model.predict(data_test['data'][0], batch_size=8, verbose=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(results, (-1, data_test['effective_dimension'], 1))",
                            "Call"
                        ],
                        [
                            "np.mean(results, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ]
                    ]
                }
            },
            "precision_score_2923": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "recall_score_2924": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_recall_curve_2925": {
                "variable": {
                    "value": "pre_recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "np.mean(res, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "test_model.predict(data_test['data'][0], batch_size=8, verbose=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(results, (-1, data_test['effective_dimension'], 1))",
                            "Call"
                        ],
                        [
                            "np.mean(results, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ]
                    ]
                }
            },
            "accuracy_score_3351": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "f1_score_3352": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_auc_score_3353": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "roc_curve_3354": {
                "variable": {
                    "value": "roc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_score": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "np.mean(res, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "test_model.predict(data_test['data'][0], batch_size=8, verbose=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(results, (-1, data_test['effective_dimension'], 1))",
                            "Call"
                        ],
                        [
                            "np.mean(results, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ]
                    ]
                }
            },
            "precision_score_3355": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "recall_score_3356": {
                "variable": {
                    "value": "recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(results)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "precision_recall_curve_3357": {
                "variable": {
                    "value": "pre_recall",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data_rgb['data'][1]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, model_opts['obs_length'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(test_data['data_rgb'][1], (-1, test_data['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ],
                        [
                            "np.reshape(data_test['data'][1], (-1, data_test['effective_dimension'], 1))[:, 1, :]",
                            "Subscript"
                        ]
                    ]
                },
                "probas_pred": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "np.mean(res, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "(results_rgb + results_opt_flow) / 2.0",
                            "BinOp"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ],
                        [
                            "test_model.predict(data_test['data'][0], batch_size=8, verbose=1)",
                            "Call"
                        ],
                        [
                            "np.reshape(results, (-1, data_test['effective_dimension'], 1))",
                            "Call"
                        ],
                        [
                            "np.mean(results, axis=1)",
                            "Call"
                        ],
                        [
                            "{'acc': acc, 'auc': auc, 'f1': f1, 'roc': roc, 'precision': precision, 'recall': recall, 'pre_recall_curve': pre_recall}",
                            "Dict"
                        ]
                    ]
                }
            },
            "StandardScaler_2446": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LinearSVC_2447": {
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "tol": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "num_iterations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ]
                    ]
                },
                "class_weight": {
                    "value": "class_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.class_weights(model_opts['apply_class_weights'], data_train['count'])",
                            "Call"
                        ],
                        [
                            "self.class_weights(model_opts['apply_class_weights'], data_train['count'])",
                            "Call"
                        ],
                        [
                            "self.class_weights(model_opts['apply_class_weights'], data_train['count'])",
                            "Call"
                        ],
                        [
                            "self.class_weights(model_opts['apply_class_weights'], data_train['count'])",
                            "Call"
                        ],
                        [
                            "self.class_weights(model_opts['apply_class_weights'], data_train['count'])",
                            "Call"
                        ],
                        [
                            "self.class_weights(model_opts['apply_class_weights'], data_train['count'])",
                            "Call"
                        ],
                        [
                            "class_w",
                            "Method Argument"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "dot_3394": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "[score_first_part, h_t]",
                    "type": "List",
                    "possible_values": []
                },
                "b": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'attention_score' + modality",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dot_3397": {
                "variable": {
                    "value": "context_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "[hidden_states, attention_weights]",
                    "type": "List",
                    "possible_values": []
                },
                "b": {
                    "value": "[1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'context_vector' + modality",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concatenate_3398": {
                "variable": {
                    "value": "pre_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "[context_vector, h_t]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'attention_output' + modality",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_68": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_87": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "resize_102": {
                "variable": {
                    "value": "resized_image",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "target_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(int(resize_ratio * width), int(resize_ratio * height))",
                            "Tuple"
                        ]
                    ]
                },
                "size": {
                    "value": "Image.ANTIALIAS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "VGG19_281": {
                "variable": {
                    "value": "base_model",
                    "type": "variable",
                    "possible_values": []
                },
                "weights": {
                    "value": "imagenet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_282": {
                "variable": {
                    "value": "VGGmodel",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "base_model.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "base_model.get_layer('block4_pool').output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_model_1099": {
                "variable": {
                    "value": "test_model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "os.path.join(model_path, 'model.h5')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Model_1244": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_rnn(name='encoder')(inputs)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encoder_output)",
                            "Call"
                        ],
                        [
                            "self.create_stack_rnn(core_size)(inputs)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encoder_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_1285": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_rnn(name='encoder')(inputs)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encoder_output)",
                            "Call"
                        ],
                        [
                            "self.create_stack_rnn(core_size)(inputs)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encoder_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_1330": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_1377": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_1425": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_model_1701": {
                "variable": {
                    "value": "rgb_model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "os.path.join(model_path, 'rgb', 'model.h5')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_model_1706": {
                "variable": {
                    "value": "opt_flow_model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "os.path.join(model_path, 'opt_flow', 'model.h5')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Model_1884": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "context_net.inputs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(self._num_classes, activation=self._dense_activation, name='output_dense')(context_net.outputs[0])",
                            "Call"
                        ],
                        [
                            "Dense(self._num_classes, name='predictions', activation='sigmoid')(fc2_dropout)",
                            "Call"
                        ],
                        [
                            "model.layers[-1](fc2_dropout)",
                            "Call"
                        ],
                        [
                            "Dense(self._num_classes, name='predictions', activation='sigmoid')(fc2_dropout)",
                            "Call"
                        ],
                        [
                            "model.layers[-1](fc2_dropout)",
                            "Call"
                        ],
                        [
                            "Average()([temporal_model.output, rgb_model.output])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "Average()([x, rgb_model.output])",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_1931": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "data_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][1]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][1]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_type",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Model_1944": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=data_size, name='input_' + data_type)",
                            "Call"
                        ],
                        [
                            "Input(shape=data_size, name='input_' + data_type)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(out)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(out_final)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_1991": {
                "variable": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "data_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][1]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][1]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_type",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Input_2006": {
                "variable": {
                    "value": "x_in2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "data_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][1]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][0]",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes'][1]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'input2_' + data_type",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Model_2025": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=data_size, name='input_' + data_type)",
                            "Call"
                        ],
                        [
                            "Input(shape=data_size, name='input_' + data_type)",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(out)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(out_final)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_model_2901": {
                "variable": {
                    "value": "rgb_model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "os.path.join(model_path, 'rgb', 'model.h5')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_model_2902": {
                "variable": {
                    "value": "opt_flow_model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "os.path.join(model_path, 'opt_flow', 'model.h5')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Model_3326": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[rgb_model.input, temporal_model.input]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(self._num_classes, activation=self._dense_activation, name='output_dense')(context_net.outputs[0])",
                            "Call"
                        ],
                        [
                            "Dense(self._num_classes, name='predictions', activation='sigmoid')(fc2_dropout)",
                            "Call"
                        ],
                        [
                            "model.layers[-1](fc2_dropout)",
                            "Call"
                        ],
                        [
                            "Dense(self._num_classes, name='predictions', activation='sigmoid')(fc2_dropout)",
                            "Call"
                        ],
                        [
                            "model.layers[-1](fc2_dropout)",
                            "Call"
                        ],
                        [
                            "Average()([temporal_model.output, rgb_model.output])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "Average()([x, rgb_model.output])",
                            "Call"
                        ]
                    ]
                }
            },
            "load_model_3345": {
                "variable": {
                    "value": "test_model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "os.path.join(model_path, 'model.h5')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Model_3583": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_3753": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "norm_earlyfusion",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_3780": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_3988": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_4176": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_4365": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_4523": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_4718": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_4917": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_normalize_5102": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "norm_earlyfusion",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_5151": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_5376": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_5554": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "network_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "outputs": {
                    "value": "model_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(second_layer)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense')(x)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation='sigmoid', name='output_dense', activity_regularizer=regularizers.l2(0.001))(encodings)",
                            "Call"
                        ]
                    ]
                }
            },
            "GRU_1161": {
                "units": {
                    "value": "self._num_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_state": {
                    "value": "r_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "r_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "stateful": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "recurrent_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gru'",
                            "Method Argument"
                        ],
                        [
                            "'lstm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTM_1180": {
                "units": {
                    "value": "self._num_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "return_state": {
                    "value": "r_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "r_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "stateful": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "recurrent_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'gru'",
                            "Method Argument"
                        ],
                        [
                            "'lstm'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "RNN_1205": {
                "cell": {
                    "value": "cells",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "r_sequence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "return_state": {
                    "value": "r_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clear_session_2466": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Model_2785": {
                "inputs": {
                    "value": "model.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(self._num_classes, activation=self._dense_activation, name='output_dense')(context_net.outputs[0])",
                            "Call"
                        ],
                        [
                            "Dense(self._num_classes, name='predictions', activation='sigmoid')(fc2_dropout)",
                            "Call"
                        ],
                        [
                            "model.layers[-1](fc2_dropout)",
                            "Call"
                        ],
                        [
                            "Dense(self._num_classes, name='predictions', activation='sigmoid')(fc2_dropout)",
                            "Call"
                        ],
                        [
                            "model.layers[-1](fc2_dropout)",
                            "Call"
                        ],
                        [
                            "Average()([temporal_model.output, rgb_model.output])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "Average()([x, rgb_model.output])",
                            "Call"
                        ]
                    ]
                }
            },
            "clear_session_2788": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Model_3214": {
                "inputs": {
                    "value": "model.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(self._num_classes, activation=self._dense_activation, name='output_dense')(context_net.outputs[0])",
                            "Call"
                        ],
                        [
                            "Dense(self._num_classes, name='predictions', activation='sigmoid')(fc2_dropout)",
                            "Call"
                        ],
                        [
                            "model.layers[-1](fc2_dropout)",
                            "Call"
                        ],
                        [
                            "Dense(self._num_classes, name='predictions', activation='sigmoid')(fc2_dropout)",
                            "Call"
                        ],
                        [
                            "model.layers[-1](fc2_dropout)",
                            "Call"
                        ],
                        [
                            "Average()([temporal_model.output, rgb_model.output])",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "Average()([x, rgb_model.output])",
                            "Call"
                        ]
                    ]
                }
            },
            "plot_model_3328": {
                "model": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "C3DNet(freeze_conv_layers=self._freeze_conv_layers, dropout=self._dropout, dense_activation=self._dense_activation, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=context_net.inputs[0], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "self._conv_models[self._backbone](input_shape=data_params['data_sizes'][0], include_top=False, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "convert_to_fcn(net_model, classes=data_params.get('num_classes', 2), activation=data_params.get('activation', 'softmax'), pooling=self._pooling, features=data_params.get('features', False))",
                            "Call"
                        ],
                        [
                            "self._conv_model(input_shape=data_size, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "self.add_dropout(net_model, add_new_pred=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=[rgb_model.input, temporal_model.input], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ]
                    ]
                },
                "to_file": {
                    "value": "model_imgs/model.png",
                    "type": "str",
                    "possible_values": []
                },
                "show_shapes": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "show_layer_names": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "rankdir": {
                    "value": "TB",
                    "type": "str",
                    "possible_values": []
                },
                "expand_nested": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dpi": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_3390": {
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(hidden_states.shape[2])",
                            "Call"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "'attention_score_vec' + modality",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Lambda_3393": {
                "function": {
                    "value": "lambda x: x[:, -1, :]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "(hidden_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'last_hidden_state' + modality",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Activation_3395": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'attention_weight' + modality",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_3399": {
                "units": {
                    "value": "dense_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "activation": {
                    "value": "tanh",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'attention_vector' + modality",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "plot_model_3586": {
                "model": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "C3DNet(freeze_conv_layers=self._freeze_conv_layers, dropout=self._dropout, dense_activation=self._dense_activation, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=context_net.inputs[0], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "self._conv_models[self._backbone](input_shape=data_params['data_sizes'][0], include_top=False, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "convert_to_fcn(net_model, classes=data_params.get('num_classes', 2), activation=data_params.get('activation', 'softmax'), pooling=self._pooling, features=data_params.get('features', False))",
                            "Call"
                        ],
                        [
                            "self._conv_model(input_shape=data_size, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "self.add_dropout(net_model, add_new_pred=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=[rgb_model.input, temporal_model.input], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ]
                    ]
                },
                "to_file": {
                    "value": "model_imgs/MASK_PCPA.png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "plot_model_3783": {
                "model": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "C3DNet(freeze_conv_layers=self._freeze_conv_layers, dropout=self._dropout, dense_activation=self._dense_activation, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=context_net.inputs[0], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "self._conv_models[self._backbone](input_shape=data_params['data_sizes'][0], include_top=False, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "convert_to_fcn(net_model, classes=data_params.get('num_classes', 2), activation=data_params.get('activation', 'softmax'), pooling=self._pooling, features=data_params.get('features', False))",
                            "Call"
                        ],
                        [
                            "self._conv_model(input_shape=data_size, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "self.add_dropout(net_model, add_new_pred=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=[rgb_model.input, temporal_model.input], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ]
                    ]
                },
                "to_file": {
                    "value": "model_imgs/MASK_PCPA_2.png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "plot_model_3991": {
                "model": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "C3DNet(freeze_conv_layers=self._freeze_conv_layers, dropout=self._dropout, dense_activation=self._dense_activation, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=context_net.inputs[0], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "self._conv_models[self._backbone](input_shape=data_params['data_sizes'][0], include_top=False, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "convert_to_fcn(net_model, classes=data_params.get('num_classes', 2), activation=data_params.get('activation', 'softmax'), pooling=self._pooling, features=data_params.get('features', False))",
                            "Call"
                        ],
                        [
                            "self._conv_model(input_shape=data_size, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "self.add_dropout(net_model, add_new_pred=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=[rgb_model.input, temporal_model.input], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ]
                    ]
                },
                "to_file": {
                    "value": "model_imgs/MASK_PCPA_3.png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "plot_model_4179": {
                "model": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "C3DNet(freeze_conv_layers=self._freeze_conv_layers, dropout=self._dropout, dense_activation=self._dense_activation, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=context_net.inputs[0], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "self._conv_models[self._backbone](input_shape=data_params['data_sizes'][0], include_top=False, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "convert_to_fcn(net_model, classes=data_params.get('num_classes', 2), activation=data_params.get('activation', 'softmax'), pooling=self._pooling, features=data_params.get('features', False))",
                            "Call"
                        ],
                        [
                            "self._conv_model(input_shape=data_size, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "self.add_dropout(net_model, add_new_pred=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=[rgb_model.input, temporal_model.input], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ]
                    ]
                },
                "to_file": {
                    "value": "model_imgs/MASK_C3D.png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "plot_model_4368": {
                "model": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "C3DNet(freeze_conv_layers=self._freeze_conv_layers, dropout=self._dropout, dense_activation=self._dense_activation, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=context_net.inputs[0], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "self._conv_models[self._backbone](input_shape=data_params['data_sizes'][0], include_top=False, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "convert_to_fcn(net_model, classes=data_params.get('num_classes', 2), activation=data_params.get('activation', 'softmax'), pooling=self._pooling, features=data_params.get('features', False))",
                            "Call"
                        ],
                        [
                            "self._conv_model(input_shape=data_size, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "self.add_dropout(net_model, add_new_pred=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=[rgb_model.input, temporal_model.input], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ]
                    ]
                },
                "to_file": {
                    "value": "model_imgs/ORI_C3D.png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "plot_model_4526": {
                "model": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "C3DNet(freeze_conv_layers=self._freeze_conv_layers, dropout=self._dropout, dense_activation=self._dense_activation, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=context_net.inputs[0], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "self._conv_models[self._backbone](input_shape=data_params['data_sizes'][0], include_top=False, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "convert_to_fcn(net_model, classes=data_params.get('num_classes', 2), activation=data_params.get('activation', 'softmax'), pooling=self._pooling, features=data_params.get('features', False))",
                            "Call"
                        ],
                        [
                            "self._conv_model(input_shape=data_size, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "self.add_dropout(net_model, add_new_pred=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=[rgb_model.input, temporal_model.input], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ]
                    ]
                },
                "to_file": {
                    "value": "model_imgs/PCPA.png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "plot_model_4721": {
                "model": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "C3DNet(freeze_conv_layers=self._freeze_conv_layers, dropout=self._dropout, dense_activation=self._dense_activation, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=context_net.inputs[0], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "self._conv_models[self._backbone](input_shape=data_params['data_sizes'][0], include_top=False, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "convert_to_fcn(net_model, classes=data_params.get('num_classes', 2), activation=data_params.get('activation', 'softmax'), pooling=self._pooling, features=data_params.get('features', False))",
                            "Call"
                        ],
                        [
                            "self._conv_model(input_shape=data_size, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "self.add_dropout(net_model, add_new_pred=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=[rgb_model.input, temporal_model.input], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ]
                    ]
                },
                "to_file": {
                    "value": "model_imgs/PCPA_2D.png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "plot_model_4920": {
                "model": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "C3DNet(freeze_conv_layers=self._freeze_conv_layers, dropout=self._dropout, dense_activation=self._dense_activation, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=context_net.inputs[0], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "self._conv_models[self._backbone](input_shape=data_params['data_sizes'][0], include_top=False, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "convert_to_fcn(net_model, classes=data_params.get('num_classes', 2), activation=data_params.get('activation', 'softmax'), pooling=self._pooling, features=data_params.get('features', False))",
                            "Call"
                        ],
                        [
                            "self._conv_model(input_shape=data_size, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "self.add_dropout(net_model, add_new_pred=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=[rgb_model.input, temporal_model.input], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ]
                    ]
                },
                "to_file": {
                    "value": "model_imgs/MASK_PCPA_2D.png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "plot_model_5154": {
                "model": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "C3DNet(freeze_conv_layers=self._freeze_conv_layers, dropout=self._dropout, dense_activation=self._dense_activation, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=context_net.inputs[0], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "self._conv_models[self._backbone](input_shape=data_params['data_sizes'][0], include_top=False, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "convert_to_fcn(net_model, classes=data_params.get('num_classes', 2), activation=data_params.get('activation', 'softmax'), pooling=self._pooling, features=data_params.get('features', False))",
                            "Call"
                        ],
                        [
                            "self._conv_model(input_shape=data_size, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "self.add_dropout(net_model, add_new_pred=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=[rgb_model.input, temporal_model.input], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ]
                    ]
                },
                "to_file": {
                    "value": "model_imgs/MASK_PCPA_2_2D.png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "plot_model_5379": {
                "model": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "C3DNet(freeze_conv_layers=self._freeze_conv_layers, dropout=self._dropout, dense_activation=self._dense_activation, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=context_net.inputs[0], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "self._conv_models[self._backbone](input_shape=data_params['data_sizes'][0], include_top=False, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "convert_to_fcn(net_model, classes=data_params.get('num_classes', 2), activation=data_params.get('activation', 'softmax'), pooling=self._pooling, features=data_params.get('features', False))",
                            "Call"
                        ],
                        [
                            "self._conv_model(input_shape=data_size, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "self.add_dropout(net_model, add_new_pred=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=[rgb_model.input, temporal_model.input], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ]
                    ]
                },
                "to_file": {
                    "value": "model_imgs/MASK_PCPA_3_2D.png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "plot_model_5557": {
                "model": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=encoder_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "C3DNet(freeze_conv_layers=self._freeze_conv_layers, dropout=self._dropout, dense_activation=self._dense_activation, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "I3DNet(freeze_conv_layers=self._freeze_conv_layers, weights=self._weights, dense_activation=self._dense_activation, dropout=self._dropout, num_channels=num_channels, include_top=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=context_net.inputs[0], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=x_in, outputs=_output)",
                            "Call"
                        ],
                        [
                            "self._conv_models[self._backbone](input_shape=data_params['data_sizes'][0], include_top=False, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "convert_to_fcn(net_model, classes=data_params.get('num_classes', 2), activation=data_params.get('activation', 'softmax'), pooling=self._pooling, features=data_params.get('features', False))",
                            "Call"
                        ],
                        [
                            "self._conv_model(input_shape=data_size, include_top=True, weights=self._weights)",
                            "Call"
                        ],
                        [
                            "self.add_dropout(net_model, add_new_pred=True)",
                            "Call"
                        ],
                        [
                            "Model(inputs=[rgb_model.input, temporal_model.input], outputs=output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ],
                        [
                            "Model(inputs=network_inputs, outputs=model_output)",
                            "Call"
                        ]
                    ]
                },
                "to_file": {
                    "value": "model_imgs/MASK_PCPA_4_2D.png",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_85": {
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "tf.compat.v1.GraphDef.FromString(file_handle.read())",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_1242": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_1283": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_1327": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_1375": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_1423": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_1881": {
                "units": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self._dense_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConvLSTM2D_1932": {
                "filters": {
                    "value": "self._filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self._kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "recurrent_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "recurrent_dropout": {
                    "value": "self._recurrent_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_1943": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConvLSTM2D_1992": {
                "filters": {
                    "value": "self._filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self._kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "recurrent_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "recurrent_dropout": {
                    "value": "self._recurrent_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvLSTM2D_2007": {
                "filters": {
                    "value": "self._filter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self._kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "recurrent_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias_regularizer": {
                    "value": "self._regularizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dropout": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "recurrent_dropout": {
                    "value": "self._recurrent_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Concatenate_2021": {
                "name": {
                    "value": "concat_modalities",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_2024": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_2777": {
                "rate": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_2779": {
                "rate": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_3206": {
                "rate": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_3208": {
                "rate": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_3506": {
                "shape": {
                    "value": "data_sizes[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Input_3529": {
                "shape": {
                    "value": "data_sizes[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input2_' + data_types[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_3579": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "regularizers.l2(0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_3692": {
                "shape": {
                    "value": "data_sizes[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Input_3714": {
                "shape": {
                    "value": "data_sizes[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input2_' + data_types[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_3752": {
                "name": {
                    "value": "concat_early",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_3776": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "regularizers.l2(0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_3889": {
                "shape": {
                    "value": "data_sizes[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Input_3911": {
                "shape": {
                    "value": "data_sizes[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input2_' + data_types[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_3947": {
                "name": {
                    "value": "concat_early1",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Concatenate_3951": {
                "name": {
                    "value": "concat_early2",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_3984": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "regularizers.l2(0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_4095": {
                "shape": {
                    "value": "data_sizes[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Input_4116": {
                "shape": {
                    "value": "data_sizes[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input2_' + data_types[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_4172": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "regularizers.l2(0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_4283": {
                "shape": {
                    "value": "data_sizes[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_4361": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "regularizers.l2(0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_4519": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "regularizers.l2(0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_4676": {
                "shape": {
                    "value": "data_sizes[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_cnn_' + data_types[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_4714": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "regularizers.l2(0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_4871": {
                "shape": {
                    "value": "data_sizes[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_cnn_' + data_types[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Input_4875": {
                "shape": {
                    "value": "data_sizes[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_cnn2_' + data_types[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_4913": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "regularizers.l2(0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Concatenate_5101": {
                "name": {
                    "value": "concat_early",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_5147": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "regularizers.l2(0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Concatenate_5334": {
                "name": {
                    "value": "concat_early1",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Concatenate_5337": {
                "name": {
                    "value": "concat_early2",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Concatenate_5340": {
                "name": {
                    "value": "concat_early3",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Concatenate_5343": {
                "name": {
                    "value": "concat_early4",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_5372": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "regularizers.l2(0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Concatenate_5523": {
                "name": {
                    "value": "concat_early3",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Concatenate_5526": {
                "name": {
                    "value": "concat_early4",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dense_5550": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "output_dense",
                    "type": "str",
                    "possible_values": []
                },
                "activity_regularizer": {
                    "value": "regularizers.l2(0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Input_1232": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_1236": {
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Input_1275": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_1278": {
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Input_1319": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_1323": {
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Input_1364": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_1369": {
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Input_1412": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_1937": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_1997": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_2012": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_2781": {
                "units": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Add_3189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_3210": {
                "units": {
                    "value": "self._num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Average_3292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Average_3324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_3513": {
                "name": {
                    "value": "flatten_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_3514": {
                "name": {
                    "value": "'emb_' + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_3519": {
                "name": {
                    "value": "'emb_' + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_3540": {
                "name": {
                    "value": "flatten_output_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_3541": {
                "name": {
                    "value": "'emb_' + data_types[1] + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_3546": {
                "name": {
                    "value": "'emb_' + data_types[1] + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_3555": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Lambda_3560": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_3562": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Concatenate_3571": {
                "name": {
                    "value": "concat_modalities",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_3699": {
                "name": {
                    "value": "flatten_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_3700": {
                "name": {
                    "value": "'emb_' + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_3705": {
                "name": {
                    "value": "'emb_' + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_3725": {
                "name": {
                    "value": "flatten_output_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_3726": {
                "name": {
                    "value": "'emb_' + data_types[1] + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_3731": {
                "name": {
                    "value": "'emb_' + data_types[1] + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_3742": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Lambda_3757": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_3759": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Concatenate_3768": {
                "name": {
                    "value": "concat_modalities",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_3896": {
                "name": {
                    "value": "flatten_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_3897": {
                "name": {
                    "value": "'emb_' + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_3902": {
                "name": {
                    "value": "'emb_' + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_3922": {
                "name": {
                    "value": "flatten_output_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_3923": {
                "name": {
                    "value": "'emb_' + data_types[1] + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_3928": {
                "name": {
                    "value": "'emb_' + data_types[1] + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_3939": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Lambda_3965": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_3967": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Concatenate_3976": {
                "name": {
                    "value": "concat_modalities_final",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_4102": {
                "name": {
                    "value": "flatten_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_4103": {
                "name": {
                    "value": "'emb_' + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_4128": {
                "name": {
                    "value": "flatten_output_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_4129": {
                "name": {
                    "value": "'emb_' + data_types[1] + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_4151": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_4153": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Concatenate_4164": {
                "name": {
                    "value": "concat_modalities",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_4291": {
                "name": {
                    "value": "flatten_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_4292": {
                "name": {
                    "value": "'emb_' + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_4340": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Concatenate_4353": {
                "name": {
                    "value": "concat_modalities",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_4480": {
                "name": {
                    "value": "flatten_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_4481": {
                "name": {
                    "value": "'emb_' + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_4486": {
                "name": {
                    "value": "'emb_' + self._backbone",
                    "type": "BinOp",
                    "possible_values": []
                },
                "units": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ],
                        [
                            "self._num_hidden_units",
                            "Attribute"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_4493": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Lambda_4499": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Concatenate_4511": {
                "name": {
                    "value": "concat_modalities",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Input_4688": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_4706": {
                "name": {
                    "value": "concat_modalities",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Input_4887": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_4905": {
                "name": {
                    "value": "concat_modalities",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Input_5091": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Input_5328": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_5363": {
                "name": {
                    "value": "concat_modalities",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Input_5509": {
                "shape": {
                    "value": "data_sizes[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[data_type_sizes_dict[feature_type], data_type_sizes_dict['optical_flow']]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "data_params['data_sizes']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "'input_' + data_types[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Concatenate_5541": {
                "name": {
                    "value": "concat_modalities",
                    "type": "str",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "preprocess_input_451": {
                "variable": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid, encoding='bytes')",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "block4_pool_features",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool2d(img_features, ksize=[14, 14], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "img_features.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "img_features.ravel()",
                            "Call"
                        ],
                        [
                            "preprocess_input(img_features)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "block4_pool_features",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool2d(img_features, ksize=[14, 14], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "img_features.numpy()",
                            "Call"
                        ],
                        [
                            "convnet.predict(expanded_img)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode=crop_mode, size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode='pad_resize', size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode='pad_resize', size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "pickle.load(fid)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid, encoding='bytes')",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "img_features.ravel()",
                            "Call"
                        ],
                        [
                            "read_flow_file(cached_path)",
                            "Call"
                        ],
                        [
                            "self._get_img_features(cached_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "Concatenate_1420": {
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_1941": {
                "name": {
                    "value": "flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_2001": {
                "name": {
                    "value": "flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_2016": {
                "name": {
                    "value": "flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_3191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_3192": {
                "filters": {
                    "value": "l2.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_3567": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Lambda_3568": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Dropout_3764": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Lambda_3765": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Dropout_3972": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Lambda_3973": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Dropout_4507": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Lambda_4508": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Dropout_4702": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Lambda_4703": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Dropout_4901": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Lambda_4902": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Dropout_5359": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Lambda_5360": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Dropout_5537": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Lambda_5538": {
                "function": {
                    "value": "lambda x: K.expand_dims(x, axis=1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_img_345": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "imp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(seq, bbox_seq[i], pid)",
                            "Call"
                        ],
                        [
                            "imp.replace('_flip', '')",
                            "Call"
                        ],
                        [
                            "zip(seq, bbox_seq[i], pid)",
                            "Call"
                        ]
                    ]
                },
                "target_size": {
                    "value": "(224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "img_to_array_346": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "img": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.load_img(imp, target_size=(224, 224))",
                            "Call"
                        ],
                        [
                            "Image.fromarray(cv2.cvtColor(img_features, cv2.COLOR_BGR2RGB))",
                            "Call"
                        ]
                    ]
                }
            },
            "preprocess_input_348": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_351": {
                "variable": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid, encoding='bytes')",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "block4_pool_features",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool2d(img_features, ksize=[14, 14], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "img_features.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "img_features.ravel()",
                            "Call"
                        ],
                        [
                            "preprocess_input(img_features)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "block4_pool_features",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool2d(img_features, ksize=[14, 14], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "img_features.numpy()",
                            "Call"
                        ],
                        [
                            "convnet.predict(expanded_img)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode=crop_mode, size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode='pad_resize', size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode='pad_resize', size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "pickle.load(fid)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid, encoding='bytes')",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "img_features.ravel()",
                            "Call"
                        ],
                        [
                            "read_flow_file(cached_path)",
                            "Call"
                        ],
                        [
                            "self._get_img_features(cached_path)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[14, 14]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_352": {
                "variable": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid, encoding='bytes')",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "block4_pool_features",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool2d(img_features, ksize=[14, 14], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "img_features.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "img_features.ravel()",
                            "Call"
                        ],
                        [
                            "preprocess_input(img_features)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "block4_pool_features",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool2d(img_features, ksize=[14, 14], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "img_features.numpy()",
                            "Call"
                        ],
                        [
                            "convnet.predict(expanded_img)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode=crop_mode, size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode='pad_resize', size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode='pad_resize', size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "pickle.load(fid)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid, encoding='bytes')",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "img_features.ravel()",
                            "Call"
                        ],
                        [
                            "read_flow_file(cached_path)",
                            "Call"
                        ],
                        [
                            "self._get_img_features(cached_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_3560": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_3562": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_3757": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_3759": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_3965": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_3967": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_4151": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_4153": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_4340": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_4499": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "img_to_array_385": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "img": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.load_img(imp, target_size=(224, 224))",
                            "Call"
                        ],
                        [
                            "Image.fromarray(cv2.cvtColor(img_features, cv2.COLOR_BGR2RGB))",
                            "Call"
                        ]
                    ]
                }
            },
            "preprocess_input_387": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "avg_pool2d_390": {
                "variable": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid, encoding='bytes')",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "block4_pool_features",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool2d(img_features, ksize=[14, 14], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "img_features.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "img_features.ravel()",
                            "Call"
                        ],
                        [
                            "preprocess_input(img_features)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "block4_pool_features",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool2d(img_features, ksize=[14, 14], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "img_features.numpy()",
                            "Call"
                        ],
                        [
                            "convnet.predict(expanded_img)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode=crop_mode, size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode='pad_resize', size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode='pad_resize', size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "pickle.load(fid)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid, encoding='bytes')",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "img_features.ravel()",
                            "Call"
                        ],
                        [
                            "read_flow_file(cached_path)",
                            "Call"
                        ],
                        [
                            "self._get_img_features(cached_path)",
                            "Call"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[14, 14]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_391": {
                "variable": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid, encoding='bytes')",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "block4_pool_features",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool2d(img_features, ksize=[14, 14], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "img_features.numpy()",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "img_features.ravel()",
                            "Call"
                        ],
                        [
                            "preprocess_input(img_features)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "block4_pool_features",
                            "variable"
                        ],
                        [
                            "tf.nn.avg_pool2d(img_features, ksize=[14, 14], strides=[1, 1, 1, 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "img_features.numpy()",
                            "Call"
                        ],
                        [
                            "convnet.predict(expanded_img)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "cv2.resize(img_data, target_dim)",
                            "Call"
                        ],
                        [
                            "cv2.flip(img_features, 1)",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode=crop_mode, size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode='pad_resize', size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "img_pad(cropped_image, mode='pad_resize', size=target_dim[0])",
                            "Call"
                        ],
                        [
                            "pickle.load(fid)",
                            "Call"
                        ],
                        [
                            "pickle.load(fid, encoding='bytes')",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.amax(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.squeeze(img_features)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "np.average(img_features, axis=0)",
                            "Call"
                        ],
                        [
                            "img_features.ravel()",
                            "Call"
                        ],
                        [
                            "read_flow_file(cached_path)",
                            "Call"
                        ],
                        [
                            "self._get_img_features(cached_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_3568": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_3765": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_3973": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_4508": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_4703": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_4902": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_5360": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_5538": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "image.img_to_array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.applications.vgg19.preprocess_input(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(network_inputs[i])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=2)([x, network_inputs[i]])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[i], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "self.fuse_layers(rgb_fuse_layer, layer.output)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='final_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities_final', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Flatten(name='flatten_output_2')(conv3d_model2.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + data_types[1] + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model2.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[1])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_output')(conv3d_model.output)",
                            "Call"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_model.output",
                            "Attribute"
                        ],
                        [
                            "Dense(name='emb_' + self._backbone, units=attention_size, activation='sigmoid')(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(encoder_outputs[0])",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early', axis=2)(earlyfusion)",
                            "Call"
                        ],
                        [
                            "tf.nn.l2_normalize(x, 2, epsilon=1e-12, name='norm_earlyfusion')",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early1', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early2', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc0_' + data_types[0], r_sequence=return_sequence)(network_inputs[0])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc1_' + data_types[1], r_sequence=return_sequence)(network_inputs[1])",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc2_' + data_types[2], r_sequence=return_sequence)(network_inputs[2])",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early3', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc3_' + data_types[3], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_early4', axis=2)(current)",
                            "Call"
                        ],
                        [
                            "self._rnn(name='enc4_' + data_types[4], r_sequence=return_sequence)(x)",
                            "Call"
                        ],
                        [
                            "attention_3d_block(enc_out, dense_size=attention_size, modality='_' + data_types[i])",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.expand_dims(x, axis=1))(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(name='concat_modalities', axis=1)(att_enc_out)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "jaad_data.py": {
        "sklearn": {
            "train_test_split_708": {
                "variable": {
                    "value": "(train_samples, test_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "ped_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "ratios[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[0.5, 0.4, 0.1]",
                            "List"
                        ],
                        [
                            "[0.5, 0.5]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_712": {
                "variable": {
                    "value": "(test_samples, val_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "test_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "ratios[1] / sum(ratios[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "KFold_748": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "num_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "pie_data.py": {
        "sklearn": {
            "train_test_split_744": {
                "variable": {
                    "value": "(train_samples, test_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "ped_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "ratios[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[0.5, 0.4, 0.1]",
                            "List"
                        ],
                        [
                            "[0.5, 0.5]",
                            "List"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_748": {
                "variable": {
                    "value": "(test_samples, val_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "test_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "ratios[1] / sum(ratios[1:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "KFold_784": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "num_folds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "accuracy_score_513": {
                "y_true": {
                    "value": "gt[tte_idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "np.round(y[tte_idx])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "load_img_123": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "path": {
                    "value": "img_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "base_models.py": {
        "tensorflow": {
            "Model_59": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=input_shape)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "Input(shape=(16, 224, 224, num_channels))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Conv2D(filters=96, kernel_size=11, strides=4, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=5, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten')(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(classes, activation=classifier_activation)(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D()(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(6, 6), strides=(1, 1), padding='valid')(model.output)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=classes, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Activation(activation)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.max(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='fcn_features')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(inputs, 64, 7, 7, 7, strides=(2, 2, 2), padding='same', name='Conv3d_1a_7x7')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_2a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 64, 1, 1, 1, strides=(1, 1, 1), padding='same', name='Conv3d_2b_1x1')",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 192, 3, 3, 3, strides=(1, 1, 1), padding='same', name='Conv3d_2c_3x3')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_3a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((3, 3, 3), strides=(2, 2, 2), padding='same', name='MaxPool2d_4a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4d')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4e')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4f')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((2, 2, 2), strides=(2, 2, 2), padding='same', name='MaxPool2d_5a_2x2')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_5b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, 7, 7), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Dropout(dropout)(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, classes, 1, 1, 1, padding='same', use_bias=True, use_activation_fn=False, use_bn=False, name='Conv3d_6a_1x1_new')",
                            "Call"
                        ],
                        [
                            "Reshape((num_frames_remaining, classes))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=1, keepdims=False), output_shape=lambda s: (s[0], s[2]))(x)",
                            "Call"
                        ],
                        [
                            "Activation(dense_activation, name='prediction')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, h, w), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Conv3D(filters, (num_frames, num_row, num_col), strides=strides, padding=padding, use_bias=use_bias, name=conv_name)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, scale=False, name=bn_name)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu', name=name)(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "alexnet",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_143": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "model_fc8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(487, activation=dense_activation, name='fc8')(model_fc7)",
                            "Call"
                        ],
                        [
                            "Dense(487, activation=dense_activation, name='fc8_2')(model_fc7)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_206": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "model_fc8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(487, activation=dense_activation, name='fc8')(model_fc7)",
                            "Call"
                        ],
                        [
                            "Dense(487, activation=dense_activation, name='fc8_2')(model_fc7)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_294": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(16, 224, 224, num_channels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_27": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(227, 227, 3)",
                            "Tuple"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Model_97": {
                "*args": {
                    "value": "model.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Conv2D(filters=96, kernel_size=11, strides=4, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=5, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten')(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(classes, activation=classifier_activation)(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D()(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(6, 6), strides=(1, 1), padding='valid')(model.output)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=classes, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Activation(activation)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.max(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='fcn_features')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(inputs, 64, 7, 7, 7, strides=(2, 2, 2), padding='same', name='Conv3d_1a_7x7')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_2a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 64, 1, 1, 1, strides=(1, 1, 1), padding='same', name='Conv3d_2b_1x1')",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 192, 3, 3, 3, strides=(1, 1, 1), padding='same', name='Conv3d_2c_3x3')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_3a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((3, 3, 3), strides=(2, 2, 2), padding='same', name='MaxPool2d_4a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4d')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4e')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4f')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((2, 2, 2), strides=(2, 2, 2), padding='same', name='MaxPool2d_5a_2x2')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_5b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, 7, 7), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Dropout(dropout)(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, classes, 1, 1, 1, padding='same', use_bias=True, use_activation_fn=False, use_bn=False, name='Conv3d_6a_1x1_new')",
                            "Call"
                        ],
                        [
                            "Reshape((num_frames_remaining, classes))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=1, keepdims=False), output_shape=lambda s: (s[0], s[2]))(x)",
                            "Call"
                        ],
                        [
                            "Activation(dense_activation, name='prediction')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, h, w), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Conv3D(filters, (num_frames, num_row, num_col), strides=strides, padding=padding, use_bias=use_bias, name=conv_name)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, scale=False, name=bn_name)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu', name=name)(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Input_101": {
                "shape": {
                    "value": "(16, 112, 112, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_149": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "model_fc8_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation=dense_activation, name='fc8')(model_fc7)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation=dense_activation, name='fc8_2')(model_fc7)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_156": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "model_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Flatten(name='flatten')(model)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_2')(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_162": {
                "shape": {
                    "value": "(16, 112, 112, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_212": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "model_fc8_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(1, activation=dense_activation, name='fc8')(model_fc7)",
                            "Call"
                        ],
                        [
                            "Dense(1, activation=dense_activation, name='fc8_2')(model_fc7)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_219": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "model_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Flatten(name='flatten')(model)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten_2')(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "Model_456": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=input_shape)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "Input(shape=(16, 224, 224, num_channels))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Conv2D(filters=96, kernel_size=11, strides=4, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=5, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten')(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(classes, activation=classifier_activation)(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D()(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(6, 6), strides=(1, 1), padding='valid')(model.output)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=classes, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Activation(activation)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.max(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='fcn_features')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(inputs, 64, 7, 7, 7, strides=(2, 2, 2), padding='same', name='Conv3d_1a_7x7')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_2a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 64, 1, 1, 1, strides=(1, 1, 1), padding='same', name='Conv3d_2b_1x1')",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 192, 3, 3, 3, strides=(1, 1, 1), padding='same', name='Conv3d_2c_3x3')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_3a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((3, 3, 3), strides=(2, 2, 2), padding='same', name='MaxPool2d_4a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4d')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4e')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4f')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((2, 2, 2), strides=(2, 2, 2), padding='same', name='MaxPool2d_5a_2x2')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_5b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, 7, 7), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Dropout(dropout)(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, classes, 1, 1, 1, padding='same', use_bias=True, use_activation_fn=False, use_bn=False, name='Conv3d_6a_1x1_new')",
                            "Call"
                        ],
                        [
                            "Reshape((num_frames_remaining, classes))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=1, keepdims=False), output_shape=lambda s: (s[0], s[2]))(x)",
                            "Call"
                        ],
                        [
                            "Activation(dense_activation, name='prediction')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, h, w), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Conv3D(filters, (num_frames, num_row, num_col), strides=strides, padding=padding, use_bias=use_bias, name=conv_name)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, scale=False, name=bn_name)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu', name=name)(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "i3d_inception",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_466": {
                "variable": {
                    "value": "net_model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=input_shape)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "variable"
                        ],
                        [
                            "Input(shape=(16, 224, 224, num_channels))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Conv2D(filters=96, kernel_size=11, strides=4, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=5, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten')(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(classes, activation=classifier_activation)(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D()(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(6, 6), strides=(1, 1), padding='valid')(model.output)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=classes, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Activation(activation)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.max(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='fcn_features')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(inputs, 64, 7, 7, 7, strides=(2, 2, 2), padding='same', name='Conv3d_1a_7x7')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_2a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 64, 1, 1, 1, strides=(1, 1, 1), padding='same', name='Conv3d_2b_1x1')",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 192, 3, 3, 3, strides=(1, 1, 1), padding='same', name='Conv3d_2c_3x3')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_3a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((3, 3, 3), strides=(2, 2, 2), padding='same', name='MaxPool2d_4a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4d')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4e')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4f')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((2, 2, 2), strides=(2, 2, 2), padding='same', name='MaxPool2d_5a_2x2')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_5b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, 7, 7), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Dropout(dropout)(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, classes, 1, 1, 1, padding='same', use_bias=True, use_activation_fn=False, use_bn=False, name='Conv3d_6a_1x1_new')",
                            "Call"
                        ],
                        [
                            "Reshape((num_frames_remaining, classes))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=1, keepdims=False), output_shape=lambda s: (s[0], s[2]))(x)",
                            "Call"
                        ],
                        [
                            "Activation(dense_activation, name='prediction')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, h, w), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Conv3D(filters, (num_frames, num_row, num_col), strides=strides, padding=padding, use_bias=use_bias, name=conv_name)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, scale=False, name=bn_name)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu', name=name)(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "i3d_no_top",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_32": {
                "filters": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "11",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_33": {
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_34": {
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_35": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_36": {
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding2D_37": {
                "padding": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_38": {
                "filters": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPadding2D_40": {
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_41": {
                "filters": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ZeroPadding2D_43": {
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_44": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_45": {
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "BatchNormalization_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_84": {
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_85": {
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4096",
                            "int"
                        ],
                        [
                            "2048",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_86": {
                "filters": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_116": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_117": {
                "pool_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_119": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_120": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_122": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_123": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_124": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_126": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_127": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_128": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_130": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv5a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_131": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv5b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding3D_132": {
                "padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "zeropad5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_133": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_134": {
                "name": {
                    "value": "flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_137": {
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "fc6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_138": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_139": {
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "fc7",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_140": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_141": {
                "units": {
                    "value": "487",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "dense_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'softmax'",
                            "Method Argument"
                        ],
                        [
                            "'softmax'",
                            "Method Argument"
                        ],
                        [
                            "'softmax'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "fc8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_179": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_180": {
                "pool_size": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool1_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_182": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv2_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_183": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool2_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_185": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3a_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_186": {
                "filters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3b_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_187": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool3_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_189": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4a_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_190": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv4b_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_191": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool4_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_193": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv5a_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_194": {
                "filters": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv5b_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ZeroPadding3D_195": {
                "padding": {
                    "value": "(0, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "zeropad5_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_196": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "pool5_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_197": {
                "name": {
                    "value": "flatten_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_200": {
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "fc6_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_201": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_202": {
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "fc7_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_203": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_204": {
                "units": {
                    "value": "487",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "dense_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'softmax'",
                            "Method Argument"
                        ],
                        [
                            "'softmax'",
                            "Method Argument"
                        ],
                        [
                            "'softmax'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "fc8_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_300": {
                "pool_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool2d_2a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_305": {
                "pool_size": {
                    "value": "(1, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool2d_3a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_316": {
                "pool_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool2d_3b_3a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_319": {
                "axis": {
                    "value": "channel_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "Mixed_3b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_330": {
                "pool_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool2d_3c_3a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_333": {
                "axis": {
                    "value": "channel_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "Mixed_3c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_336": {
                "pool_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool2d_4a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_347": {
                "pool_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool2d_4b_3a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_350": {
                "axis": {
                    "value": "channel_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "Mixed_4b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_361": {
                "pool_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool2d_4c_3a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_364": {
                "axis": {
                    "value": "channel_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "Mixed_4c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_375": {
                "pool_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool2d_4d_3a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_378": {
                "axis": {
                    "value": "channel_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "Mixed_4d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_389": {
                "pool_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool2d_4e_3a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_392": {
                "axis": {
                    "value": "channel_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "Mixed_4e",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_403": {
                "pool_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool2d_4f_3a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_406": {
                "axis": {
                    "value": "channel_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "Mixed_4f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_409": {
                "pool_size": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool2d_5a_2x2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_420": {
                "pool_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool2d_5b_3a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_423": {
                "axis": {
                    "value": "channel_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "Mixed_5b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling3D_434": {
                "pool_size": {
                    "value": "(3, 3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "MaxPool2d_5c_3a_3x3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Concatenate_437": {
                "axis": {
                    "value": "channel_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "name": {
                    "value": "Mixed_5c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_48": {
                "name": {
                    "value": "flatten",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_49": {
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_51": {
                "units": {
                    "value": "4096",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_52": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_53": {
                "units": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "classifier_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'softmax'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Flatten_93": {
                "name": {
                    "value": "fcn_features",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_96": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'softmax'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dense_148": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "dense_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'softmax'",
                            "Method Argument"
                        ],
                        [
                            "'softmax'",
                            "Method Argument"
                        ],
                        [
                            "'softmax'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "fc8",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_211": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "dense_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'softmax'",
                            "Method Argument"
                        ],
                        [
                            "'softmax'",
                            "Method Argument"
                        ],
                        [
                            "'softmax'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "fc8_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv3D_277": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filters",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(num_frames, num_row, num_col)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                },
                "use_bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "conv_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name + '_conv'",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "AveragePooling3D_443": {
                "pool_size": {
                    "value": "(2, 7, 7)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "global_avg_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_445": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Reshape_450": {
                "target_shape": {
                    "value": "(num_frames_remaining, classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Lambda_452": {
                "function": {
                    "value": "lambda x: K.mean(x, axis=1, keepdims=False)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "lambda s: (s[0], s[2])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Activation_455": {
                "activation": {
                    "value": "dense_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'softmax'",
                            "Method Argument"
                        ],
                        [
                            "'softmax'",
                            "Method Argument"
                        ],
                        [
                            "'softmax'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "prediction",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AveragePooling3D_465": {
                "pool_size": {
                    "value": "(2, h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "global_avg_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GlobalAveragePooling2D_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Lambda_90": {
                "function": {
                    "value": "lambda x: K.mean(x, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Lambda_92": {
                "function": {
                    "value": "lambda x: K.max(x, axis=-1)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "BatchNormalization_286": {
                "axis": {
                    "value": "bn_axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "bn_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name + '_bn'",
                            "BinOp"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                }
            },
            "Activation_289": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_452": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Conv2D(filters=96, kernel_size=11, strides=4, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=5, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten')(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(classes, activation=classifier_activation)(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D()(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(6, 6), strides=(1, 1), padding='valid')(model.output)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=classes, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Activation(activation)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.max(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='fcn_features')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(inputs, 64, 7, 7, 7, strides=(2, 2, 2), padding='same', name='Conv3d_1a_7x7')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_2a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 64, 1, 1, 1, strides=(1, 1, 1), padding='same', name='Conv3d_2b_1x1')",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 192, 3, 3, 3, strides=(1, 1, 1), padding='same', name='Conv3d_2c_3x3')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_3a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((3, 3, 3), strides=(2, 2, 2), padding='same', name='MaxPool2d_4a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4d')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4e')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4f')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((2, 2, 2), strides=(2, 2, 2), padding='same', name='MaxPool2d_5a_2x2')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_5b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, 7, 7), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Dropout(dropout)(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, classes, 1, 1, 1, padding='same', use_bias=True, use_activation_fn=False, use_bn=False, name='Conv3d_6a_1x1_new')",
                            "Call"
                        ],
                        [
                            "Reshape((num_frames_remaining, classes))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=1, keepdims=False), output_shape=lambda s: (s[0], s[2]))(x)",
                            "Call"
                        ],
                        [
                            "Activation(dense_activation, name='prediction')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, h, w), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Conv3D(filters, (num_frames, num_row, num_col), strides=strides, padding=padding, use_bias=use_bias, name=conv_name)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, scale=False, name=bn_name)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu', name=name)(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_90": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Conv2D(filters=96, kernel_size=11, strides=4, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=5, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten')(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(classes, activation=classifier_activation)(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D()(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(6, 6), strides=(1, 1), padding='valid')(model.output)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=classes, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Activation(activation)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.max(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='fcn_features')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(inputs, 64, 7, 7, 7, strides=(2, 2, 2), padding='same', name='Conv3d_1a_7x7')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_2a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 64, 1, 1, 1, strides=(1, 1, 1), padding='same', name='Conv3d_2b_1x1')",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 192, 3, 3, 3, strides=(1, 1, 1), padding='same', name='Conv3d_2c_3x3')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_3a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((3, 3, 3), strides=(2, 2, 2), padding='same', name='MaxPool2d_4a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4d')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4e')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4f')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((2, 2, 2), strides=(2, 2, 2), padding='same', name='MaxPool2d_5a_2x2')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_5b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, 7, 7), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Dropout(dropout)(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, classes, 1, 1, 1, padding='same', use_bias=True, use_activation_fn=False, use_bn=False, name='Conv3d_6a_1x1_new')",
                            "Call"
                        ],
                        [
                            "Reshape((num_frames_remaining, classes))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=1, keepdims=False), output_shape=lambda s: (s[0], s[2]))(x)",
                            "Call"
                        ],
                        [
                            "Activation(dense_activation, name='prediction')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, h, w), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Conv3D(filters, (num_frames, num_row, num_col), strides=strides, padding=padding, use_bias=use_bias, name=conv_name)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, scale=False, name=bn_name)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu', name=name)(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_92": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "Conv2D(filters=96, kernel_size=11, strides=4, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=5, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((2, 2))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=384, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((1, 1))(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=256, kernel_size=3, strides=1, padding='valid', activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D(pool_size=3, strides=2, padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization()(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='flatten')(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(4096, activation='relu')(x)",
                            "Call"
                        ],
                        [
                            "Dropout(0.5)(x)",
                            "Call"
                        ],
                        [
                            "Dense(classes, activation=classifier_activation)(x)",
                            "Call"
                        ],
                        [
                            "GlobalAveragePooling2D()(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(6, 6), strides=(1, 1), padding='valid')(model.output)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=num_filters, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters=classes, kernel_size=(1, 1), strides=(1, 1), padding='valid')(x)",
                            "Call"
                        ],
                        [
                            "GlobalMaxPooling2D()(x)",
                            "Call"
                        ],
                        [
                            "Activation(activation)(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.max(x, axis=-1))(x)",
                            "Call"
                        ],
                        [
                            "Flatten(name='fcn_features')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(inputs, 64, 7, 7, 7, strides=(2, 2, 2), padding='same', name='Conv3d_1a_7x7')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_2a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 64, 1, 1, 1, strides=(1, 1, 1), padding='same', name='Conv3d_2b_1x1')",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, 192, 3, 3, 3, strides=(1, 1, 1), padding='same', name='Conv3d_2c_3x3')",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((1, 3, 3), strides=(1, 2, 2), padding='same', name='MaxPool2d_3a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_3c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((3, 3, 3), strides=(2, 2, 2), padding='same', name='MaxPool2d_4a_3x3')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4c')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4d')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4e')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_4f')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "MaxPooling3D((2, 2, 2), strides=(2, 2, 2), padding='same', name='MaxPool2d_5a_2x2')(x)",
                            "Call"
                        ],
                        [
                            "Concatenate(axis=channel_axis, name='Mixed_5b')([branch_0, branch_1, branch_2, branch_3])",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, 7, 7), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Dropout(dropout)(x)",
                            "Call"
                        ],
                        [
                            "conv3d_bn(x, classes, 1, 1, 1, padding='same', use_bias=True, use_activation_fn=False, use_bn=False, name='Conv3d_6a_1x1_new')",
                            "Call"
                        ],
                        [
                            "Reshape((num_frames_remaining, classes))(x)",
                            "Call"
                        ],
                        [
                            "Lambda(lambda x: K.mean(x, axis=1, keepdims=False), output_shape=lambda s: (s[0], s[2]))(x)",
                            "Call"
                        ],
                        [
                            "Activation(dense_activation, name='prediction')(x)",
                            "Call"
                        ],
                        [
                            "AveragePooling3D((2, h, w), strides=(1, 1, 1), padding='valid', name='global_avg_pool')(x_concatenate)",
                            "Call"
                        ],
                        [
                            "Conv3D(filters, (num_frames, num_row, num_col), strides=strides, padding=padding, use_bias=use_bias, name=conv_name)(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, scale=False, name=bn_name)(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu', name=name)(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "tensorflow": {
            "list_physical_devices_8": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_11": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpus",
                            "variable"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train_test.py": {
        "tensorflow": {
            "list_physical_devices_22": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_25": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpus",
                            "variable"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}