{
    "FedEval/dataset/FedMatrix.py": {
        "sklearn": {
            "make_regression_223": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConfigurationManager().data_config.sample_size",
                            "Attribute"
                        ],
                        [
                            "ConfigurationManager().data_config.sample_size",
                            "Attribute"
                        ]
                    ]
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ConfigurationManager().data_config.feature_size * ConfigurationManager().runtime_config.client_num",
                            "BinOp"
                        ],
                        [
                            "ConfigurationManager().data_config.feature_size * ConfigurationManager().runtime_config.client_num",
                            "BinOp"
                        ]
                    ]
                },
                "n_informative": {
                    "value": "int(n_features * 0.9)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "n_targets": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "noise": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "load_data_92": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/strategy/FedSVD.py": {
        "sklearn": {
            "mean_squared_error_1087": {
                "variable": {
                    "value": "svd_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['y_train']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_hat_svd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train @ self._evaluate_parameters",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_absolute_percentage_error_1088": {
                "variable": {
                    "value": "svd_mape",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['y_train']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_hat_svd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train @ self._evaluate_parameters",
                            "BinOp"
                        ]
                    ]
                }
            },
            "r2_score_1089": {
                "variable": {
                    "value": "svd_r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['y_train']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_hat_svd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train @ self._evaluate_parameters",
                            "BinOp"
                        ]
                    ]
                }
            },
            "TruncatedSVD_599": {
                "variable": {
                    "value": "truncated_svd",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ConfigurationManager().model_config.svd_top_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "arpack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TruncatedSVD_641": {
                "variable": {
                    "value": "truncated_svd",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "ConfigurationManager().model_config.svd_top_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "arpack",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_squared_error_1114": {
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['y_train']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_hat_sgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear_regression_model.predict(x_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_absolute_percentage_error_1115": {
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['y_train']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_hat_sgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear_regression_model.predict(x_train)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_1116": {
                "y_true": {
                    "value": "y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data['y_train']",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_hat_sgd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear_regression_model.predict(x_train)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Sequential_1098": {
                "variable": {
                    "value": "linear_regression_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_1103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-07",
                            "float"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "EarlyStopping_1105": {
                "variable": {
                    "value": "es",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "patience": {
                    "value": "tolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "baseline": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "restore_best_weights": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_1099": {
                "units": {
                    "value": "1 if len(y_train.shape) == 1 else y_train.shape[-1]",
                    "type": "IfExp",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "tf.keras.regularizers.l2(l2)",
                    "type": "Call",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "research/FedSVD/utility/e2e_utility_analysis.py": {
        "sklearn": {
            "TruncatedSVD_28": {
                "variable": {
                    "value": "svd",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "arpack",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "load_data_47": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "research/FedSVD/utility/pca_visual.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "FedEval/attack/gradients_attack.py": {
        "tensorflow": {
            "Adam_194": {
                "variable": {
                    "value": "optimizer2",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "init_lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_51": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr or self.model.lr",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "reduce_sum_62": {
                "variable": {
                    "value": "attack_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "attack_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reduce_sum(attack_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_64": {
                "variable": {
                    "value": "mask_tensor_x",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([1] + list(self.model.inputs_shape['x'])), tf.ones([1] + list(self.model.inputs_shape['x']))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_67": {
                "variable": {
                    "value": "mask_tensor_y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([1] + list(self.model.targets_shape['y'])), tf.ones([1] + list(self.model.targets_shape['y']))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_70": {
                "variable": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_index",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_72": {
                "variable": {
                    "value": "update_mask_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mask_tensor_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([1] + list(self.model.inputs_shape['x'])), tf.ones([1] + list(self.model.inputs_shape['x']))], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(tf.int32, [self.batch_size], name='batch_index')",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_73": {
                "variable": {
                    "value": "update_mask_y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mask_tensor_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.zeros([1] + list(self.model.targets_shape['y'])), tf.ones([1] + list(self.model.targets_shape['y']))], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "batch_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(tf.int32, [self.batch_size], name='batch_index')",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ],
                        [
                            "range(self.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_81": {
                "variable": {
                    "value": "optimizer_gradients[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "update_mask_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(mask_tensor_x, batch_index, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "optimizer_gradients[0][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "multiply_82": {
                "variable": {
                    "value": "optimizer_gradients[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "update_mask_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(mask_tensor_y, batch_index, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "optimizer_gradients[1][0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_189": {
                "input_tensor": {
                    "value": "tf.square(gradients[i] - inputs[i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_26": {
                "variable": {
                    "value": "input_tensor[input_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.normal([self.batch_size] + list(self.model.inputs_shape[input_name]), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "input_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.inputs_shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "target_tensor_raw[target_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.normal([self.batch_size] + list(self.model.targets_shape[target_name]), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "target_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.targets_shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "softmax_41": {
                "variable": {
                    "value": "target_tensor[target_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "logits": {
                    "value": "target_tensor_raw[target_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "tmp_g",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "g.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "g.cid.split(':')[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_167": {
                "initial_value": {
                    "value": "tf.random.normal(single_image_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_171": {
                "initial_value": {
                    "value": "tf.random.normal(single_label_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_178": {
                "input_tensor": {
                    "value": "tf.reduce_sum(-y_true * tf.nn.log_softmax(y_pred, axis=-1), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_180": {
                "input_tensor": {
                    "value": "tf.reduce_sum(-y_true * tf.math.log(y_pred), axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GradientTape_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "expand_dims_188": {
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vl",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normal_167": {
                "shape": {
                    "value": "single_image_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] + list(fake_data_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "normal_171": {
                "shape": {
                    "value": "single_label_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] + list(fake_label_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_178": {
                "input_tensor": {
                    "value": "-y_true * tf.nn.log_softmax(y_pred, axis=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_180": {
                "input_tensor": {
                    "value": "-y_true * tf.math.log(y_pred)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_184": {
                "values": {
                    "value": "self.fake_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_185": {
                "logits": {
                    "value": "tf.concat(self.fake_label, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "normal_27": {
                "shape": {
                    "value": "[self.batch_size] + list(self.model.inputs_shape[input_name])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normal_37": {
                "shape": {
                    "value": "[self.batch_size] + list(self.model.targets_shape[target_name])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_60": {
                "input_tensor": {
                    "value": "tf.square(g - tmp_g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "shape": {
                    "value": "[1] + list(self.model.inputs_shape['x'])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_65": {
                "shape": {
                    "value": "[1] + list(self.model.inputs_shape['x'])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "shape": {
                    "value": "[1] + list(self.model.targets_shape['y'])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_68": {
                "shape": {
                    "value": "[1] + list(self.model.targets_shape['y'])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_89": {
                "ys": {
                    "value": "attack_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reduce_sum(attack_loss)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "input_tensor['x']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gradients_90": {
                "ys": {
                    "value": "attack_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reduce_sum(attack_loss)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "target_tensor['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_185": {
                "values": {
                    "value": "self.fake_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_189": {
                "x": {
                    "value": "gradients[i] - inputs[i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientTape_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_48": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.forward(inputs=input_tensor, targets=target_tensor, trainable=False)",
                            "Call"
                        ],
                        [
                            "self.loss_cross_entropy(tf.nn.softmax(tf.concat(self.fake_label, axis=0), axis=-1), y_hat)",
                            "Call"
                        ],
                        [
                            "self(gradients)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vl",
                            "variable"
                        ]
                    ]
                }
            },
            "gradients_58": {
                "ys": {
                    "value": "tf.reduce_sum(tf.square(g))",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "target_tensor['y']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_60": {
                "x": {
                    "value": "g - tmp_g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_178": {
                "logits": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_180": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_58": {
                "input_tensor": {
                    "value": "tf.square(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_58": {
                "x": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/config/configuration.py": {
        "tensorflow": {
            "set_seed_1218": {
                "seed": {
                    "value": "self._d_cfg.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/dataset/FedImage.py": {
        "tensorflow": {
            "load_data_14": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "path": {
                    "value": "os.path.join(dir_path, 'mnist.npz')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_data_29": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_42": {
                "variable": {
                    "value": "((x_train, y_train), (x_test, y_test))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_categorical_21": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((y_train, y_test), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(y, self.num_class)",
                            "Call"
                        ],
                        [
                            "np.concatenate((y_train, y_test), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(y, self.num_class)",
                            "Call"
                        ],
                        [
                            "np.concatenate((y_train, y_test), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(y, self.num_class)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_categorical_34": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((y_train, y_test), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(y, self.num_class)",
                            "Call"
                        ],
                        [
                            "np.concatenate((y_train, y_test), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(y, self.num_class)",
                            "Call"
                        ],
                        [
                            "np.concatenate((y_train, y_test), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(y, self.num_class)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_categorical_47": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate((y_train, y_test), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(y, self.num_class)",
                            "Call"
                        ],
                        [
                            "np.concatenate((y_train, y_test), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(y, self.num_class)",
                            "Call"
                        ],
                        [
                            "np.concatenate((y_train, y_test), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(y, self.num_class)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/dataset/Shakespeare.py": {
        "tensorflow": {
            "to_categorical_55": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(y, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "y + process_sentences(data['user_data'][data['users'][i]]['y'])",
                            "BinOp"
                        ],
                        [
                            "tf.keras.utils.to_categorical(y, self.num_class)",
                            "Call"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.num_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/model/LeNet.py": {
        "tensorflow": {
            "Conv2D_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('activation', ConfigurationManager().model_config.activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('activation', ConfigurationManager().model_config.activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "Flatten_18": {
                "variable": {
                    "value": "self.flatten",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_19": {
                "variable": {
                    "value": "self.dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "120",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('activation', ConfigurationManager().model_config.activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_20": {
                "variable": {
                    "value": "self.dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "84",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('activation', ConfigurationManager().model_config.activation)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_31": {
                "variable": {
                    "value": "self.dense3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "MaxPooling2D_24": {
                "variable": {
                    "value": "self.pooling1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPooling2D_25": {
                "variable": {
                    "value": "self.pooling2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AveragePooling2D_27": {
                "variable": {
                    "value": "self.pooling1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AveragePooling2D_28": {
                "variable": {
                    "value": "self.pooling2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_34": {
                "variable": {
                    "value": "self.dense3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_36": {
                "variable": {
                    "value": "self.dense3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/model/MLP.py": {
        "tensorflow": {
            "Dense_35": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Dense_38": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_40": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/model/StackedLSTM.py": {
        "tensorflow": {
            "LSTM_17": {
                "variable": {
                    "value": "self.lstm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('hidden_units', 64)",
                            "Call"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LSTM_18": {
                "variable": {
                    "value": "self.lstm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('hidden_units', 64)",
                            "Call"
                        ]
                    ]
                },
                "return_sequences": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_14": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('embedding_dim', 8)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_20": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_22": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target_shape[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/model/__init__.py": {
        "tensorflow": {
            "set_floatx_9": {
                "value": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/role/node.py": {
        "tensorflow": {
            "list_physical_devices_60": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "list_logical_devices_65": {
                "variable": {
                    "value": "logical_devices",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_64": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpus",
                            "variable"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/run_util.py": {
        "tensorflow": {
            "EarlyStopping_580": {
                "variable": {
                    "value": "early_stop",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "model_config.tolerance_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "restore_best_weights": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CSVLogger_588": {
                "variable": {
                    "value": "csv_logger",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "log_file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, f'{UNIFIED_JOB_TIME}_{data_config.dataset_name}_{runtime_config.client_num}_central_simulator.csv')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_dir, f'{UNIFIED_JOB_TIME}_{data_config.dataset_name}_{runtime_config.client_num}_local_simulator.csv')",
                            "Call"
                        ]
                    ]
                },
                "append": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_447": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "identifier": {
                    "value": "ConfigurationManager().model_config.loss_calc_method",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "EarlyStopping_648": {
                "variable": {
                    "value": "early_stop",
                    "type": "variable",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "model_config.tolerance_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "restore_best_weights": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_445": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_454": {
                "variable": {
                    "value": "gradients[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "gradients[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/strategy/FedAvg.py": {
        "tensorflow": {
            "get_47": {
                "variable": {
                    "value": "loss_op",
                    "type": "variable",
                    "possible_values": []
                },
                "identifier": {
                    "value": "ConfigurationManager().model_config.loss_calc_method",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientTape_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_58": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_op(y, y_hat)",
                            "Call"
                        ],
                        [
                            "loss.numpy()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(loss).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_54": {
                "variable": {
                    "value": "gradients[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "gradients[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/strategy/FedProx.py": {
        "tensorflow": {
            "ResourceScatterAdd_47": {
                "resource": {
                    "value": "var.handle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "updates": {
                    "value": "-delta * coefficients['lr_t']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ResourceApplyGradientDescent_66": {
                "var": {
                    "value": "handle.handle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "coefficients['lr_t']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "kwargs.get('apply_state', {}).get((var_device, var_dtype)) or self._fallback_apply_state(var_device, var_dtype)",
                            "BoolOp"
                        ],
                        [
                            "(apply_state or {}).get((var_device, var_dtype)) or self._fallback_apply_state(var_device, var_dtype)",
                            "BoolOp"
                        ]
                    ]
                },
                "delta": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad + self._mu * (tf.gather(var, indices) - tf.gather(self.get_slot(var, 'vstar'), indices))",
                            "BinOp"
                        ],
                        [
                            "grad + self._mu * (handle - self.get_slot(handle, 'vstar'))",
                            "BinOp"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_45": {
                "params": {
                    "value": "self.get_slot(var, 'vstar')",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/strategy/FedSCA.py": {
        "tensorflow": {
            "ResourceApplyGradientDescent_36": {
                "var": {
                    "value": "handle.handle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "coefficients['lr_t']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(apply_state or {}).get((var_device, var_dtype)) or self._fallback_apply_state(var_device, var_dtype)",
                            "BoolOp"
                        ]
                    ]
                },
                "delta": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad + self.get_slot(handle, 'variate_diff')",
                            "BinOp"
                        ]
                    ]
                },
                "use_locking": {
                    "value": "self._use_locking",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/strategy/PaillierAggregation.py": {
        "tensorflow": {}
    },
    "FedEval/strategy/SecureAggregation.py": {
        "tensorflow": {}
    },
    "FedEval/utils/parameter_parser.py": {
        "tensorflow": {
            "get_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "identifier": {
                    "value": "mdl_cfg.optimizer_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "debug/LocalCentral.py": {
        "tensorflow": {
            "EarlyStopping_67": {
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "ConfigurationManager().model_config.tolerance_num",
                    "type": "Attribute",
                    "possible_values": []
                },
                "restore_best_weights": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "FedEval/strategy/FetchSGD.py": {
        "torch": {
            "from_numpy_45": {
                "ndarray": {
                    "value": "np.concatenate([e.reshape([-1]) for e in gradients])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "ndarray": {
                    "value": "agg_tables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sum([client_params[i] * aggregate_weights[i] for i in range(len(client_params))], axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}