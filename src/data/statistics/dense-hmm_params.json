{
    "code_dense_hmm/utils.py": {
        "sklearn": {
            "check_array_132": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate(seqs)",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "check_array_155": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.concatenate(seqs)",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ],
                        [
                            "check_array(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "code_dense_hmm/models.py": {
        "tensorflow": {
            "Graph_701": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_794": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_612": {
                "variable": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.n_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_614": {
                "variable": {
                    "value": "bar_gamma",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bar_gamma",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_616": {
                "variable": {
                    "value": "bar_gamma_pairwise",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bar_gamma_pairwise",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.n_components, self.n_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_619": {
                "variable": {
                    "value": "tilde_O_ph",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "tilde_O",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None, self.n_observables]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_634": {
                "variable": {
                    "value": "loss_1_normalization",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pi_log_ker_normal * bar_gamma_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_637": {
                "variable": {
                    "value": "loss_2_normalization",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "A_log_ker_normal[tf.newaxis, :, tf.newaxis] * bar_gamma_pairwise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "einsum_640": {
                "variable": {
                    "value": "tilde_M",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "ito,oh->ith",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "tilde_O_ph",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(name='tilde_O', dtype=tf.float64, shape=[None, None, self.n_observables])",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "B_log_ker",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.identity(B_scalars, name='B_log_ker')",
                            "Call"
                        ],
                        [
                            "tf.log(B_scalars_ker, name='B_log_ker')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_642": {
                "variable": {
                    "value": "loss_3_normalization",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "B_log_ker_normal * bar_gamma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_644": {
                "variable": {
                    "value": "loss_total",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_1 + loss_1_normalization + loss_2 + loss_2_normalization + loss_3 + loss_3_normalization",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_total",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_648": {
                "variable": {
                    "value": "loss_scaled",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_total / self.scaling",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "loss_scaled",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_649": {
                "variable": {
                    "value": "loss_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(pi_log_ker * bar_gamma_1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.identity(loss_1, name='loss_1')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss_1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_650": {
                "variable": {
                    "value": "loss_1_normalization",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_1_normalization",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(pi_log_ker_normal * bar_gamma_1)",
                            "Call"
                        ],
                        [
                            "tf.identity(loss_1_normalization, name='loss_1_normalization')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss_1_normalization",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_652": {
                "variable": {
                    "value": "loss_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(A_log_ker * bar_gamma_pairwise)",
                            "UnaryOp"
                        ],
                        [
                            "tf.identity(loss_2, name='loss_2')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss_2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_653": {
                "variable": {
                    "value": "loss_2_normalization",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_2_normalization",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(A_log_ker_normal[tf.newaxis, :, tf.newaxis] * bar_gamma_pairwise)",
                            "Call"
                        ],
                        [
                            "tf.identity(loss_2_normalization, name='loss_2_normalization')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss_2_normalization",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_655": {
                "variable": {
                    "value": "loss_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_3",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(gamma * tilde_M)",
                            "UnaryOp"
                        ],
                        [
                            "tf.identity(loss_3, name='loss_3')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss_3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_656": {
                "variable": {
                    "value": "loss_3_normalization",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_3_normalization",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.reduce_sum(B_log_ker_normal * bar_gamma)",
                            "Call"
                        ],
                        [
                            "tf.identity(loss_3_normalization, name='loss_3_normalization')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "loss_3_normalization",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_670": {
                "variable": {
                    "value": "A_stationary",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_679": {
                "a": {
                    "value": "theta",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "A * A_stationary[:, None]",
                            "BinOp"
                        ],
                        [
                            "A * A_stationary[:, None]",
                            "BinOp"
                        ]
                    ]
                },
                "b": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "B_from_reps_hmmlearn",
                            "Name"
                        ]
                    ]
                }
            },
            "reduce_sum_680": {
                "variable": {
                    "value": "loss_cooc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(omega_gt - omega)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_707": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_observables, self.l_vw]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "'v' in self.trainables",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "get_variable_710": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "z",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.l_uz, self.n_components]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "'z' in self.trainables and ('z0' not in self.trainables or 'zz0' in self.trainables)",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "get_variable_715": {
                "variable": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "z0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.l_uz, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "'z0' in self.trainables",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "transpose_774": {
                "variable": {
                    "value": "A_from_reps_hmmlearn",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A_from_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(A_scalars, axis=0)",
                            "Call"
                        ],
                        [
                            "A_scalars_ker / tf.reduce_sum(A_scalars_ker, axis=0)[tf.newaxis, :]",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "A_from_reps",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_775": {
                "variable": {
                    "value": "B_from_reps_hmmlearn",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "B_from_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(B_scalars, axis=0)",
                            "Call"
                        ],
                        [
                            "B_scalars_ker / tf.reduce_sum(B_scalars_ker, axis=0)[tf.newaxis, :]",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "B_from_reps",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_776": {
                "variable": {
                    "value": "pi_from_reps_hmmlearn",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pi_from_reps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(pi_scalars, axis=0)",
                            "Call"
                        ],
                        [
                            "pi_scalars_ker / tf.reduce_sum(pi_scalars_ker)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "pi_from_reps",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_790": {
                "variable": {
                    "value": "self.init_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_720": {
                "variable": {
                    "value": "u",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_components, self.l_uz]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "'u' in self.trainables",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "get_variable_724": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.l_vw, self.n_components]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self.initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "'w' in self.trainables",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "matmul_732": {
                "variable": {
                    "value": "A_scalars",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='u', dtype=tf.float64, shape=[self.n_components, self.l_uz], initializer=self.initializer, trainable='u' in self.trainables)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='z', dtype=tf.float64, shape=[self.l_uz, self.n_components], initializer=self.initializer, trainable='z' in self.trainables and ('z0' not in self.trainables or 'zz0' in self.trainables))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "A_scalars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_733": {
                "variable": {
                    "value": "B_scalars",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='v', dtype=tf.float64, shape=[self.n_observables, self.l_vw], initializer=self.initializer, trainable='v' in self.trainables)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='w', dtype=tf.float64, shape=[self.l_vw, self.n_components], initializer=self.initializer, trainable='w' in self.trainables)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "B_scalars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_734": {
                "variable": {
                    "value": "pi_scalars",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='u', dtype=tf.float64, shape=[self.n_components, self.l_uz], initializer=self.initializer, trainable='u' in self.trainables)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='z0', dtype=tf.float64, shape=[self.l_uz, 1], initializer=self.initializer, trainable='z0' in self.trainables)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pi_scalars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_744": {
                "variable": {
                    "value": "A_from_reps",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "A_scalars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(u, z, name='A_scalars')",
                            "Call"
                        ],
                        [
                            "tf.matmul(z, z, transpose_a=True, name='A_scalars')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_745": {
                "variable": {
                    "value": "B_from_reps",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "B_scalars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(v, w, name='B_scalars')",
                            "Call"
                        ],
                        [
                            "tf.matmul(v, z, name='B_scalars')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_746": {
                "variable": {
                    "value": "pi_from_reps",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "pi_scalars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(u, z0, name='pi_scalars')",
                            "Call"
                        ],
                        [
                            "tf.matmul(z0, z, transpose_a=True, name='pi_scalars')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_748": {
                "variable": {
                    "value": "A_log_ker_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "A_scalars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(u, z, name='A_scalars')",
                            "Call"
                        ],
                        [
                            "tf.matmul(z, z, transpose_a=True, name='A_scalars')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_749": {
                "variable": {
                    "value": "B_log_ker_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "B_scalars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(v, w, name='B_scalars')",
                            "Call"
                        ],
                        [
                            "tf.matmul(v, z, name='B_scalars')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_750": {
                "variable": {
                    "value": "pi_log_ker_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pi_scalars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(u, z0, name='pi_scalars')",
                            "Call"
                        ],
                        [
                            "tf.matmul(z0, z, transpose_a=True, name='pi_scalars')",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_752": {
                "variable": {
                    "value": "A_log_ker",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A_scalars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(u, z, name='A_scalars')",
                            "Call"
                        ],
                        [
                            "tf.matmul(z, z, transpose_a=True, name='A_scalars')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "A_log_ker",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_753": {
                "variable": {
                    "value": "B_log_ker",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "B_scalars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(v, w, name='B_scalars')",
                            "Call"
                        ],
                        [
                            "tf.matmul(v, z, name='B_scalars')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "B_log_ker",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "identity_754": {
                "variable": {
                    "value": "pi_log_ker",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi_scalars",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tf.matmul(u, z0, name='pi_scalars')",
                            "Call"
                        ],
                        [
                            "tf.matmul(z0, z, transpose_a=True, name='pi_scalars')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pi_log_ker",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_765": {
                "variable": {
                    "value": "A_log_ker_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(A_scalars_ker, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_766": {
                "variable": {
                    "value": "B_log_ker_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(B_scalars_ker, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_767": {
                "variable": {
                    "value": "pi_log_ker_normal",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(pi_scalars_ker)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_769": {
                "variable": {
                    "value": "A_log_ker",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "A_scalars_ker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kernel(A_scalars)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "A_log_ker",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_770": {
                "variable": {
                    "value": "B_log_ker",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "B_scalars_ker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kernel(B_scalars)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "B_log_ker",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_771": {
                "variable": {
                    "value": "pi_log_ker",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pi_scalars_ker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kernel(pi_scalars)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pi_log_ker",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_787": {
                "variable": {
                    "value": "self.omega_gt_ph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.n_observables, self.n_observables]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_591": {
                "learning_rate": {
                    "value": "self.em_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_600": {
                "learning_rate": {
                    "value": "self.cooc_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_633": {
                "input_tensor": {
                    "value": "pi_log_ker * bar_gamma_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_636": {
                "input_tensor": {
                    "value": "A_log_ker * bar_gamma_pairwise",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_641": {
                "input_tensor": {
                    "value": "gamma * tilde_M",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_679": {
                "a": {
                    "value": "B",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "B_from_reps_hmmlearn",
                            "Name"
                        ]
                    ]
                }
            },
            "square_680": {
                "x": {
                    "value": "omega_gt - omega",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_737": {
                "variable": {
                    "value": "A_scalars",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='z', dtype=tf.float64, shape=[self.l_uz, self.n_components], initializer=self.initializer, trainable='z' in self.trainables and ('z0' not in self.trainables or 'zz0' in self.trainables))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='z', dtype=tf.float64, shape=[self.l_uz, self.n_components], initializer=self.initializer, trainable='z' in self.trainables and ('z0' not in self.trainables or 'zz0' in self.trainables))",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "A_scalars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_738": {
                "variable": {
                    "value": "B_scalars",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='v', dtype=tf.float64, shape=[self.n_observables, self.l_vw], initializer=self.initializer, trainable='v' in self.trainables)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='z', dtype=tf.float64, shape=[self.l_uz, self.n_components], initializer=self.initializer, trainable='z' in self.trainables and ('z0' not in self.trainables or 'zz0' in self.trainables))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "B_scalars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_739": {
                "variable": {
                    "value": "pi_scalars",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "z0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='z0', dtype=tf.float64, shape=[self.l_uz, 1], initializer=self.initializer, trainable='z0' in self.trainables)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name='z', dtype=tf.float64, shape=[self.l_uz, self.n_components], initializer=self.initializer, trainable='z' in self.trainables and ('z0' not in self.trainables or 'zz0' in self.trainables))",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "pi_scalars",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_763": {
                "input_tensor": {
                    "value": "pi_scalars_ker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kernel(pi_scalars)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_765": {
                "input_tensor": {
                    "value": "A_scalars_ker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kernel(A_scalars)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_766": {
                "input_tensor": {
                    "value": "B_scalars_ker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kernel(B_scalars)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_767": {
                "input_tensor": {
                    "value": "pi_scalars_ker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kernel(pi_scalars)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_761": {
                "input_tensor": {
                    "value": "A_scalars_ker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kernel(A_scalars)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_762": {
                "input_tensor": {
                    "value": "B_scalars_ker",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.kernel(B_scalars)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}