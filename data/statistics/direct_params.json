{
    "direct/misc.py": {
        "tensorflow": {
            "Variable_35": {
                "variable": {
                    "value": "self.log_ell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "log_lengthscale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((d, 1), dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "np.asarray(log_lengthscale, dtype=self.dtype).reshape((d, 1))",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "tune_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "log_lengthscale",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "variable": {
                    "value": "Xfreq",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.freq_weights / tf.exp(self.log_ell)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_49": {
                "values": {
                    "value": "[tf.cos(Xfreq), tf.sin(Xfreq)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_48": {
                "x": {
                    "value": "self.log_ell",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_49": {
                "x": {
                    "value": "Xfreq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.freq_weights / tf.exp(self.log_ell))",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_49": {
                "x": {
                    "value": "Xfreq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(x, self.freq_weights / tf.exp(self.log_ell))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "direct/models.py": {
        "tensorflow": {
            "constant_37": {
                "variable": {
                    "value": "self.Wbar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "Wbar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Wbar",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "self.sig2_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sig2_grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sig2_grid",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_41": {
                "variable": {
                    "value": "self.log_sig2_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.sig2_grid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_45": {
                "variable": {
                    "value": "self.logP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "logP",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logP",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "self.logpsig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.log_softmax(logpsig)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_softmax_59": {
                "variable": {
                    "value": "self.logqsig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.Variable(initial_value=logqsig.reshape((-1, 1)), trainable=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_86": {
                "variable": {
                    "value": "self.yTy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "y.T.dot(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_87": {
                "variable": {
                    "value": "self.PhiTy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "Phi.T.dot(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_90": {
                "variable": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.diag_PhiTPhi * np.power(Wbar, 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_110": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.logQ",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_111": {
                "variable": {
                    "value": "qsig",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.logqsig",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_113": {
                "variable": {
                    "value": "ELBO",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "qsig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.logqsig)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "b": {
                    "value": "self.logpsig - self.logqsig",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_243": {
                "variable": {
                    "value": "y_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Phi_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Phi_X",
                            "Method Argument"
                        ],
                        [
                            "Phi_X",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_261": {
                "variable": {
                    "value": "gather_index",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.tile(tf.reshape(tf.range(self.b, dtype=tf.int32), (-1, 1)), (n_samples, 1)), tf.reshape(tf.transpose(iw_samples), (-1, 1)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_263": {
                "variable": {
                    "value": "w_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(tf.gather_nd(self.Wbar, gather_index), (n_samples, self.b))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_264": {
                "variable": {
                    "value": "y_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Phi_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Phi_X",
                            "Method Argument"
                        ],
                        [
                            "Phi_X",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stop_gradient(self.sample_variational(n_samples=self.n_samples, sample_sig2=False))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(tf.gather_nd(self.Wbar, gather_index), (n_samples, self.b)))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.gather_nd(tf.transpose(mixture_samples, perm=(0, 2, 1)), indices=tf.stack([i_mixture_samples, tf.range(n_samples, dtype=tf.int32)], axis=1)))",
                            "Call"
                        ],
                        [
                            "tf.multinomial(logits=self.logQ, num_samples=n_samples, output_dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_265": {
                "variable": {
                    "value": "sig2_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.squeeze(self.sig2_grid, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "isig2_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_variational(n_samples=n_samples, sample_sig2=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_316": {
                "variable": {
                    "value": "gather_index",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(tf.tile(tf.reshape(tf.range(self.b, dtype=tf.int32), (1, -1, 1)), (n, 1, 1)), tf.expand_dims(tf.transpose(w), axis=2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_318": {
                "variable": {
                    "value": "logQsummed",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.gather_nd(tf.transpose(self.logQ, perm=(1, 2, 0)), gather_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_319": {
                "variable": {
                    "value": "log_var",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.expand_dims(self.log_mix, axis=0) + logQsummed",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_66": {
                "variable": {
                    "value": "self.logQ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.Variable(initial_value=logQ, trainable=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_70": {
                "variable": {
                    "value": "self.log_mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.Variable(initial_value=np.zeros(self.n_mixtures), trainable=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_71": {
                "variable": {
                    "value": "self.logQ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.Variable(initial_value=np.tile(logQ, (self.n_mixtures, 1, 1)) + 0.01 * np.random.randn(self.n_mixtures, self.b, self.mbar), trainable=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_93": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "2.0 * self.PhiTPhi[self.terms[0, :], self.terms[1, :]].reshape((-1, 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_95": {
                "variable": {
                    "value": "self.diag_PhiTPhi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.diag_PhiTPhi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_96": {
                "variable": {
                    "value": "self.PhiTPhi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.PhiTPhi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_102": {
                "variable": {
                    "value": "self.sgd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_115": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Q * self.Wbar",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_128": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.log_mix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_129": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "Q * tf.expand_dims(self.Wbar, axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_222": {
                "variable": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "sess.run(tf.reduce_sum(tf.exp(self.logQ) * self.Wbar, axis=1, keepdims=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_224": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.logQ",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_225": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.log_mix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_226": {
                "variable": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "sess.run(tf.matmul(tf.expand_dims(mix, axis=0), tf.reduce_sum(Q * tf.expand_dims(self.Wbar, axis=0), axis=2))).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_281": {
                "variable": {
                    "value": "mixture_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(self.logQ, (-1, self.mbar))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "output_dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_283": {
                "variable": {
                    "value": "mixture_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mixture_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits=tf.reshape(self.logQ, (-1, self.mbar)), num_samples=n_samples, output_dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mixture_samples, (self.n_mixtures, self.b, n_samples))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(self.n_mixtures, self.b, n_samples)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_286": {
                "variable": {
                    "value": "i_mixture_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.multinomial(logits=tf.reshape(self.log_mix, (1, -1)), num_samples=n_samples, output_dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_287": {
                "a": {
                    "value": "mixture_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multinomial(logits=tf.reshape(self.logQ, (-1, self.mbar)), num_samples=n_samples, output_dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mixture_samples, (self.n_mixtures, self.b, n_samples))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "(0, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "multinomial_289": {
                "variable": {
                    "value": "w_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logQ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "output_dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multinomial_293": {
                "variable": {
                    "value": "sig2_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "tf.reshape(self.logqsig, (1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "output_dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_47": {
                "logits": {
                    "value": "logpsig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logpsig",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_59": {
                "initial_value": {
                    "value": "logqsig.reshape((-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_79": {
                "variable": {
                    "value": "self.logA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.nn.log_softmax(logQ, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_117": {
                "input_tensor": {
                    "value": "Q * (self.logP - self.logQ)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensordot_131": {
                "a": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.log_mix)",
                            "Call"
                        ],
                        [
                            "tf.exp(self.log_mix)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reduce_sum(Q * tf.expand_dims(self.logP, axis=0), axis=(1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[0], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_145": {
                "variable": {
                    "value": "w_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.sample_variational(n_samples=self.n_samples, sample_sig2=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_149": {
                "variable": {
                    "value": "QoA",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.logQ - tf.expand_dims(self.logA, axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_263": {
                "tensor": {
                    "value": "tf.gather_nd(self.Wbar, gather_index)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n_samples, self.b)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "squeeze_265": {
                "input": {
                    "value": "self.sig2_grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_312": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_nd_318": {
                "params": {
                    "value": "tf.transpose(self.logQ, perm=(1, 2, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "gather_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((tf.tile(tf.reshape(tf.range(self.b, dtype=tf.int32), (-1, 1)), (n_samples, 1)), tf.reshape(tf.transpose(iw_samples), (-1, 1))), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat((tf.tile(tf.reshape(tf.range(self.b, dtype=tf.int32), (1, -1, 1)), (n, 1, 1)), tf.expand_dims(tf.transpose(w), axis=2)), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_322": {
                "params": {
                    "value": "tf.reshape(self.logqsig, (-1,))",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "sig2[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "initial_value": {
                    "value": "logQ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logP",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "initial_value": {
                    "value": "np.zeros(self.n_mixtures)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_71": {
                "initial_value": {
                    "value": "np.tile(logQ, (self.n_mixtures, 1, 1)) + 0.01 * np.random.randn(self.n_mixtures, self.b, self.mbar)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_121": {
                "input_tensor": {
                    "value": "Q * self.H",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_131": {
                "input_tensor": {
                    "value": "Q * tf.expand_dims(self.logP, axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensordot_139": {
                "a": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.log_mix)",
                            "Call"
                        ],
                        [
                            "tf.exp(self.log_mix)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reduce_sum(Q * tf.expand_dims(self.H, axis=0), axis=(1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[0], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_261": {
                "input": {
                    "value": "tf.reshape(tf.range(self.b, dtype=tf.int32), (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(n_samples, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_262": {
                "tensor": {
                    "value": "tf.transpose(iw_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "gather_nd_263": {
                "params": {
                    "value": "self.Wbar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "gather_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((tf.tile(tf.reshape(tf.range(self.b, dtype=tf.int32), (-1, 1)), (n_samples, 1)), tf.reshape(tf.transpose(iw_samples), (-1, 1))), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat((tf.tile(tf.reshape(tf.range(self.b, dtype=tf.int32), (1, -1, 1)), (n, 1, 1)), tf.expand_dims(tf.transpose(w), axis=2)), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "multinomial_286": {
                "logits": {
                    "value": "tf.reshape(self.log_mix, (1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "output_dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_nd_287": {
                "params": {
                    "value": "tf.transpose(mixture_samples, perm=(0, 2, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.stack([i_mixture_samples, tf.range(n_samples, dtype=tf.int32)], axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_316": {
                "input": {
                    "value": "tf.reshape(tf.range(self.b, dtype=tf.int32), (1, -1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "(n, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_317": {
                "input": {
                    "value": "tf.transpose(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_318": {
                "a": {
                    "value": "self.logQ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_319": {
                "input": {
                    "value": "self.log_mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_322": {
                "tensor": {
                    "value": "self.logqsig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_121": {
                "a": {
                    "value": "self.PhiTPhi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(Q * self.Wbar, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(Q * tf.expand_dims(self.Wbar, axis=0), axis=2, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_124": {
                "a": {
                    "value": "qsig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.logqsig)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "b": {
                    "value": "self.log_sig2_grid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_129": {
                "input": {
                    "value": "self.Wbar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_136": {
                "a": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.log_mix)",
                            "Call"
                        ],
                        [
                            "tf.exp(self.log_mix)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.tensordot(self.g, tf.gather(s, self.terms[0], axis=1) * tf.gather(s, self.terms[1], axis=1), axes=[[0], [1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[0], [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_139": {
                "input_tensor": {
                    "value": "Q * tf.expand_dims(self.H, axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_141": {
                "a": {
                    "value": "qsig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.logqsig)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "b": {
                    "value": "self.log_sig2_grid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_146": {
                "input_tensor": {
                    "value": "tf.square(self.log_variational(w=w_samples) + 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_222": {
                "input_tensor": {
                    "value": "tf.exp(self.logQ) * self.Wbar",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_261": {
                "tensor": {
                    "value": "tf.range(self.b, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_262": {
                "a": {
                    "value": "iw_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sample_variational(n_samples=n_samples, sample_sig2=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_281": {
                "tensor": {
                    "value": "self.logQ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.mbar)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_293": {
                "tensor": {
                    "value": "self.logqsig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_316": {
                "tensor": {
                    "value": "tf.range(self.b, dtype=tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_317": {
                "a": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_79": {
                "logits": {
                    "value": "logQ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logP",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_125": {
                "a": {
                    "value": "qsig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.logqsig)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "b": {
                    "value": "1.0 / self.sig2_grid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_131": {
                "input": {
                    "value": "self.logP",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_137": {
                "a": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.gather(s, self.terms[0], axis=1) * tf.gather(s, self.terms[1], axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[0], [1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_142": {
                "a": {
                    "value": "qsig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.logqsig)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "b": {
                    "value": "1.0 / self.sig2_grid",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_146": {
                "x": {
                    "value": "self.log_variational(w=w_samples) + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_149": {
                "input": {
                    "value": "self.logA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_152": {
                "a": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.log_mix)",
                            "Call"
                        ],
                        [
                            "tf.exp(self.log_mix)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.exp(self.log_mix + tf.reduce_sum(tf.log(tf.reduce_sum(Q * QoA, axis=2)), axis=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[0], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_153": {
                "input_tensor": {
                    "value": "tf.exp(tf.gather(self.log_mix, self.q_terms[0]) + tf.gather(self.log_mix, self.q_terms[1]) + tf.reduce_sum(tf.log(tf.reduce_sum(tf.gather(Q, self.q_terms[0]) * tf.gather(QoA, self.q_terms[1]), axis=2)), axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_226": {
                "a": {
                    "value": "tf.expand_dims(mix, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reduce_sum(Q * tf.expand_dims(self.Wbar, axis=0), axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_261": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_286": {
                "tensor": {
                    "value": "self.log_mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_287": {
                "values": {
                    "value": "[i_mixture_samples, tf.range(n_samples, dtype=tf.int32)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "range_316": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_121": {
                "x": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(Q * self.Wbar, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(Q * tf.expand_dims(self.Wbar, axis=0), axis=2, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensordot_135": {
                "a": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(Q * self.Wbar, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(Q * tf.expand_dims(self.Wbar, axis=0), axis=2, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.PhiTy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[1], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_139": {
                "input": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_151": {
                "a": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.log_mix)",
                            "Call"
                        ],
                        [
                            "tf.exp(self.log_mix)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.reduce_sum(Q * tf.expand_dims(self.logA, axis=0), axis=(1, 2))",
                    "type": "Call",
                    "possible_values": []
                },
                "axes": {
                    "value": "[[0], [0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_152": {
                "x": {
                    "value": "self.log_mix + tf.reduce_sum(tf.log(tf.reduce_sum(Q * QoA, axis=2)), axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_153": {
                "x": {
                    "value": "tf.gather(self.log_mix, self.q_terms[0]) + tf.gather(self.log_mix, self.q_terms[1]) + tf.reduce_sum(tf.log(tf.reduce_sum(tf.gather(Q, self.q_terms[0]) * tf.gather(QoA, self.q_terms[1]), axis=2)), axis=1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_222": {
                "x": {
                    "value": "self.logQ",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_226": {
                "input": {
                    "value": "self.Wbar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_226": {
                "input_tensor": {
                    "value": "Q * tf.expand_dims(self.Wbar, axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_120": {
                "a": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(Q * self.Wbar, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(Q * tf.expand_dims(self.Wbar, axis=0), axis=2, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "b": {
                    "value": "self.PhiTy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_137": {
                "params": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(Q * self.Wbar, axis=1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(Q * tf.expand_dims(self.Wbar, axis=0), axis=2, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.terms[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_151": {
                "input_tensor": {
                    "value": "Q * tf.expand_dims(self.logA, axis=0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "range_287": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_152": {
                "input_tensor": {
                    "value": "Q * QoA",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_154": {
                "input_tensor": {
                    "value": "tf.gather(Q, self.q_terms[0]) * tf.gather(QoA, self.q_terms[1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_151": {
                "input": {
                    "value": "self.logA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_152": {
                "x": {
                    "value": "tf.reduce_sum(Q * QoA, axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_153": {
                "params": {
                    "value": "self.log_mix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.q_terms[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_154": {
                "x": {
                    "value": "tf.reduce_sum(tf.gather(Q, self.q_terms[0]) * tf.gather(QoA, self.q_terms[1]), axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_154": {
                "params": {
                    "value": "QoA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(self.logQ - tf.expand_dims(self.logA, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "self.q_terms[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}