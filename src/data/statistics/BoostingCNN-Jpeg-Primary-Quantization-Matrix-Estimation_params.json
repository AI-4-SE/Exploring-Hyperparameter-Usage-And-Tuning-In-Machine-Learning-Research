{
    "localization.py": {
        "tensorflow": {
            "load_model_63": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model_QF1_60-98_QF2_90-2-term-loss.h5'",
                            "str"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'custom_softmax': custom_softmax_activation(max_coeffs), 'custom_two_terms_loss_wrapper': custom_two_terms_loss_wrapper(max_coeffs, 0.8), 'custom_mse': custom_mse_wrapper(max_coeffs)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "networks.py": {
        "tensorflow": {
            "Model_232": {
                "variable": {
                    "value": "new_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "model.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "new_output_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dense(num_classes, activation='relu', name='predictions')(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_251": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_41": {
                "a": {
                    "value": "K.pow(2 * K.abs(y_pred - y_true), 20) / (1 + K.pow(2 * K.abs(y_pred - y_true), 19))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_75": {
                "variable": {
                    "value": "mse_val",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "categorical_crossentropy_112": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true[:, int(bins[0]):int(bins[1])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred[:, int(bins[0]):int(bins[1])]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_179": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.scalar_mul(c, loss_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.scalar_mul(1 - c, loss_2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_182": {
                "variable": {
                    "value": "tot_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(y_true[:, int(bins[0]):int(bins[1])], y_pred[:, int(bins[0]):int(bins[1])])",
                            "Call"
                        ],
                        [
                            "tf.add(loss, categorical_crossentropy(y_true[:, int(bins[i]):int(bins[i + 1])], y_pred[:, int(bins[i]):int(bins[i + 1])]))",
                            "Call"
                        ],
                        [
                            "tf.add(tf.scalar_mul(c, loss_1), tf.scalar_mul(1 - c, loss_2))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_183": {
                "variable": {
                    "value": "tot_loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=(batch_size,), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.add(loss_1, cce)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_184": {
                "variable": {
                    "value": "tot_loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=(batch_size,), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.add(loss_2, custom_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_209": {
                "a": {
                    "value": "K.square(y_pred - y_true) / K.square(y_true)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_59": {
                "values": {
                    "value": "stack_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "add_82": {
                "variable": {
                    "value": "mse_val",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mse_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0, dtype=tf.float64)",
                            "Call"
                        ],
                        [
                            "tf.add(mse_val, tf.reduce_sum(tf.square(y_true_to_coeff - y_pred_to_coeff)) / cfg.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(tf.square(y_true_to_coeff - y_pred_to_coeff)) / cfg.batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_115": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(y_true[:, int(bins[0]):int(bins[1])], y_pred[:, int(bins[0]):int(bins[1])])",
                            "Call"
                        ],
                        [
                            "tf.add(loss, categorical_crossentropy(y_true[:, int(bins[i]):int(bins[i + 1])], y_pred[:, int(bins[i]):int(bins[i + 1])]))",
                            "Call"
                        ],
                        [
                            "tf.add(tf.scalar_mul(c, loss_1), tf.scalar_mul(1 - c, loss_2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "categorical_crossentropy(y_true[:, int(bins[i]):int(bins[i + 1])], y_pred[:, int(bins[i]):int(bins[i + 1])])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "categorical_crossentropy_153": {
                "variable": {
                    "value": "cce",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true[:, bins[i]:bins[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred[:, bins[i]:bins[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_156": {
                "variable": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=(batch_size,), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.add(loss_1, cce)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "cce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "categorical_crossentropy(y_true[:, bins[i]:bins[i + 1]], y_pred[:, bins[i]:bins[i + 1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_160": {
                "variable": {
                    "value": "ind_arr_i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(int(max_vals[i]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_161": {
                "variable": {
                    "value": "batch_ind_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(ind_arr_i, (1, int(max_vals[i])))",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_164": {
                "variable": {
                    "value": "y_true_i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_true[:, bins[i]:bins[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_165": {
                "variable": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.equal(y_true_i, tf.constant(1, dtype=tf.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_168": {
                "variable": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.repeat(tf.reshape(v_i[:, 1], (batch_size, 1)), int(max_vals[i]), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_171": {
                "variable": {
                    "value": "delta_sq_i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.subtract(batch_ind_i, v_i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_174": {
                "variable": {
                    "value": "custom_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(y_pred[:, bins[i]:bins[i + 1]], delta_sq_i)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_176": {
                "variable": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=(batch_size,), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.add(loss_2, custom_term)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "custom_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.multiply(y_pred[:, bins[i]:bins[i + 1]], delta_sq_i), 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "print_185": {
                "*inputs": {
                    "value": "Loss: ",
                    "type": "str",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "tot_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(loss)",
                            "Call"
                        ]
                    ]
                },
                "output_stream": {
                    "value": "sys.stdout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_229": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_254": {
                "filters": {
                    "value": "nf_base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "in_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(64",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_263": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "MaxPooling2D_276": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_280": {
                "filters": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(model.layers[-1].output_shape[-1] / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "conv3_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_283": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_284": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_285": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_286": {
                "units": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "predictions",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pow_41": {
                "x": {
                    "value": "2 * K.abs(y_pred - y_true)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "19",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scalar_mul_179": {
                "scalar": {
                    "value": "1 - c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "x": {
                    "value": "loss_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros(shape=(batch_size,), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.add(loss_2, custom_term)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_209": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2D_257": {
                "filters": {
                    "value": "nf_base + nf_base * (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv1_{}'.format(i + 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_269": {
                "filters": {
                    "value": "last_size + nf_base * (i + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'conv2_{}'.format(i + 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_79": {
                "input": {
                    "value": "y_true[:, bins[i]:bins[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_80": {
                "input": {
                    "value": "y_pred[:, bins[i]:bins[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "categorical_crossentropy_115": {
                "y_true": {
                    "value": "y_true[:, int(bins[i]):int(bins[i + 1])]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred[:, int(bins[i]):int(bins[i + 1])]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_161": {
                "tensor": {
                    "value": "ind_arr_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.range(int(max_vals[i])), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, int(max_vals[i]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "equal_165": {
                "x": {
                    "value": "y_true_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y_true[:, bins[i]:bins[i + 1]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "repeat_168": {
                "input": {
                    "value": "tf.reshape(v_i[:, 1], (batch_size, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "int(max_vals[i])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "subtract_171": {
                "x": {
                    "value": "batch_ind_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.repeat(tf.reshape(ind_arr_i, (1, int(max_vals[i]))), batch_size, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.equal(y_true_i, tf.constant(1, dtype=tf.float32)))",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.repeat(tf.reshape(v_i[:, 1], (batch_size, 1)), int(max_vals[i]), 1), tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_174": {
                "x": {
                    "value": "y_pred[:, bins[i]:bins[i + 1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "delta_sq_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(tf.subtract(batch_ind_i, v_i))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_41": {
                "x": {
                    "value": "y_pred - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "tf.square(y_true_to_coeff - y_pred_to_coeff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_165": {
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "v_i[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "square_83": {
                "x": {
                    "value": "y_true_to_coeff - y_pred_to_coeff",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "predict_1term.py": {
        "tensorflow": {
            "load_model_68": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/model_OriginalPaperModels/DNN90_60LOG.h5'",
                            "str"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'custom_softmax': custom_softmax_activation(max_coeffs), 'custom_categorical': custom_categorical(max_coeffs)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "predict_alignment.py": {
        "tensorflow": {
            "load_model_83": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/model_QF1_60-98-s1-2-term-loss-from-86+20+4+30+ep-30-coef-15/model_ep29.h5'",
                            "str"
                        ],
                        [
                            "'models/model_OriginalPaperModels/DNN90_60LOG.h5'",
                            "str"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'custom_softmax': custom_softmax_activation(max_coeffs), 'custom_categorical': custom_categorical(max_coeffs)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "load_model_87": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'models/model_QF1_60-98-s1-2-term-loss-from-86+20+4+30+ep-30-coef-15/model_ep29.h5'",
                            "str"
                        ],
                        [
                            "'models/model_OriginalPaperModels/DNN90_60LOG.h5'",
                            "str"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'custom_softmax': custom_softmax_activation(max_coeffs), 'custom_two_terms_loss_wrapper': custom_two_terms_loss_wrapper(max_coeffs, cfg.mse_weight), 'custom_mse': custom_mse_wrapper(max_coeffs)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    },
    "train_1term.py": {
        "tensorflow": {
            "load_model_63": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "models/model_QF1=60-95-QF2-90--1-terms-loss-ep-86+20+4-coef-15/model_ep3.h5",
                    "type": "str",
                    "possible_values": []
                },
                "custom_objects": {
                    "value": "{'custom_softmax': custom_softmax_activation(max_coeffs), 'custom_categorical': custom_categorical(max_coeffs), 'custom_mse': custom_mse_wrapper(max_coeffs)}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Adam_71": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train_2terms.py": {
        "tensorflow": {
            "Adam_72": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "cfg.base_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_gpu_available_90": {
                "variable": {
                    "value": "gpu_check",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "usage.py": {
        "tensorflow": {
            "load_model_37": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model_QF1_60-98_QF2_90-2-term-loss.h5'",
                            "str"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "{'custom_softmax': custom_softmax_activation(max_coeffs), 'custom_two_terms_loss_wrapper': custom_two_terms_loss_wrapper(max_coeffs, 0.8), 'custom_mse': custom_mse_wrapper(max_coeffs)}",
                    "type": "Dict",
                    "possible_values": []
                }
            }
        }
    }
}