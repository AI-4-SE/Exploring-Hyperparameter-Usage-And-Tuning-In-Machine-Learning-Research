{
    "dataset_conversion/AutomaticCardiacDetectionChallenge.py": {
        "sklearn": {
            "KFold_99": {
                "variable": {
                    "value": "kf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "training/network_training/network_trainer.py": {
        "sklearn": {
            "KFold_132": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_279": {
                "variable": {
                    "value": "saved_model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cuda', torch.cuda.current_device())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_44": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_all_45": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_248": {
                "obj": {
                    "value": "{'epoch': self.epoch + 1, 'state_dict': state_dict, 'optimizer_state_dict': optimizer_state_dict, 'lr_scheduler_state_dict': lr_sched_state_dct, 'plot_stuff': (self.all_tr_losses, self.all_val_losses, self.all_val_losses_tr_mode, self.all_val_eval_metrics)}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_531": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict['data']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(data).float()",
                            "Call"
                        ],
                        [
                            "data.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_533": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict['target']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(target).float()",
                            "Call"
                        ],
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_549": {
                "variable": {
                    "value": "target_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict['target']",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(target).float()",
                            "Call"
                        ],
                        [
                            "target.cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_shape[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[[96, 96, 48], [48, 48, 48], [24, 24, 24], [12, 12, 12]]",
                            "List"
                        ]
                    ]
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_279": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_279": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inference/predict.py": {
        "torch": {
            "empty_cache_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "network_architecture/generic_UNet.py": {
        "torch": {
            "LeakyReLU_57": {
                "variable": {
                    "value": "self.lrelu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[ConvDropoutNormNonlin(input_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs_first_conv, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs)] + [ConvDropoutNormNonlin(output_feature_channels, output_feature_channels, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs) for _ in range(num_convs - 1)]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleList_413": {
                "variable": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_localization",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_414": {
                "variable": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.conv_blocks_context",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_415": {
                "variable": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.td",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_417": {
                "variable": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.tu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_418": {
                "variable": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.seg_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "interpolate_149": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[d](x)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_context[-1](x)",
                            "Call"
                        ],
                        [
                            "self.td[d](x)",
                            "Call"
                        ],
                        [
                            "self.tu[u](x)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, skips[-(u + 1)]), dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_blocks_localization[u](x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "self.scale_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "self.align_corners",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_446": {
                "variable": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.upscale_logits_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_465": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, skips[-(u + 1)])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_351": {
                "*args": {
                    "value": "StackedConvLayers(input_features, output_features, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs, first_stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_387": {
                "*args": {
                    "value": "StackedConvLayers(n_features_after_tu_and_concat, nfeatures_from_skip, num_conv_per_stage - 1, self.conv_op, self.conv_kwargs, self.norm_op, self.norm_op_kwargs, self.dropout_op, self.dropout_op_kwargs, self.nonlin, self.nonlin_kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "network_architecture/initialization.py": {
        "torch": {}
    },
    "network_architecture/neural_network.py": {
        "torch": {
            "from_numpy_133": {
                "variable": {
                    "value": "x_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xsteps",
                            "variable"
                        ],
                        [
                            "xsteps",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "result_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_212": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, x.shape[0]] + list(patch_size)",
                            "BinOp"
                        ],
                        [
                            "[int(i) for i in input_size]",
                            "ListComp"
                        ],
                        [
                            "[1, patient_data.shape[0]] + list(tile_size)",
                            "BinOp"
                        ],
                        [
                            "[int(i) for i in input_size]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "from_numpy_349": {
                "variable": {
                    "value": "x_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xsteps",
                            "variable"
                        ],
                        [
                            "xsteps",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_355": {
                "variable": {
                    "value": "result_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1, self.num_classes] + list(x.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_407": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, x.shape[0]] + list(patch_size)",
                            "BinOp"
                        ],
                        [
                            "[int(i) for i in input_size]",
                            "ListComp"
                        ],
                        [
                            "[1, patient_data.shape[0]] + list(tile_size)",
                            "BinOp"
                        ],
                        [
                            "[int(i) for i in input_size]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_235": {
                "variable": {
                    "value": "add_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp_smooth + 1e-08",
                            "BinOp"
                        ],
                        [
                            "np.ones(patch_size)",
                            "Call"
                        ],
                        [
                            "tmp_smooth",
                            "variable"
                        ],
                        [
                            "np.ones(tile_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_237": {
                "variable": {
                    "value": "add_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp_smooth + 1e-08",
                            "BinOp"
                        ],
                        [
                            "np.ones(patch_size)",
                            "Call"
                        ],
                        [
                            "tmp_smooth",
                            "variable"
                        ],
                        [
                            "np.ones(tile_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_430": {
                "variable": {
                    "value": "add_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp_smooth + 1e-08",
                            "BinOp"
                        ],
                        [
                            "np.ones(patch_size)",
                            "Call"
                        ],
                        [
                            "tmp_smooth",
                            "variable"
                        ],
                        [
                            "np.ones(tile_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_432": {
                "variable": {
                    "value": "add_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "add",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tmp_smooth + 1e-08",
                            "BinOp"
                        ],
                        [
                            "np.ones(patch_size)",
                            "Call"
                        ],
                        [
                            "tmp_smooth",
                            "variable"
                        ],
                        [
                            "np.ones(tile_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "resize_test.py": {
        "torch": {
            "from_numpy_20": {
                "variable": {
                    "value": "image_data_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image.get_data()",
                            "Call"
                        ],
                        [
                            "image_data[np.newaxis, np.newaxis, :, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_23": {
                "variable": {
                    "value": "label_data_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label.get_data()",
                            "Call"
                        ],
                        [
                            "label_data[np.newaxis, np.newaxis, :, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "interpolate_31": {
                "variable": {
                    "value": "label_data_new_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_data_torch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(label_data).float()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([50, 200, 200])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "trilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_36": {
                "variable": {
                    "value": "label_data_new_torch_nearest",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label_data_torch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(label_data).float()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tuple([50, 200, 200])",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unique_32": {
                "input": {
                    "value": "label_data_new_torch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(label_data_torch, size=new_shape, mode='trilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_33": {
                "input": {
                    "value": "label_data_new_torch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(label_data_torch, size=new_shape, mode='trilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_37": {
                "input": {
                    "value": "label_data_new_torch_nearest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(label_data_torch, size=new_shape, mode='nearest')",
                            "Call"
                        ]
                    ]
                }
            },
            "unique_38": {
                "input": {
                    "value": "label_data_new_torch_nearest",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.interpolate(label_data_torch, size=new_shape, mode='nearest')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "training/loss_functions/ND_Crossentropy.py": {
        "torch": {}
    },
    "training/loss_functions/dice_loss.py": {
        "torch": {
            "ones_135": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tp.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "shp_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "rebalance_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rebalance_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rebalance_weights[1:]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(rebalance_weights).float()",
                            "Call"
                        ],
                        [
                            "rebalance_weights.cuda(net_output.device.index)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_202": {
                "variable": {
                    "value": "ce_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.28, 0.28, 0.44]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pow_165": {
                "input": {
                    "value": "-torch.log(dice_1[1])",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "current_device_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_165": {
                "input": {
                    "value": "dice_1[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "training/model_restore.py": {
        "torch": {
            "load_126": {
                "f": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cuda', torch.cuda.current_device())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_126": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.cuda.current_device()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "training/network_training/nnUNetTrainer.py": {
        "torch": {
            "Adam_252": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.network.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.initial_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "self.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_256": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "self.lr_scheduler_patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "threshold": {
                    "value": "self.lr_scheduler_eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "threshold_mode": {
                    "value": "abs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_device_237": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_569": {
                "variable": {
                    "value": "tp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_570": {
                "variable": {
                    "value": "fp_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_571": {
                "variable": {
                    "value": "fn_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(target.shape[0], num_classes - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "no_grad_560": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utilities/nd_softmax.py": {
        "torch": {
            "exp_22": {
                "variable": {
                    "value": "e_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - x_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utilities/online_evaluation_metrics.py": {
        "torch": {}
    },
    "utilities/tensor_utilities.py": {
        "torch": {
            "arange_49": {
                "variable": {
                    "value": "indices[dim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x.size(dim) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}