{
    "src/attention.py": {
        "tensorflow": {
            "convert_to_tensor_28": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(context)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(context, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_30": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.convert_to_tensor(context)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(context, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_11": {
                "variable": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_output[:, i:i + 1, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_13": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[decoder_hidden_state, enc]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_15": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([decoder_hidden_state, enc], 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(model.attention_weights1, score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(model.attention_weights2, score)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_17": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "model.attention_weights1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([decoder_hidden_state, enc], 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(model.attention_weights1, score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(model.attention_weights2, score)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_19": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "model.attention_weights2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([decoder_hidden_state, enc], 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(model.attention_weights1, score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(model.attention_weights2, score)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_21": {
                "variable": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([decoder_hidden_state, enc], 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(model.attention_weights1, score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(model.attention_weights2, score)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_25": {
                "variable": {
                    "value": "weighted_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([decoder_hidden_state, enc], 1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(model.attention_weights1, score)",
                            "Call"
                        ],
                        [
                            "tf.matmul(model.attention_weights2, score)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(score)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.squeeze(encoder_output[:, i:i + 1, :])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/enhanced_model.py": {
        "tensorflow": {
            "GRU_18": {
                "variable": {
                    "value": "self.gru_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_19": {
                "variable": {
                    "value": "self.gru_decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_20": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_22": {
                "variable": {
                    "value": "self.feed_forward1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "ff_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_23": {
                "variable": {
                    "value": "self.feed_forward2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.english_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "ff_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_25": {
                "variable": {
                    "value": "self.french_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([self.french_vocab_size, self.embedding_size], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "frn embed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "variable": {
                    "value": "self.attention_weights1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([200, 512], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "at 1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "self.attention_weights2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([100, 200], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "at 2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_33": {
                "variable": {
                    "value": "self.scratchpad_dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "scratch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_35": {
                "variable": {
                    "value": "self.scratchpad_dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "scratch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_37": {
                "variable": {
                    "value": "self.feedforward1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "ff1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_38": {
                "variable": {
                    "value": "self.feedforward2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "english_vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "ff2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "french_embedded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.french_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "encoder_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "variable": {
                    "value": "final_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_output_tensors[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_95": {
                "variable": {
                    "value": "decoded_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prbs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.boolean_mask(tf.cast(tf.equal(decoded_symbols, labels), dtype=tf.float32), mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_63": {
                "variable": {
                    "value": "attentive_read",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attentive_read",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.attention_func(self, decoder_state, enc_outputs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attentive_read, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "variable": {
                    "value": "final_output_element",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.feed_forward2(self.feed_forward1(final_output_element))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_79": {
                "variable": {
                    "value": "final_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[final_output, tf.expand_dims(final_output_tensors[i], 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "input_tensor": {
                    "value": "tf.boolean_mask(tf.keras.losses.sparse_categorical_crossentropy(labels, prbs), mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_26": {
                "shape": {
                    "value": "[self.french_vocab_size, self.embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_29": {
                "shape": {
                    "value": "[200, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_31": {
                "shape": {
                    "value": "[100, 200]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "boolean_mask_97": {
                "tensor": {
                    "value": "tf.cast(tf.equal(decoded_symbols, labels), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "boolean_mask_113": {
                "tensor": {
                    "value": "tf.keras.losses.sparse_categorical_crossentropy(labels, prbs)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "tf.equal(decoded_symbols, labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_categorical_crossentropy_113": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "prbs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "input": {
                    "value": "final_output_tensors[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_97": {
                "x": {
                    "value": "decoded_symbols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(input=prbs, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "tensorflow": {
            "Checkpoint_100": {
                "variable": {
                    "value": "normal_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "model": {
                    "value": "normal_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Seq2Seq(*model_args)",
                            "Call"
                        ]
                    ]
                }
            },
            "CheckpointManager_101": {
                "variable": {
                    "value": "normal_manager",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "normal_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(model=normal_model)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "./normal_chkpnts",
                    "type": "str",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Checkpoint_106": {
                "variable": {
                    "value": "enhanced_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "model": {
                    "value": "enhanced_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Seq2SeqWithAttention(*model_args)",
                            "Call"
                        ]
                    ]
                }
            },
            "CheckpointManager_107": {
                "variable": {
                    "value": "enhanced_manager",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "enhanced_checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(model=enhanced_model)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "./enhanced_chkpnts",
                    "type": "str",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientTape_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/normal_model.py": {
        "tensorflow": {
            "GRU_18": {
                "variable": {
                    "value": "self.gru_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GRU_19": {
                "variable": {
                    "value": "self.gru_decoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_state": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_20": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_22": {
                "variable": {
                    "value": "self.feed_forward1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "ff_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_23": {
                "variable": {
                    "value": "self.feed_forward2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.english_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "ff_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_25": {
                "variable": {
                    "value": "self.french_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([self.french_vocab_size, self.embedding_size], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "frn embed",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "variable": {
                    "value": "self.attention_weights1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([200, 512], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "at 1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "self.attention_weights2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.truncated_normal([100, 200], stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "at 2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_33": {
                "variable": {
                    "value": "self.scratchpad_dense1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "scratch1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_35": {
                "variable": {
                    "value": "self.scratchpad_dense2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "scratch2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_37": {
                "variable": {
                    "value": "self.feedforward1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "ff1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_38": {
                "variable": {
                    "value": "self.feedforward2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "english_vocab_size",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "ff2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "embedding_lookup_48": {
                "variable": {
                    "value": "french_embedded_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.french_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "encoder_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_75": {
                "variable": {
                    "value": "final_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_output_tensors[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_95": {
                "variable": {
                    "value": "decoded_symbols",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prbs",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_97": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.boolean_mask(tf.cast(tf.equal(decoded_symbols, labels), dtype=tf.float32), mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_63": {
                "variable": {
                    "value": "attentive_read",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attentive_read",
                    "type": "variable",
                    "possible_values": [
                        [
                            "attention.attention_func(self, decoder_state, enc_outputs)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(attentive_read, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_69": {
                "variable": {
                    "value": "final_output_element",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.feed_forward2(self.feed_forward1(final_output_element))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_79": {
                "variable": {
                    "value": "final_output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[final_output, tf.expand_dims(final_output_tensors[i], 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_113": {
                "input_tensor": {
                    "value": "tf.boolean_mask(tf.keras.losses.sparse_categorical_crossentropy(labels, prbs), mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_26": {
                "shape": {
                    "value": "[self.french_vocab_size, self.embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_29": {
                "shape": {
                    "value": "[200, 512]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_31": {
                "shape": {
                    "value": "[100, 200]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "boolean_mask_97": {
                "tensor": {
                    "value": "tf.cast(tf.equal(decoded_symbols, labels), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "boolean_mask_113": {
                "tensor": {
                    "value": "tf.keras.losses.sparse_categorical_crossentropy(labels, prbs)",
                    "type": "Call",
                    "possible_values": []
                },
                "mask": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_97": {
                "x": {
                    "value": "tf.equal(decoded_symbols, labels)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_categorical_crossentropy_113": {
                "y_true": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "prbs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_79": {
                "input": {
                    "value": "final_output_tensors[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_97": {
                "x": {
                    "value": "decoded_symbols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(input=prbs, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/preprocess.py": {
        "tensorflow": {}
    },
    "src/scratchpad.py": {
        "tensorflow": {
            "expand_dims_9": {
                "variable": {
                    "value": "decoder_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_hidden_state",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_17": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[stacked_decoder_state, stacked_attention, encoder_output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_19": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([stacked_decoder_state, stacked_attention, encoder_output], 2)",
                            "Call"
                        ],
                        [
                            "model.scratchpad_dense1(prob)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(prob, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_23": {
                "variable": {
                    "value": "global_update",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.squeeze(decoder_hidden_state), tf.squeeze(attentive_read)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_25": {
                "variable": {
                    "value": "global_update",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.squeeze(decoder_hidden_state), tf.squeeze(attentive_read)], 1)",
                            "Call"
                        ],
                        [
                            "model.scratchpad_dense2(global_update)",
                            "Call"
                        ],
                        [
                            "tf.math.tanh(global_update)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_33": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(update_probs, [0, 0, 0], [100, 1, 100])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(encoder_output, [0, 0, 0], [100, 1, 256])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_36": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(probs, out) + tf.matmul(1 - probs, global_update)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(outputs, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([outputs, output], 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_13": {
                "variable": {
                    "value": "stacked_decoder_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[stacked_decoder_state, decoder_hidden_state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_16": {
                "variable": {
                    "value": "stacked_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[stacked_attention, attentive_read]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_38": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(update_probs, [0, i, 0], [100, 1, 100])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.slice(encoder_output, [0, i, 0], [100, 1, 256])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_41": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(probs, out) + tf.matmul(1 - probs, global_update)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(output, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[outputs, output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "slice_33": {
                "input_": {
                    "value": "update_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob",
                            "variable"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[100, 1, 100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_34": {
                "input_": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[100, 1, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "a": {
                    "value": "1 - probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "global_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.squeeze(decoder_hidden_state), tf.squeeze(attentive_read)], 1)",
                            "Call"
                        ],
                        [
                            "model.scratchpad_dense2(global_update)",
                            "Call"
                        ],
                        [
                            "tf.math.tanh(global_update)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_23": {
                "input": {
                    "value": "attentive_read",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "slice_38": {
                "input_": {
                    "value": "update_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob",
                            "variable"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[100, 1, 100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_39": {
                "input_": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "begin": {
                    "value": "[0, i, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[100, 1, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "a": {
                    "value": "1 - probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "global_update",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.squeeze(decoder_hidden_state), tf.squeeze(attentive_read)], 1)",
                            "Call"
                        ],
                        [
                            "model.scratchpad_dense2(global_update)",
                            "Call"
                        ],
                        [
                            "tf.math.tanh(global_update)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}