{
    "model/loss.py": {
        "sklearn": {
            "GaussianMixture_143": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "weights_init": {
                    "value": "[0.5, 0.5]",
                    "type": "List",
                    "possible_values": []
                },
                "means_init": {
                    "value": "[[candi_score.min()], [candi_score.max()]]",
                    "type": "List",
                    "possible_values": []
                },
                "precisions_init": {
                    "value": "[[[1.0]], [[1.0]]]",
                    "type": "List",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "BCEWithLogitsLoss_15": {
                "variable": {
                    "value": "self.iou_bce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_24": {
                "variable": {
                    "value": "pred_x2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred_boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_25": {
                "variable": {
                    "value": "pred_y2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred_boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_35": {
                "variable": {
                    "value": "x1_intersect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred_boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_36": {
                "variable": {
                    "value": "y1_intersect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred_boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_37": {
                "variable": {
                    "value": "x2_intersect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred_boxes[:, 2]",
                            "Subscript"
                        ],
                        [
                            "torch.max(pred_x1, pred_x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_38": {
                "variable": {
                    "value": "y2_intersect",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred_boxes[:, 3]",
                            "Subscript"
                        ],
                        [
                            "torch.max(pred_y1, pred_y2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_39": {
                "variable": {
                    "value": "area_intersect",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "pred_x1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_43": {
                "variable": {
                    "value": "x1_enclosing",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_x1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred_boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "min_44": {
                "variable": {
                    "value": "y1_enclosing",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred_boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_45": {
                "variable": {
                    "value": "x2_enclosing",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_x2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred_boxes[:, 2]",
                            "Subscript"
                        ],
                        [
                            "torch.max(pred_x1, pred_x2)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_46": {
                "variable": {
                    "value": "y2_enclosing",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_y2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pred_boxes[:, 3]",
                            "Subscript"
                        ],
                        [
                            "torch.max(pred_y1, pred_y2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_84": {
                "variable": {
                    "value": "category_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "category_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(category_all, dim=0).int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "offset_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "offset_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(offset_all, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "index_all",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "index_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(index_all, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "final_c_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_c_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(final_c_batch, dim=0).int()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "final_offset_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "final_offset_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(final_offset_batch, dim=0)",
                            "Call"
                        ],
                        [
                            "final_offset_batch[pos_i_final]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_183": {
                "variable": {
                    "value": "lt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_184": {
                "variable": {
                    "value": "rb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[:, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "nonzero_196": {
                "variable": {
                    "value": "pos_i_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c_init_batch > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "pos_i_init",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "final_c",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.anchor_cat.box.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_111": {
                "variable": {
                    "value": "final_box_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.anchor_cat.box",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_217": {
                "variable": {
                    "value": "pos_i_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_c_batch > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "variable": {
                    "value": "pos_i_final",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_206": {
                "variable": {
                    "value": "box_loss_full",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(c_loss.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "10000",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "c_loss.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_135": {
                "variable": {
                    "value": "candi_i_per_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "candi_i_per_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(candi_i_per_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "variable": {
                    "value": "gmm_component",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm_component",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gmm.predict(candi_score)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gmm_component).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_153": {
                "variable": {
                    "value": "gmm_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gmm_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "gmm.score_samples(candi_score)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(gmm_score).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_211": {
                "input": {
                    "value": "score_batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score_batch.reshape(bs, -1)",
                            "Call"
                        ],
                        [
                            "c_loss.sum(dim=1) + box_loss_full",
                            "BinOp"
                        ]
                    ]
                }
            },
            "any_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "build_stuff/setup.py": {
        "torch": {
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "config.py": {
        "torch": {
            "set_device_119": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "data/coco.py": {
        "torch": {
            "as_tensor_79": {
                "variable": {
                    "value": "box",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "box",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[aa['bbox'] for aa in anno]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(box).reshape(-1, 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "box",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "data": {
                    "value": "category",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[aa['category_id'] for aa in anno]",
                            "ListComp"
                        ],
                        [
                            "[self.to_contiguous_id[c] for c in category]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "data/data_loader.py": {
        "torch": {
            "as_tensor_21": {
                "variable": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "group_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(map(lambda y: bisect.bisect_right([1], y), aspect_ratios))",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_31": {
                "variable": {
                    "value": "sampled_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(self.sampler)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_36": {
                "variable": {
                    "value": "order",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(dataset_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_37": {
                "variable": {
                    "value": "order[sampled_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "len(sampled_ids)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_62": {
                "variable": {
                    "value": "first_index_of_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[inv_sampled_ids_map[s] for s in first_element_of_batch]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DistributedSampler_155": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "COCODataset(cfg, valing)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SequentialSampler_159": {
                "variable": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "COCODataset(cfg, valing)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_176": {
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "COCODataset(cfg, valing)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "Call",
                    "possible_values": [
                        [
                            "group_sampler(sampler, group_ids, batch_size, drop_uneven=False)",
                            "Call"
                        ],
                        [
                            "iteration_sampler(batch_sampler, num_iters, start_iter)",
                            "Call"
                        ]
                    ]
                },
                "collate_fn": {
                    "value": "BatchCollator()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unique_25": {
                "input": {
                    "value": "self.group_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_25": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "model/deform_conv_func.py": {
        "torch": {
            "zeros_like_121": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_122": {
                "variable": {
                    "value": "grad_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_123": {
                "variable": {
                    "value": "grad_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_124": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_125": {
                "variable": {
                    "value": "grad_bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.new_empty(1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_54": {
                "variable": {
                    "value": "grad_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_55": {
                "variable": {
                    "value": "grad_offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_64": {
                "variable": {
                    "value": "grad_weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/deform_conv_module.py": {
        "torch": {
            "Parameter_24": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // self.groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_74": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels, in_channels // groups, *self.kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_114": {
                "variable": {
                    "value": "self.conv_offset_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels // self.groups",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.deformable_groups * 3 * self.kernel_size[0] * self.kernel_size[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "_pair(self.stride)",
                    "type": "Call",
                    "possible_values": []
                },
                "padding": {
                    "value": "_pair(self.padding)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_128": {
                "variable": {
                    "value": "(o1, o2, mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv_offset_mask(input)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "offset",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(o1, o2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_130": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_27": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_76": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "model/fpn.py": {
        "torch": {
            "Conv2d_87": {
                "variable": {
                    "value": "self.p6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.p7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_71": {
                "variable": {
                    "value": "inner_top_down",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "last_inner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(self, self.inner_blocks[-1])(x[-1])",
                            "Call"
                        ],
                        [
                            "inner_lateral + inner_top_down",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(int(inner_lateral.shape[-2]), int(inner_lateral.shape[-1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "*args": {
                    "value": "*module",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_97": {
                "input": {
                    "value": "p6",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.p6(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "model/layers.py": {
        "torch": {
            "ones_123": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_126": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "model/paa.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor([init_value], dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.cls_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.bbox_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.iou_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_anchors * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Scale(init_value=1.0) for _ in range(5)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.backbone",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('body', body), ('fpn', fpn)])",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_16": {
                "data": {
                    "value": "[init_value]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "*args": {
                    "value": "*cls_tower",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "*args": {
                    "value": "*bbox_tower",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_37": {
                "num_groups": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GroupNorm_41": {
                "num_groups": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/resnet.py": {
        "torch": {
            "relu__137": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__141": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__150": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.bn2(out)",
                            "Call"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ],
                        [
                            "self.bn3(out0)",
                            "Call"
                        ],
                        [
                            "out + identity",
                            "BinOp"
                        ],
                        [
                            "F.relu_(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu__167": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_pool2d_168": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.stem(x)",
                            "Call"
                        ],
                        [
                            "getattr(self, stage_name)(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "F.relu_(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2, padding=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "module",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "*blocks",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, out_channels, kernel_size=1, stride=down_stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "model/sigmoid_focal_loss.py": {
        "torch": {
            "arange_39": {
                "variable": {
                    "value": "class_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_classes + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.dtype",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "targets.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_39": {
                "variable": {
                    "value": "class_range",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_42": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_43": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_44": {
                "input": {
                    "value": "1 - p",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "stack_52": {
                "variable": {
                    "value": "img_tensor_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aa.img for aa in img_list_batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "all_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[category_loss, box_loss, iou_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/anchor_generator.py": {
        "torch": {
            "from_numpy_70": {
                "ndarray": {
                    "value": "anchors",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_ratio_enum(anchor, aspect_ratios)",
                            "Call"
                        ],
                        [
                            "np.vstack([_scale_enum(anchors[i, :], scales) for i in range(anchors.shape[0])])",
                            "Call"
                        ],
                        [
                            "np.hstack((x_ctr - 0.5 * (ws - 1), y_ctr - 0.5 * (hs - 1), x_ctr + 0.5 * (ws - 1), y_ctr + 0.5 * (hs - 1)))",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ],
                        [
                            "_mkanchors(ws, hs, x_ctr, y_ctr)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_46": {
                "variable": {
                    "value": "shifts_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_width * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_47": {
                "variable": {
                    "value": "shifts_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "grid_height * stride",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_48": {
                "variable": {
                    "value": "(shift_y, shift_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "shifts_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_height * stride, step=stride, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "shifts_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.arange(0, grid_width * stride, step=stride, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_51": {
                "variable": {
                    "value": "shifts",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(shift_x, shift_y, shift_x, shift_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/box_list.py": {
        "torch": {
            "max_176": {
                "variable": {
                    "value": "lt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, :2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_177": {
                "variable": {
                    "value": "rb",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box1[:, None, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "self.box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, y1, x2, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "self.box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(new_x1, new_y1, new_x2, new_y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "cat_box",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[getattr(box_list, k) for box_list in box_list_fpn]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "kwargs[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "aa",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_30": {
                "variable": {
                    "value": "self.box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, y1, x2, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "self.box",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, y1, x2 - x1 + TO_REMOVE, y2 - y1 + TO_REMOVE)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/checkpoint.py": {
        "torch": {
            "as_tensor_140": {
                "variable": {
                    "value": "match_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "match_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[len(j) if i.endswith(j) else 0 for i in current_keys for j in loaded_keys]",
                            "ListComp"
                        ],
                        [
                            "torch.as_tensor(match_matrix).view(len(current_keys), len(loaded_keys))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "weights[k]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_157": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "f'weights/{self.cfg.__class__.__name__}_{cur_iter}.pth'",
                            "JoinedStr"
                        ]
                    ]
                }
            },
            "load_162": {
                "f": {
                    "value": "self.cfg.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/post_processor.py": {
        "torch": {
            "kthvalue_18": {
                "variable": {
                    "value": "(image_thre, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "score.cpu()",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "num_detections - cfg.max_detections + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "nonzero_20": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "keep",
                    "type": "Name",
                    "possible_values": [
                        [
                            "score >= image_thre.item()",
                            "Compare"
                        ],
                        [
                            "torch.nonzero(keep).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_20": {
                "variable": {
                    "value": "keep",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "result.box[result_inds]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "voted_boxes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "pis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(torch.exp(-(1 - pos_ious) ** 2 / sigma) * pos_scores).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_47": {
                "input": {
                    "value": "-(1 - pos_ious) ** 2 / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "utils/timer.py": {
        "torch": {
            "synchronize_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "cat_40": {
                "variable": {
                    "value": "iou_pred_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "iou_pred_flatten",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[aa.permute(0, 2, 3, 1).reshape(bs, -1, 1) for aa in iou_pred]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(iou_pred_flatten, dim=1).reshape(-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_40": {
                "variable": {
                    "value": "iou_pred_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "anchor_flatten",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[anchor_cat.box] * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_83": {
                "variable": {
                    "value": "dw",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "preds[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=math.log(1000.0 / 16))",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "math.log(1000.0 / 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_84": {
                "variable": {
                    "value": "dh",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "preds[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=math.log(1000.0 / 16))",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "math.log(1000.0 / 16)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_91": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "nonzero_120": {
                "variable": {
                    "value": "dt_index_per_gt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iou_matrix == max_dt_per_gt[:, None]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_11": {
                "tensors": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_64": {
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_175": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [value], 'lr': lr, 'weight_decay': weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lr * self.bias_lr_factor",
                            "BinOp"
                        ]
                    ]
                },
                "momentum": {
                    "value": "cfg.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_61": {
                "input": {
                    "value": "gt_widths / ex_widths",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_62": {
                "input": {
                    "value": "gt_heights / ex_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_88": {
                "input": {
                    "value": "dw",
                    "type": "Name",
                    "possible_values": [
                        [
                            "preds[:, 2::4] / ww",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dw, max=math.log(1000.0 / 16))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_89": {
                "input": {
                    "value": "dh",
                    "type": "Name",
                    "possible_values": [
                        [
                            "preds[:, 3::4] / wh",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dh, max=math.log(1000.0 / 16))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "val.py": {
        "torch": {
            "no_grad_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_139": {
                "f": {
                    "value": "cfg.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "img_tensor_batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[aa.img for aa in img_list_batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}