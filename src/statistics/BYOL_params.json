{
    "main.py": {
        "torch": {
            "CosEMA_133": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.total_steps": {
                    "value": "total_steps",
                    "possible_values": []
                },
                "self.base_decay": {
                    "value": "base_decay",
                    "possible_values": [
                        [
                            "0.996",
                            "MethodArgument"
                        ],
                        [
                            "0.996",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BYOL_167": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.base_network_output_size": {
                    "value": "base_network_output_size",
                    "possible_values": []
                },
                "Sequential_191": {
                    "variable": {
                        "value": "self.base_network",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "*list(model_fn(pretrained=False).children())[:-1]",
                        "possible_values": []
                    }
                },
                "Sequential_194": {
                    "variable": {
                        "value": "self.head",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(base_network_output_size, args.head_latent_size)",
                        "possible_values": []
                    }
                },
                "Sequential_200": {
                    "variable": {
                        "value": "self.predictor",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(projection_output_size, args.head_latent_size)",
                        "possible_values": []
                    }
                },
                "Linear_208": {
                    "variable": {
                        "value": "self.linear_classifier",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "base_network_output_size",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "classifier_output_size",
                        "possible_values": []
                    }
                }
            },
            "parameters_to_vector_223": {
                "variable": {
                    "value": "original_params",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.parameters()",
                    "possible_values": []
                }
            },
            "LambdaLR_288": {
                "variable": {
                    "value": "sched",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda epoch: 1.0",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_like_157": {
                "variable": {
                    "value": "self.mean",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "vector_to_parameters_224": {
                "vec": {
                    "value": "mean",
                    "possible_values": [
                        [
                            "self.target_network.mean",
                            "Attribute"
                        ]
                    ]
                },
                "parameters": {
                    "value": "self.parameters()",
                    "possible_values": []
                }
            },
            "vector_to_parameters_226": {
                "vec": {
                    "value": "original_params",
                    "possible_values": [
                        [
                            "nn.utils.parameters_to_vector(self.parameters())",
                            "Call"
                        ]
                    ]
                },
                "parameters": {
                    "value": "self.parameters()",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_291": {
                "variable": {
                    "value": "sched",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "T_max": {
                    "value": "total_epochs",
                    "possible_values": [
                        [
                            "args.epochs - args.warmup",
                            "BinOp"
                        ]
                    ]
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_597": {
                "variable": {
                    "value": "classifier_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "output_dict['linear_preds']",
                    "possible_values": [
                        [
                            "layers.get_polyak_prediction(model, pred_fn=functools.partial(model, augmentation1, augmentation2))",
                            "Call"
                        ],
                        [
                            "model(augmentation1, augmentation2)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "classifier_labels",
                    "possible_values": [
                        [
                            "labels if is_eval else torch.cat([labels, labels], 0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "interpolate_651": {
                "input": {
                    "value": "augmentation1[0:num_images_to_post]",
                    "possible_values": []
                },
                "size": {
                    "value": "(image_size_to_post, image_size_to_post)",
                    "possible_values": []
                }
            },
            "interpolate_653": {
                "input": {
                    "value": "augmentation2[0:num_images_to_post]",
                    "possible_values": []
                },
                "size": {
                    "value": "(image_size_to_post, image_size_to_post)",
                    "possible_values": []
                }
            },
            "is_available_703": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_713": {
                "seed": {
                    "value": "args_from_spawn.seed",
                    "possible_values": []
                }
            },
            "Linear_195": {
                "in_features": {
                    "value": "base_network_output_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_latent_size",
                    "possible_values": []
                }
            },
            "BatchNorm1d_196": {
                "num_features": {
                    "value": "args.head_latent_size",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_198": {
                "in_features": {
                    "value": "args.head_latent_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projection_output_size",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "in_features": {
                    "value": "projection_output_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "args.head_latent_size",
                    "possible_values": []
                }
            },
            "BatchNorm1d_202": {
                "num_features": {
                    "value": "args.head_latent_size",
                    "possible_values": []
                }
            },
            "ReLU_203": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_204": {
                "in_features": {
                    "value": "args.head_latent_size",
                    "possible_values": []
                },
                "out_features": {
                    "value": "projection_output_size",
                    "possible_values": []
                }
            },
            "parameters_to_vector_212": {
                "parameters": {
                    "value": "self.parameters()",
                    "possible_values": []
                }
            },
            "cat_250": {
                "tensors": {
                    "value": "[online_representation1, online_representation2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "parameters_to_vector_255": {
                "parameters": {
                    "value": "self.parameters()",
                    "possible_values": []
                }
            },
            "no_grad_476": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_all_715": {
                "seed": {
                    "value": "args_from_spawn.seed",
                    "possible_values": []
                }
            },
            "no_grad_584": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_596": {
                "tensors": {
                    "value": "[labels, labels]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "clip_grad_value__622": {
                "parameters": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "args.clip",
                    "possible_values": []
                }
            },
            "get_device_name_707": {
                "device": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "objective.py": {
        "torch": {
            "mean_25": {
                "input": {
                    "value": "loss_ab + loss_ba",
                    "possible_values": []
                }
            },
            "sum_9": {
                "input": {
                    "value": "x * y",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers/lars.py": {
        "torch": {
            "LARS_8": {
                "base_class_0": {
                    "value": "torch.optim.Optimizer",
                    "possible_values": []
                },
                "self.optim": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "self.eps": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-08",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.trust_coef": {
                    "value": "trust_coef",
                    "possible_values": [
                        [
                            "0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "optimizers/scheduler.py": {
        "torch": {
            "LinearWarmup_45": {
                "base_class_0": {
                    "value": "torch.optim.lr_scheduler.LambdaLR",
                    "possible_values": []
                },
                "self.warmup_steps": {
                    "value": "warmup_steps",
                    "possible_values": []
                }
            }
        }
    }
}