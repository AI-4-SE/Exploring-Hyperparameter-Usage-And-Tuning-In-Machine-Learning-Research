{
    "GraphEmbedding-master/examples/deepwalk_wiki.py": {
        "sklearn": {
            "TSNE_30": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "GraphEmbedding-master/examples/line_wiki.py": {
        "sklearn": {
            "TSNE_30": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "GraphEmbedding-master/examples/node2vec_flight.py": {
        "sklearn": {
            "TSNE_55": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "GraphEmbedding-master/examples/node2vec_wiki.py": {
        "sklearn": {
            "TSNE_30": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "GraphEmbedding-master/examples/sdne_wiki.py": {
        "sklearn": {
            "TSNE_30": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "GraphEmbedding-master/examples/struc2vec_flight.py": {
        "sklearn": {
            "TSNE_55": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LogisticRegression_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "GraphEmbedding-master/ge/classify.py": {
        "sklearn": {
            "MultiLabelBinarizer_28": {
                "variable": {
                    "value": "self.binarizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse_output": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "accuracy_score_44": {
                "variable": {
                    "value": "results[acc]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.binarizer.transform(Y)",
                            "Call"
                        ],
                        [
                            "self.binarizer.transform(Y)",
                            "Call"
                        ],
                        [
                            "self.clf.predict(X_, top_k_list=top_k_list)",
                            "Call"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(X, top_k_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_43": {
                "variable": {
                    "value": "results[average]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.binarizer.transform(Y)",
                            "Call"
                        ],
                        [
                            "self.binarizer.transform(Y)",
                            "Call"
                        ],
                        [
                            "self.clf.predict(X_, top_k_list=top_k_list)",
                            "Call"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(X, top_k_list)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "averages",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "GraphGAN-master/src/evaluation/link_prediction.py": {
        "sklearn": {
            "accuracy_score_36": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(test_label.shape)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "test_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(score_res)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "HARP/src/scoring.py": {
        "sklearn": {
            "MultiLabelBinarizer_52": {
                "variable": {
                    "value": "mlb",
                    "type": "variable",
                    "possible_values": []
                },
                "classes": {
                    "value": "range(labels_count)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "f1_score_100": {
                "variable": {
                    "value": "results[average]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "mlb.fit_transform(y_test)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "mlb.fit_transform(preds)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "averages",
                            "variable"
                        ]
                    ]
                }
            },
            "LogisticRegression_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "SeedNE/seedne_new.py": {
        "sklearn": {
            "MultiLabelBinarizer_36": {
                "variable": {
                    "value": "self.binarizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse_output": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "f1_score_52": {
                "variable": {
                    "value": "results[average]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "read_node_label('./data/cora/cora_labels.txt')",
                            "Call"
                        ],
                        [
                            "self.binarizer.transform(Y)",
                            "Call"
                        ],
                        [
                            "self.binarizer.transform(Y)",
                            "Call"
                        ],
                        [
                            "self.clf.predict(X_, top_k_list=top_k_list)",
                            "Call"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ],
                        [
                            "Y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(X, top_k_list)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "averages",
                            "variable"
                        ]
                    ]
                }
            },
            "LogisticRegression_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Session_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "GraphEmbedding-master/ge/models/line.py": {
        "tensorflow": {
            "Input_39": {
                "variable": {
                    "value": "v_i",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_40": {
                "variable": {
                    "value": "v_j",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Embedding_42": {
                "variable": {
                    "value": "first_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "numNodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.node_size",
                            "Attribute"
                        ],
                        [
                            "numNodes",
                            "Method Argument"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "first_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_43": {
                "variable": {
                    "value": "second_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "numNodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.node_size",
                            "Attribute"
                        ],
                        [
                            "numNodes",
                            "Method Argument"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "second_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_44": {
                "variable": {
                    "value": "context_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "numNodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.node_size",
                            "Attribute"
                        ],
                        [
                            "numNodes",
                            "Method Argument"
                        ]
                    ]
                },
                "output_dim": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Method Argument"
                        ],
                        [
                            "8",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "context_emb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_64": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[v_i, v_j]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "output_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[first]",
                            "List"
                        ],
                        [
                            "[second]",
                            "List"
                        ],
                        [
                            "[first, second]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_34": {
                "a": {
                    "value": "K.log(K.sigmoid(y_true * y_pred))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Lambda_52": {
                "function": {
                    "value": "lambda x: tf.reduce_sum(x[0] * x[1], axis=-1, keep_dims=False)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "first_order",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_54": {
                "function": {
                    "value": "lambda x: tf.reduce_sum(x[0] * x[1], axis=-1, keep_dims=False)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "name": {
                    "value": "second_order",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_34": {
                "x": {
                    "value": "K.sigmoid(y_true * y_pred)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "x": {
                    "value": "y_true * y_pred",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "input_tensor": {
                    "value": "x[0] * x[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_54": {
                "input_tensor": {
                    "value": "x[0] * x[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "GraphEmbedding-master/ge/models/sdne.py": {
        "tensorflow": {
            "Input_56": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(node_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_57": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_72": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[A, L]",
                    "type": "List",
                    "possible_values": []
                },
                "outputs": {
                    "value": "[A_, Y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_73": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input(shape=(node_size,))",
                            "Call"
                        ],
                        [
                            "sp.csr_matrix((A_data, (A_row_index, A_col_index)), shape=(node_size, node_size))",
                            "Call"
                        ]
                    ]
                },
                "outputs": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "variable"
                        ],
                        [
                            "fc",
                            "variable"
                        ]
                    ]
                }
            },
            "square_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(y_true - y_pred) * b_",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_39": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.square((y_true - y_pred) * b_)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_49": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "K.shape(L)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_40": {
                "a": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K.sum(x, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dense_71": {
                "units": {
                    "value": "node_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "graph.number_of_nodes()",
                            "Call"
                        ],
                        [
                            "node_size",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "2nd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "History_115": {
                "variable": {
                    "value": "hist",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_68": {
                "units": {
                    "value": "hidden_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l1_l2(l1, l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_49": {
                "input": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "variable"
                        ],
                        [
                            "Input(shape=(None,))",
                            "Call"
                        ],
                        [
                            "D - A_",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trace_50": {
                "*args": {
                    "value": "tf.matmul(tf.matmul(Y, L, transpose_a=True), Y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_61": {
                "units": {
                    "value": "hidden_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l1_l2(l1, l2)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "1st",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_64": {
                "units": {
                    "value": "hidden_size[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_regularizer": {
                    "value": "l1_l2(l1, l2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "a": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_pred",
                            "variable"
                        ],
                        [
                            "fc",
                            "variable"
                        ]
                    ]
                },
                "b": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "variable"
                        ],
                        [
                            "Input(shape=(None,))",
                            "Call"
                        ],
                        [
                            "D - A_",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "l1_l2_69": {
                "l1": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "l2": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l1_l2_62": {
                "l1": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "l2": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l1_l2_65": {
                "l1": {
                    "value": "l1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "l2": {
                    "value": "l2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0001",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "SeedNE/model_new.py": {
        "tensorflow": {
            "placeholder_7": {
                "variable": {
                    "value": "self.u_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "u_i",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * (walk_length * K + walk_length * window_size * 2 - window_size * window_size - window_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_11": {
                "variable": {
                    "value": "self.u_j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "u_j",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * (walk_length * K + walk_length * window_size * 2 - window_size * window_size - window_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_15": {
                "variable": {
                    "value": "self.label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "label",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size * (walk_length * K + walk_length * window_size * 2 - window_size * window_size - window_size)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "target_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_of_nodes, embedding_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(minval=0.0, maxval=1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "a",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_23": {
                "variable": {
                    "value": "self.u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_24": {
                "variable": {
                    "value": "self.one",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cond_33": {
                "variable": {
                    "value": "self.lu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(self.lu_, self.one)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f1",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f2",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_35": {
                "variable": {
                    "value": "self.u_i_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.one_hot(self.u_i, depth=num_of_nodes)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "self.u_j_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.one_hot(self.u_j, depth=num_of_nodes)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "self.loss_j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.log_sigmoid(self.inner_product * self.label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_48": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_23": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_33": {
                "x": {
                    "value": "self.lu_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.one",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_35": {
                "indices": {
                    "value": "self.u_i",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_of_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_of_nodes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "one_hot_37": {
                "indices": {
                    "value": "self.u_j",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_of_nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_of_nodes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_39": {
                "input_tensor": {
                    "value": "self.u_i_embedding * self.u_j_embedding",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_sigmoid_41": {
                "x": {
                    "value": "self.inner_product * self.label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_19": {
                "minval": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "SeedNE/utils_new.py": {
        "tensorflow": {}
    }
}