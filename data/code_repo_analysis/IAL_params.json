{
    "models/GenericNeuralNet.py": {
        "sklearn": {},
        "tensorflow": {
            "ConfigProto_79": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_80": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_117": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_118": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.initial_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "variable": {
                    "value": "self.learning_rate_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_125": {
                "variable": {
                    "value": "self.update_learning_rate_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.learning_rate_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_141": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_147": {
                "variable": {
                    "value": "self.grad_total_loss_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_151": {
                "variable": {
                    "value": "self.grad_loss_no_reg_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss_no_reg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_158": {
                "variable": {
                    "value": "self.grad_loss_wrt_input_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.input_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_160": {
                "variable": {
                    "value": "self.influence_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.reduce_sum(tf.multiply(a, array_ops.stop_gradient(b))) for (a, b) in zip(self.grad_total_loss_op, self.v_placeholder)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "gradients_163": {
                "variable": {
                    "value": "self.grad_influence_wrt_input_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.influence_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.input_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_171": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_309": {
                "variable": {
                    "value": "all_variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_327": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_334": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_340": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_358": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.run([self.train_op, self.total_loss, self.loss_no_reg, self.indiv_loss_no_reg, self.logits, self.preds], feed_dict=feed_dict)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_363": {
                "variable": {
                    "value": "loss_no_reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.reduce_sum(labels * tf.log(prob + 1e-15) + (1 - labels) * tf.log(1 - prob + 1e-15), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "name": {
                    "value": "xentropy_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_n_366": {
                "variable": {
                    "value": "total_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_41": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_312": {
                "variable": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_variables",
                            "variable"
                        ],
                        [
                            "tf.cast(variable, tf.float32)",
                            "Call"
                        ],
                        [
                            "all_variables",
                            "variable"
                        ],
                        [
                            "tf.cast(variable, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_321": {
                "variable": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_variables",
                            "variable"
                        ],
                        [
                            "tf.cast(variable, tf.float32)",
                            "Call"
                        ],
                        [
                            "all_variables",
                            "variable"
                        ],
                        [
                            "tf.cast(variable, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "auc_355": {
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "predictions": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predictions",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_to_collection_364": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "loss_no_reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(cross_entropy, name='xentropy_mean')",
                            "Call"
                        ],
                        [
                            "sess.run([self.train_op, self.total_loss, self.loss_no_reg, self.indiv_loss_no_reg, self.logits, self.preds], feed_dict=feed_dict)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_155": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "a.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_314": {
                "input_tensor": {
                    "value": "l2_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_323": {
                "input_tensor": {
                    "value": "l2_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_sum_359": {
                "input_tensor": {
                    "value": "labels * tf.log(prob + 1e-15) + (1 - labels) * tf.log(1 - prob + 1e-15)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_366": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "local_variables_initializer_927": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_148": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_152": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_160": {
                "input_tensor": {
                    "value": "tf.multiply(a, array_ops.stop_gradient(b))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_313": {
                "t": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_variables",
                            "variable"
                        ],
                        [
                            "tf.cast(variable, tf.float32)",
                            "Call"
                        ],
                        [
                            "all_variables",
                            "variable"
                        ],
                        [
                            "tf.cast(variable, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_322": {
                "t": {
                    "value": "variable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "all_variables",
                            "variable"
                        ],
                        [
                            "tf.cast(variable, tf.float32)",
                            "Call"
                        ],
                        [
                            "all_variables",
                            "variable"
                        ],
                        [
                            "tf.cast(variable, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_160": {
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "array_ops.stop_gradient(b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_160": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ret_temp",
                            "variable"
                        ],
                        [
                            "b in enumerate(ret_temp)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_359": {
                "x": {
                    "value": "1 - prob + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/metric.py": {
        "sklearn": {
            "roc_curve_16": {
                "variable": {
                    "value": "(fpr, tpr, th)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_score": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ],
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "auc_17": {
                "variable": {
                    "value": "_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(y, p)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roc_curve(y, p)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/model.py": {
        "sklearn": {},
        "tensorflow": {
            "placeholder_145": {
                "variable": {
                    "value": "input_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.steps, self.num_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_149": {
                "variable": {
                    "value": "labels_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "np_alpha_input_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.steps, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha_annotation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_157": {
                "variable": {
                    "value": "np_beta_input_placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.steps, self.num_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta_annotation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_169": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "placeholder_224": {
                "variable": {
                    "value": "self.input_keep_probs_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_225": {
                "variable": {
                    "value": "self.output_keep_probs_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_226": {
                "variable": {
                    "value": "self.state_keep_probs_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_241": {
                "variable": {
                    "value": "alpha_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[single_cell() for _ in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_242": {
                "variable": {
                    "value": "beta_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[single_cell() for _ in range(self.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_258": {
                "variable": {
                    "value": "self.embedded_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(v_emb, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.steps, self.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_260": {
                "variable": {
                    "value": "reversed_v_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.embedded_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_285": {
                "variable": {
                    "value": "self.rev_alpha_embed_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "alpha_embed_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.np_attention_op('alpha', alpha_rnn_outputs, self.hidden_units, self.embed_size, self.steps, alpha_context_vector, is_train)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_297": {
                "variable": {
                    "value": "self.rev_beta_embed_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta_embed_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.np_attention_op('beta', beta_rnn_outputs, self.hidden_units, self.embed_size, self.steps, beta_context_vector, is_train)",
                            "Call"
                        ],
                        [
                            "beta_embed_output",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_300": {
                "variable": {
                    "value": "c_i",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.rev_alpha_embed_output * (self.rev_beta_embed_output * self.embedded_v)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_306": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(c_i, self.mu_weight) + self.mu_bias",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "preds",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_316": {
                "variable": {
                    "value": "masked_attention_outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(masked_attention_outputs, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.steps, self.hidden_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_190": {
                "variable": {
                    "value": "context_vector",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(context_vector, [tf.shape(rnn_outputs)[0], 1, 1])",
                            "Call"
                        ],
                        [
                            "context_vector",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[tf.shape(rnn_outputs)[0], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_192": {
                "variable": {
                    "value": "out_anno_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[rnn_outputs, context_vector]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_193": {
                "variable": {
                    "value": "concat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(initial_shape, stddev=0.01)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_194": {
                "variable": {
                    "value": "concat_b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[p_att_shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "concat_w",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "concat_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal(initial_shape, stddev=0.01), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.reshape(concat_w, p_att_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "p_att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.alpha_np_shape, 1]",
                            "List"
                        ],
                        [
                            "[self.np_shape, embed_size]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_202": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(output_concat, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, steps, p_att_shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_205": {
                "variable": {
                    "value": "squashed_att",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(output_concat, 1), [-1, steps, p_att_shape[1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTMCell_231": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "self.hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_245": {
                "variable": {
                    "value": "self.W_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_features * self.embed_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_246": {
                "variable": {
                    "value": "self.W_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.W_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.num_features, self.embed_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_247": {
                "variable": {
                    "value": "self.W_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_250": {
                "variable": {
                    "value": "self.mu_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.embed_size * 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_251": {
                "variable": {
                    "value": "self.mu_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.mu_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.embed_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_252": {
                "variable": {
                    "value": "self.mu_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dynamic_rnn_264": {
                "variable": {
                    "value": "(alpha_rnn_outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "alpha_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell([single_cell() for _ in range(self.num_layers)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "reversed_v_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reverse(self.embedded_v, [1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dynamic_rnn_270": {
                "variable": {
                    "value": "(beta_rnn_outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "beta_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell([single_cell() for _ in range(self.num_layers)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "reversed_v_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reverse(self.embedded_v, [1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_default_graph_63": {
                "variable": {
                    "value": "temp_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_67": {
                "variable": {
                    "value": "temp_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_178": {
                "name_or_scope": {
                    "value": "str_id + '_'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "str_id + '_concat'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_208": {
                "variable": {
                    "value": "squashed_att",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.concat(output_concat, 1), [-1, steps, p_att_shape[1]])",
                            "Call"
                        ]
                    ]
                }
            },
            "DropoutWrapper_232": {
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(self.hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "variational_recurrent": {
                    "value": "self.variational_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_keep_prob": {
                    "value": "input_keep_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_keep_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "output_keep_prob": {
                    "value": "output_keep_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_keep_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "state_keep_prob": {
                    "value": "state_keep_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state_keep_probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "Embedding",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_249": {
                "name_or_scope": {
                    "value": "output_weights",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_258": {
                "values": {
                    "value": "v_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_263": {
                "name_or_scope": {
                    "value": "alphaRnn",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_269": {
                "name_or_scope": {
                    "value": "betaRnn",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_302": {
                "a": {
                    "value": "c_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(self.rev_alpha_embed_output * (self.rev_beta_embed_output * self.embedded_v), 1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.mu_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_316": {
                "values": {
                    "value": "masked_attention_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.concat(masked_attention_outputs, 1), [-1, self.steps, self.hidden_units])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_108": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_202": {
                "values": {
                    "value": "output_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_256": {
                "a": {
                    "value": "input_x[:, _j, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "self.W_emb",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_194": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_200": {
                "a": {
                    "value": "out_anno_concat[:, _i, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "concat_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal(initial_shape, stddev=0.01), name='weights')",
                            "Call"
                        ],
                        [
                            "tf.reshape(concat_w, p_att_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_247": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_252": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_190": {
                "input": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_outputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "evaluation_after_retrain.py": {
        "tensorflow": {}
    },
    "models/hessians.py": {
        "tensorflow": {
            "gradients_43": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_AsList(xs)",
                            "Call"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_52": {
                "variable": {
                    "value": "grads_with_none",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "elemwise_products",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[math_ops.multiply(grad_elem, array_ops.stop_gradient(v_elem)) for (grad_elem, v_elem) in zip(grads, v) if grad_elem is not None]",
                            "ListComp"
                        ]
                    ]
                },
                "xs": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_AsList(xs)",
                            "Call"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ],
                        [
                            "xs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_49": {
                "x": {
                    "value": "grad_elem",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "array_ops.stop_gradient(v_elem)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unpack_113": {
                "variable": {
                    "value": "_gradients",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_49": {
                "input": {
                    "value": "v_elem",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_107": {
                "name": {
                    "value": "name + '_first_derivative'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_114": {
                "name": {
                    "value": "name + '_second_derivative'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_110": {
                "ys": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys",
                            "Method Argument"
                        ],
                        [
                            "ys",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pack_118": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'hessians'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gradients_116": {
                "ys": {
                    "value": "_gradient",
                    "type": "variable",
                    "possible_values": []
                },
                "xs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x in enumerate(xs)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/np.py": {
        "tensorflow": {
            "softplus_23": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(summary_r, sigma_weight) + sigma_bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shuffle_27": {
                "variable": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.shuffle(inp)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LSTMCell_32": {
                "variable": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_units",
                            "Method Argument"
                        ],
                        [
                            "hidden_units",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DropoutWrapper_33": {
                "cell": {
                    "value": "lstm_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.LSTMCell(hidden_units)",
                            "Call"
                        ]
                    ]
                },
                "input_keep_prob": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "state_keep_prob": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_42": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[self.np_single_cell(hiden_units) for _ in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dynamic_rnn_43": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.MultiRNNCell([self.np_single_cell(hiden_units) for _ in range(num_layers)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.shuffle(inp)",
                            "Call"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ],
                        [
                            "inp",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "mu_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "initial_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._hidden_units * 1]",
                            "List"
                        ],
                        [
                            "[self._hidden_units * self._embed_size]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "sigma_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sigma_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "initial_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._hidden_units * 1]",
                            "List"
                        ],
                        [
                            "[self._hidden_units * self._embed_size]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "mu_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mu_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('mu_weights', shape=initial_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mu_weight, p_att_shape)",
                            "Call"
                        ],
                        [
                            "mu_weight",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "p_att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._hidden_units, 1]",
                            "List"
                        ],
                        [
                            "[self._hidden_units, self._embed_size]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_76": {
                "variable": {
                    "value": "sigma_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "sigma_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sigma_weights', shape=initial_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sigma_weight, p_att_shape)",
                            "Call"
                        ],
                        [
                            "sigma_weight",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "p_att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._hidden_units, 1]",
                            "List"
                        ],
                        [
                            "[self._hidden_units, self._embed_size]",
                            "List"
                        ]
                    ]
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "mu_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mu_biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[p_att_shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_79": {
                "variable": {
                    "value": "sigma_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "sigma_biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[p_att_shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "v_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.concat(v_emb, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self._steps, p_att_shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "variable": {
                    "value": "summary_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "r_i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.recurrent_model(v_emb, self._hidden_units, self._num_layers, str_id)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_22": {
                "a": {
                    "value": "summary_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_mean(r_i, axis=0)",
                            "Call"
                        ],
                        [
                            "summary_r",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "mu_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('mu_weights', shape=initial_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(mu_weight, p_att_shape)",
                            "Call"
                        ],
                        [
                            "mu_weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Normal_24": {
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(summary_r, mu_weight) + mu_bias",
                            "BinOp"
                        ],
                        [
                            "self.reparameterize(summary_r, mu_weight, mu_bias, sigma_weight, sigma_bias)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softplus(tf.matmul(summary_r, sigma_weight) + sigma_bias)",
                            "Call"
                        ],
                        [
                            "self.reparameterize(summary_r, mu_weight, mu_bias, sigma_weight, sigma_bias)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "str_id + '_NP_Rnn'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_62": {
                "name_or_scope": {
                    "value": "str_id + '_'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_65": {
                "variable": {
                    "value": "v_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "v_initial_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1 * 1]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "v_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=v_initial_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_weight, v_p_att_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=initial_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_weight, p_att_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "v_p_att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "subsamples[:, j_, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "v_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=v_initial_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_weight, v_p_att_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=initial_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_weight, p_att_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_23": {
                "a": {
                    "value": "summary_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.reduce_mean(r_i, axis=0)",
                            "Call"
                        ],
                        [
                            "summary_r",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "sigma_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('sigma_weights', shape=initial_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(sigma_weight, p_att_shape)",
                            "Call"
                        ],
                        [
                            "sigma_weight",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_68": {
                "variable": {
                    "value": "v_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "initial_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._hidden_units * 1]",
                            "List"
                        ],
                        [
                            "[self._hidden_units * self._embed_size]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_69": {
                "variable": {
                    "value": "v_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', shape=v_initial_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_weight, v_p_att_shape)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('weights', shape=initial_shape, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_weight, p_att_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "p_att_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self._hidden_units, 1]",
                            "List"
                        ],
                        [
                            "[self._hidden_units, self._embed_size]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_87": {
                "values": {
                    "value": "v_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.reshape(tf.concat(v_emb, 1), [-1, self._steps, p_att_shape[1]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "retrain.py": {
        "tensorflow": {}
    },
    "retrain_eval.py": {
        "tensorflow": {}
    },
    "train.py": {
        "tensorflow": {}
    }
}