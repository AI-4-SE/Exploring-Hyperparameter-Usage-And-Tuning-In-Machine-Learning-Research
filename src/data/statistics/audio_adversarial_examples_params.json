{
    "attack.py": {
        "tensorflow": {
            "Variable_83": {
                "variable": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, max_audio_len), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, max_audio_len), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_85": {
                "variable": {
                    "value": "self.cwmask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, phrase_length), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_cwmask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_86": {
                "variable": {
                    "value": "self.original",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, max_audio_len), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_original",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_87": {
                "variable": {
                    "value": "self.lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size, dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_lengths",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_88": {
                "variable": {
                    "value": "self.importance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, phrase_length), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_importance",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "self.target_phrase",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, phrase_length), dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_phrase",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "self.target_phrase_lengths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros(batch_size, dtype=np.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_phrase_lengths",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_91": {
                "variable": {
                    "value": "self.rescale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((batch_size, 1), dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "qq_phrase_lengths",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_106": {
                "variable": {
                    "value": "pass_in",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "new_input + noise",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-2 ** 15",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "2 ** 15 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Saver_113": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[x for x in tf.global_variables() if 'qq' not in x.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_143": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_148": {
                "variable": {
                    "value": "end_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_154": {
                "variable": {
                    "value": "self.probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.nn.softmax(self.logits, name='logits')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ctc_loss_121": {
                "variable": {
                    "value": "ctcloss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "tf.cast(target, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(logits, axis=2).T",
                            "Attribute"
                        ]
                    ]
                },
                "sequence_length": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_131": {
                "variable": {
                    "value": "self.expanded_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_298": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_value_95": {
                "t": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-2000",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "2000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variables_initializer_151": {
                "var_list": {
                    "value": "new_vars + [delta]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_154": {
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variables_initializer_170": {
                "var_list": {
                    "value": "[self.delta]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_121": {
                "x": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctc_label_dense_to_sparse(self.target_phrase, self.target_phrase_lengths)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "input_tensor": {
                    "value": "(self.new_input - self.original) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "global_variables_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_146": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "classify.py": {
        "tensorflow": {
            "placeholder_49": {
                "variable": {
                    "value": "new_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Saver_56": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_60": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_logits(new_input, lengths)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='logits')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_52": {
                "name_or_scope": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mfcc.py": {
        "tensorflow": {
            "sqrt_151": {
                "variable": {
                    "value": "spec_val",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spectrogram",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "multiply_152": {
                "variable": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "spec_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.sqrt(spectrogram)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((input_length,))",
                            "Call"
                        ],
                        [
                            "np.stack([np.stack([weights] * batch_size, axis=0)] * spectrogram.shape[1], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_156": {
                "variable": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.multiply(spec_val, weights)",
                            "Call"
                        ],
                        [
                            "tf.transpose(weighted, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_157": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_val - weighted",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(res, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_202": {
                "variable": {
                    "value": "cosines",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "np.stack([cosines] * batch_size, axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_234": {
                "variable": {
                    "value": "log_mel_energies",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "compute_mfcc_mel_filterbank(spectrogram, sample_rate, lower_edge_hertz, upper_edge_hertz, filterbank_channel_count)",
                            "Call"
                        ],
                        [
                            "vals * tf.cast(vals > 0, dtype) + kFilterbankFloor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_209": {
                "a": {
                    "value": "tf.matmul(cosines[:, :input_length, :], log_mel_energies)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_160": {
                "a": {
                    "value": "tf.cast(mapping_matrix_r, dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "spec_val - weighted",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(res, perm=[0, 2, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_209": {
                "a": {
                    "value": "cosines[:, :input_length, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "log_mel_energies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.log(vals)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_160": {
                "x": {
                    "value": "mapping_matrix_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((filterbank_channel_count, input_length))",
                            "Call"
                        ],
                        [
                            "np.stack([mapping_matrix_r] * batch_size, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_233": {
                "x": {
                    "value": "vals > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tf_logits.py": {
        "tensorflow": {
            "cast_26": {
                "variable": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "audio / 2 ** 15",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stft_28": {
                "variable": {
                    "value": "stfts",
                    "type": "variable",
                    "possible_values": []
                },
                "signals": {
                    "value": "audio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(audio / 2 ** 15, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "frame_length": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "frame_step": {
                    "value": "320",
                    "type": "int",
                    "possible_values": []
                },
                "fft_length": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "window_fn": {
                    "value": "periodic_hann_window",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_35": {
                "variable": {
                    "value": "spectrogram",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.abs(stfts)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_35": {
                "x": {
                    "value": "stfts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.stft(audio, frame_length=512, frame_step=320, fft_length=512, window_fn=periodic_hann_window)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_17": {
                "x": {
                    "value": "2.0 * np.pi * tf.range(tf.to_float(window_length), dtype=dtype) / tf.to_float(window_length)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_17": {
                "x": {
                    "value": "window_length",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "range_17": {
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}