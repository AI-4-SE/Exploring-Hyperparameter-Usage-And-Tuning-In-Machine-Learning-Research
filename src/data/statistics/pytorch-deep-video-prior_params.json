{
    "main_IRT.py": {
        "torch": {
            "device_53": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if ARGS.use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "MSELoss_77": {
                "variable": {
                    "value": "loss_L2",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_78": {
                "variable": {
                    "value": "loss_L1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "manual_seed_32": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2020",
                            "int"
                        ]
                    ]
                }
            },
            "sum_73": {
                "variable": {
                    "value": "content_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(content_loss_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_58": {
                "input": {
                    "value": "torch.abs(fake - real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "variable": {
                    "value": "net_in",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "net_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(net_in).permute(0, 3, 1, 2).float().to(device)",
                            "Call"
                        ],
                        [
                            "net_in.permute(0, 2, 3, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "net_in.permute(0, 2, 3, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.float32(scipy.misc.imread(input_names[id])) / 255.0",
                            "BinOp"
                        ],
                        [
                            "np.tile(net_in[:, :, np.newaxis], [1, 1, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "permute_139": {
                "variable": {
                    "value": "net_in",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_140": {
                "variable": {
                    "value": "net_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "net_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(net_gt).permute(0, 3, 1, 2).float().to(device)",
                            "Call"
                        ],
                        [
                            "net_gt.permute(0, 2, 3, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "net_gt.permute(0, 2, 3, 1).cpu().numpy()",
                            "Call"
                        ],
                        [
                            "np.float32(scipy.misc.imread(processed_names[id])) / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "permute_140": {
                "variable": {
                    "value": "net_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_58": {
                "input": {
                    "value": "fake - real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_73": {
                "tensors": {
                    "value": "content_loss_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "max_173": {
                "variable": {
                    "value": "(diff_map_main, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(prediction_main - net_gt) / (net_in + 0.1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_174": {
                "variable": {
                    "value": "(diff_map_minor, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(prediction_minor - net_gt) / (net_in + 0.1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "lt_175": {
                "variable": {
                    "value": "confidence_map",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff_map_main",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.amax(np.absolute(prediction_main - net_gt) / (net_in + 0.1), axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "diff_map_minor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.amax(np.absolute(prediction_minor - net_gt) / (net_in + 0.1), axis=3, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_173": {
                "input": {
                    "value": "prediction_main - net_gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_174": {
                "input": {
                    "value": "prediction_minor - net_gt",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "models/network.py": {
        "torch": {
            "MaxPool2d_15": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_17": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_19": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_21": {
                "variable": {
                    "value": "self.pool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.upconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.upconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.upconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.upconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_features",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "dec4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec4, enc4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "dec3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec3, enc3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "dec2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec2, enc2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "dec1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(dec1, enc1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "OrderedDict([(name + 'conv1', nn.Conv2d(in_channels=in_channels, out_channels=features, kernel_size=3, padding=1, bias=False)), (name + 'relu1', nn.ReLU(inplace=True)), (name + 'conv2', nn.Conv2d(in_channels=features, out_channels=features, kernel_size=3, padding=1, bias=False)), (name + 'relu2', nn.ReLU(inplace=True))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_26": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "features * 16",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_31": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "features * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_37": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "features * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_43": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_features",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_features",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_92": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_features",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "init_features",
                            "variable"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "vgg.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}