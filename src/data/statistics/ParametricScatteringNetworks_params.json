{
    "kymatio/frontend/sklearn_frontend.py": {
        "sklearn": {}
    },
    "parametricSN/training/cross_entropy_training.py": {
        "sklearn": {},
        "torch": {
            "cross_entropy_44": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_53": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_23": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/backend/tensorflow_backend.py": {
        "tensorflow": {
            "abs_31": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "real_48": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_52": {
                "values": {
                    "value": "arrays",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_32": {
                "x": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/frontend/keras_frontend.py": {
        "tensorflow": {}
    },
    "kymatio/frontend/tensorflow_frontend.py": {
        "tensorflow": {}
    },
    "kymatio/scattering1d/backend/tensorflow_backend.py": {
        "tensorflow": {
            "reshape_34": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, k, N // k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_36": {
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (-1, k, N // k))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cast_70": {
                "x": {
                    "value": "tf.pad(x, paddings, mode='REFLECT')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_70": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0]] * len(x.shape[:-1])",
                            "BinOp"
                        ],
                        [
                            "paddings + [[pad_left, pad_right]]",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fft_126": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fft1d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ifft_127": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ifft1d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "real_128": {
                "input": {
                    "value": "tf.signal.ifft(x, name='irfft1d')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ifft_128": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "irfft1d",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/scattering1d/frontend/keras_frontend.py": {
        "tensorflow": {
            "TensorShape_23": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape).as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_28": {
                "dims": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input_shape[0], nc, ln]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorShape_16": {
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape).as_list()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kymatio/scattering1d/frontend/tensorflow_frontend.py": {
        "tensorflow": {
            "reshape_48": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.concat(((-1, 1), signal_shape), 0))",
                            "Call"
                        ],
                        [
                            "S",
                            "Name"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(((-1, 1), signal_shape), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_shape, scattering_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scattering1d(x, self.backend.pad, self.backend.unpad, self.backend, self.J, self.psi1_f, self.psi2_f, self.phi_f, max_order=self.max_order, average=self.average, pad_left=self.pad_left, pad_right=self.pad_right, ind_start=self.ind_start, ind_end=self.ind_end, oversampling=self.oversampling, vectorize=self.vectorize, size_scattering=size_scattering, out_type=self.out_type)",
                            "Call"
                        ],
                        [
                            "tf.reshape(S, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((batch_shape, scattering_shape), 0)",
                            "Call"
                        ],
                        [
                            "tf.concat((batch_shape, scattering_shape), 0)",
                            "Call"
                        ],
                        [
                            "tf.concat((batch_shape, scattering_shape), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_45": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.concat(((-1, 1), signal_shape), 0))",
                            "Call"
                        ],
                        [
                            "S",
                            "Name"
                        ]
                    ]
                }
            },
            "shape_46": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, tf.concat(((-1, 1), signal_shape), 0))",
                            "Call"
                        ],
                        [
                            "S",
                            "Name"
                        ]
                    ]
                }
            },
            "concat_48": {
                "values": {
                    "value": "((-1, 1), signal_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_67": {
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scattering1d(x, self.backend.pad, self.backend.unpad, self.backend, self.J, self.psi1_f, self.psi2_f, self.phi_f, max_order=self.max_order, average=self.average, pad_left=self.pad_left, pad_right=self.pad_right, ind_start=self.ind_start, ind_end=self.ind_end, oversampling=self.oversampling, vectorize=self.vectorize, size_scattering=size_scattering, out_type=self.out_type)",
                            "Call"
                        ],
                        [
                            "tf.reshape(S, new_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_76": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_shape, scattering_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "S[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((batch_shape, scattering_shape), 0)",
                            "Call"
                        ],
                        [
                            "tf.concat((batch_shape, scattering_shape), 0)",
                            "Call"
                        ],
                        [
                            "tf.concat((batch_shape, scattering_shape), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_82": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_shape, scattering_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "x[coef]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x['coef']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((batch_shape, scattering_shape), 0)",
                            "Call"
                        ],
                        [
                            "tf.concat((batch_shape, scattering_shape), 0)",
                            "Call"
                        ],
                        [
                            "tf.concat((batch_shape, scattering_shape), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_75": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_81": {
                "input": {
                    "value": "x['coef']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/scattering2d/backend/tensorflow_backend.py": {
        "tensorflow": {
            "reshape_72": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, k, x.shape[1] // k, k, x.shape[2] // k)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (-1, k, x.shape[1] // k, k, x.shape[2] // k))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "fft2d_85": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fft2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ifft2d_86": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "ifft2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "real_87": {
                "input": {
                    "value": "tf.signal.ifft2d(x, name='irfft2d')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_35": {
                "x": {
                    "value": "tf.pad(x, paddings, mode='REFLECT')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ifft2d_87": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "irfft2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_35": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "paddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[0, 0]] * len(x.shape[:-2])",
                            "BinOp"
                        ],
                        [
                            "paddings + [[self.pad_size[0], self.pad_size[1]], [self.pad_size[2], self.pad_size[3]]]",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/scattering2d/frontend/keras_frontend.py": {
        "tensorflow": {
            "TensorShape_25": {
                "variable": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape).as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_30": {
                "dims": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[input_shape[0], nc, m0, m1]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorShape_16": {
                "dims": {
                    "value": "input_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_shape.TensorShape(input_shape).as_list()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kymatio/scattering2d/frontend/tensorflow_frontend.py": {
        "tensorflow": {
            "reshape_43": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.concat(((-1,), signal_shape), 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(((-1,), signal_shape), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_17": {
                "name": {
                    "value": "scattering",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_19": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.concat(((-1,), signal_shape), 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_50": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_shape, scattering_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_52": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scattering2d(input, self.pad, self.unpad, self.backend, self.J, self.L, self.phi, self.psi, self.max_order, self.out_type)",
                            "Call"
                        ],
                        [
                            "tf.reshape(S, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((batch_shape, scattering_shape), 0)",
                            "Call"
                        ],
                        [
                            "tf.concat((batch_shape, scattering_shape), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_55": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(batch_shape, scattering_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_38": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.concat(((-1,), signal_shape), 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_39": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(input)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input, tf.concat(((-1,), signal_shape), 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_43": {
                "values": {
                    "value": "((-1,), signal_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "x[coef]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x['coef']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat((batch_shape, scattering_shape), 0)",
                            "Call"
                        ],
                        [
                            "tf.concat((batch_shape, scattering_shape), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_49": {
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scattering2d(input, self.pad, self.unpad, self.backend, self.J, self.L, self.phi, self.psi, self.max_order, self.out_type)",
                            "Call"
                        ],
                        [
                            "tf.reshape(S, new_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_54": {
                "input": {
                    "value": "S[0]['coef']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/scattering3d/backend/tensorflow_backend.py": {
        "tensorflow": {
            "abs_26": {
                "variable": {
                    "value": "modulus",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.complex64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_129": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_165": {
                "variable": {
                    "value": "Cr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.real(A) * np.real(B) - tf.math.imag(A) * np.imag(B)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_166": {
                "variable": {
                    "value": "Ci",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.real(A) * np.imag(B) + tf.math.imag(A) * np.real(B)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_172": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "arrays",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack(arrays, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(S, tuple((S.shape[0], S.shape[1] // (L + 1), L + 1)) + tuple(S.shape[2:]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tuple((S.shape[0], S.shape[1] // (L + 1), L + 1)) + tuple(S.shape[2:])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_52": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_56": {
                "x": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros_like(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "module ** 2",
                            "BinOp"
                        ],
                        [
                            "module + tf.abs(x) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_84": {
                "values": {
                    "value": "integrals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "real_132": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.signal.ifft3d(x, name='irfft3d')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_138": {
                "x": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.real(tf.signal.ifft3d(x, name='irfft3d'))",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft3d(x, name='ifft3d')",
                            "Call"
                        ],
                        [
                            "tf.signal.fft3d(x, name='fft3d')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_55": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.complex64)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_83": {
                "input_tensor": {
                    "value": "tf.reshape(tf.pow(input_array, q), shape=(input_array.shape[0], -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ifft3d_132": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "irfft3d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ifft3d_135": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "ifft3d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "fft3d_137": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "fft3d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "tensor": {
                    "value": "tf.pow(input_array, q)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(input_array.shape[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "real_165": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "imag_165": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "real_166": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "imag_166": {
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pow_83": {
                "x": {
                    "value": "input_array",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/scattering3d/frontend/tensorflow_frontend.py": {
        "tensorflow": {
            "reshape_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat(((-1,), signal_shape), 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat(((-1,), signal_shape), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scattering3d(x, filters=self.filters, rotation_covariant=self.rotation_covariant, L=self.L, J=self.J, max_order=self.max_order, backend=self.backend, averaging=self.averaging)",
                            "Call"
                        ],
                        [
                            "tf.reshape(S, tf.concat((batch_shape, scattering_shape), 0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat((batch_shape, scattering_shape), 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_30": {
                "name": {
                    "value": "scattering",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_32": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat(((-1,), signal_shape), 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_54": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat(((-1,), signal_shape), 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_55": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat(((-1,), signal_shape), 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_57": {
                "values": {
                    "value": "((-1,), signal_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_64": {
                "input": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scattering3d(x, filters=self.filters, rotation_covariant=self.rotation_covariant, L=self.L, J=self.J, max_order=self.max_order, backend=self.backend, averaging=self.averaging)",
                            "Call"
                        ],
                        [
                            "tf.reshape(S, tf.concat((batch_shape, scattering_shape), 0))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_66": {
                "values": {
                    "value": "(batch_shape, scattering_shape)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/cifar/filter_monitoring/ll_1000sample_cifar10_filterMonitoring.py": {
        "torch": {}
    },
    "experiments/cifar/filter_monitoring/ll_100sample_cifar10_filterMonitoring.py": {
        "torch": {}
    },
    "experiments/cifar/filter_monitoring/ll_alldata_cifar10_filterMonitoring copy.py": {
        "torch": {}
    },
    "kymatio/backend/torch_backend.py": {
        "torch": {
            "zeros_like_137": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_226": {
                "tensors": {
                    "value": "arrays",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/backend/torch_skcuda_backend.py": {
        "torch": {
            "current_blas_handle_84": {
                "variable": {
                    "value": "handle",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/frontend/torch_frontend.py": {
        "torch": {}
    },
    "kymatio/scattering1d/backend/torch_backend.py": {
        "torch": {
            "pad_75": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "pad": {
                    "value": "(pad_left, pad_right, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "mode",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'constant'",
                            "MethodArgument"
                        ]
                    ]
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_75": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, torch.zeros_like(output))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "view_as_real_135": {
                "input": {
                    "value": "torch.fft.fft(torch.view_as_complex(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_real_136": {
                "input": {
                    "value": "torch.fft.ifft(torch.view_as_complex(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fft_139": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ifft_140": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "irfft_141": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_110": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_1d(x, pad_left, pad_right, mode='reflect')",
                            "Call"
                        ],
                        [
                            "torch.stack((output, torch.zeros_like(output)), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "fft_135": {
                "input": {
                    "value": "torch.view_as_complex(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ifft_136": {
                "input": {
                    "value": "torch.view_as_complex(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ifft_137": {
                "input": {
                    "value": "torch.view_as_complex(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_complex_135": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "view_as_complex_136": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "view_as_complex_137": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/scattering1d/backend/torch_skcuda_backend.py": {
        "torch": {
            "current_stream_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/scattering1d/frontend/torch_frontend.py": {
        "torch": {
            "from_numpy_33": {
                "variable": {
                    "value": "self.phi_f[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.phi_f[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "variable": {
                    "value": "psi_f[sub_k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "psi_f[sub_k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "psi_f[sub_k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "psi_f[sub_k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/scattering2d/backend/torch_backend.py": {
        "torch": {
            "ReflectionPad2d_56": {
                "variable": {
                    "value": "self.padding_module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "[pad_size_tmp[2], pad_size_tmp[3], pad_size_tmp[0], pad_size_tmp[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, :, 1, :].unsqueeze(2), x, x[:, :, x.shape[2] - 2, :].unsqueeze(2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[:, :, :, 1].unsqueeze(3), x, x[:, :, :, x.shape[3] - 2].unsqueeze(3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "view_as_real_150": {
                "input": {
                    "value": "torch.fft.fft2(torch.view_as_complex(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_real_151": {
                "input": {
                    "value": "torch.fft.ifft2(torch.view_as_complex(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fft_155": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape((-1, 1) + signal_shape)",
                            "Call"
                        ],
                        [
                            "self.padding_module(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, 1, :].unsqueeze(2), x, x[:, :, x.shape[2] - 2, :].unsqueeze(2)], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :, 1].unsqueeze(3), x, x[:, :, :, x.shape[3] - 2].unsqueeze(3)], 3)",
                            "Call"
                        ],
                        [
                            "x.view((-1,) + signal_shape)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ifft_156": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape((-1, 1) + signal_shape)",
                            "Call"
                        ],
                        [
                            "self.padding_module(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, 1, :].unsqueeze(2), x, x[:, :, x.shape[2] - 2, :].unsqueeze(2)], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :, 1].unsqueeze(3), x, x[:, :, :, x.shape[3] - 2].unsqueeze(3)], 3)",
                            "Call"
                        ],
                        [
                            "x.view((-1,) + signal_shape)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "irfft_157": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape((-1, 1) + signal_shape)",
                            "Call"
                        ],
                        [
                            "self.padding_module(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, 1, :].unsqueeze(2), x, x[:, :, x.shape[2] - 2, :].unsqueeze(2)], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :, 1].unsqueeze(3), x, x[:, :, :, x.shape[3] - 2].unsqueeze(3)], 3)",
                            "Call"
                        ],
                        [
                            "x.view((-1,) + signal_shape)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "normalized": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "fft2_150": {
                "input": {
                    "value": "torch.view_as_complex(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ifft2_151": {
                "input": {
                    "value": "torch.view_as_complex(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ifft2_152": {
                "input": {
                    "value": "torch.view_as_complex(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "view_as_complex_150": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape((-1, 1) + signal_shape)",
                            "Call"
                        ],
                        [
                            "self.padding_module(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, 1, :].unsqueeze(2), x, x[:, :, x.shape[2] - 2, :].unsqueeze(2)], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :, 1].unsqueeze(3), x, x[:, :, :, x.shape[3] - 2].unsqueeze(3)], 3)",
                            "Call"
                        ],
                        [
                            "x.view((-1,) + signal_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_151": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape((-1, 1) + signal_shape)",
                            "Call"
                        ],
                        [
                            "self.padding_module(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, 1, :].unsqueeze(2), x, x[:, :, x.shape[2] - 2, :].unsqueeze(2)], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :, 1].unsqueeze(3), x, x[:, :, :, x.shape[3] - 2].unsqueeze(3)], 3)",
                            "Call"
                        ],
                        [
                            "x.view((-1,) + signal_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "view_as_complex_152": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape((-1, 1) + signal_shape)",
                            "Call"
                        ],
                        [
                            "self.padding_module(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, 1, :].unsqueeze(2), x, x[:, :, x.shape[2] - 2, :].unsqueeze(2)], 2)",
                            "Call"
                        ],
                        [
                            "torch.cat([x[:, :, :, 1].unsqueeze(3), x, x[:, :, :, x.shape[3] - 2].unsqueeze(3)], 3)",
                            "Call"
                        ],
                        [
                            "x.view((-1,) + signal_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kymatio/scattering2d/backend/torch_skcuda_backend.py": {
        "torch": {
            "current_stream_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/scattering2d/frontend/torch_frontend.py": {
        "torch": {
            "from_numpy_20": {
                "variable": {
                    "value": "current_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unsqueeze_20": {
                "variable": {
                    "value": "current_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_78": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.reshape((-1,) + signal_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kymatio/scattering3d/backend/torch_backend.py": {
        "torch": {
            "zeros_like_39": {
                "variable": {
                    "value": "modulus",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_array",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_40": {
                "variable": {
                    "value": "modulus[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(input_array ** 2).sum(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "integrals",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(input_array.shape[0], len(integral_powers))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "input_array.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_226": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "arrays",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_63": {
                "variable": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_67": {
                "input": {
                    "value": "module",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "module ** 2",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "view_as_real_128": {
                "input": {
                    "value": "torch.fft.fftn(torch.view_as_complex(input), dim=[-1, -2, -3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fft_158": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "view_as_real_127": {
                "input": {
                    "value": "torch.fft.ifftn(torch.view_as_complex(input), dim=[-1, -2, -3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fftn_128": {
                "input": {
                    "value": "torch.view_as_complex(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[-1, -2, -3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ifft_157": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ifftn_127": {
                "input": {
                    "value": "torch.view_as_complex(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[-1, -2, -3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "view_as_complex_128": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "view_as_complex_127": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/scattering3d/backend/torch_skcuda_backend.py": {
        "torch": {
            "current_blas_handle_73": {
                "variable": {
                    "value": "handle",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_stream_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kymatio/scattering3d/frontend/torch_frontend.py": {
        "torch": {
            "zeros_36": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.gaussian_filters.shape + (2,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "g[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.gaussian_filters.real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.filters[k].shape + (2,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "variable": {
                    "value": "filt[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.filters[k].real",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_31": {
                "variable": {
                    "value": "filt[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.filters[k].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "filt[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.filters[k].imag",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_32": {
                "variable": {
                    "value": "filt[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.filters[k].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_42": {
                "obj": {
                    "value": "input_array",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_array.contiguous()",
                            "Call"
                        ],
                        [
                            "input_array.reshape((-1,) + signal_shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "parametricSN/data_loading/SmallSampleController.py": {
        "torch": {
            "Subset_108": {
                "variable": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "indx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.where(np.array(dataset.targets) == class_)[0][RP[offset:end]] for class_ in range(0, self.numClasses)])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_110": {
                "variable": {
                    "value": "tempLoader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Subset(dataset, indx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "empty_cache_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parametricSN/data_loading/kth_loader.py": {
        "torch": {
            "ConcatDataset_144": {
                "variable": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "datasets_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataLoader_146": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset",
                            "Name"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.ConcatDataset(datasets_val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "self.val_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "parametricSN/evaluate_deformed_representation.py": {
        "torch": {
            "tensor_351": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[x, y] for x in torch.linspace(-1, 1, dim)] for y in torch.linspace(-1, 1, dim)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "grid_sample_356": {
                "variable": {
                    "value": "img_transf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img",
                            "Name"
                        ],
                        [
                            "ToPILImage(img.squeeze(0)).convert('L')",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid_transf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(grid - tau_mat(grid)).unsqueeze(0).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_377": {
                "tensors": {
                    "value": "torch.autograd.functional.jacobian(tau, point)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matrix_norm_379": {
                "variable": {
                    "value": "norm_jac",
                    "type": "variable",
                    "possible_values": []
                },
                "A": {
                    "value": "jac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(list(map(lambda point: torch.stack(torch.autograd.functional.jacobian(tau, point)), points)))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_424": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_425": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "arange_82": {
                "variable": {
                    "value": "deformation_levels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "max_value / num_points",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_84": {
                "variable": {
                    "value": "deformation_levels",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_value",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "max_value / num_points",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_381": {
                "input": {
                    "value": "norm_jac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linalg.matrix_norm(jac, ord=2, dim=(1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_256": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_353": {
                "data": {
                    "value": "[[tau(grid[i, j, :]) for j in range(len(grid))] for i in range(len(grid))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_374": {
                "data": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_374": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                }
            },
            "linspace_351": {
                "start": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.shape[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "dist_231": {
                "input": {
                    "value": "representation_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hybridModel.scatteringBase(img.to(device))",
                            "Call"
                        ],
                        [
                            "representation",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "representation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hybridModel.scatteringBase(img2.to(device))",
                            "Call"
                        ],
                        [
                            "hybridModel.scatteringBase(img.to(device))",
                            "Call"
                        ],
                        [
                            "hybridModel.scatteringBase(img_deformed)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_232": {
                "input": {
                    "value": "representation_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hybridModel.scatteringBase(img.to(device))",
                            "Call"
                        ],
                        [
                            "representation",
                            "Name"
                        ]
                    ]
                }
            },
            "norm_295": {
                "input": {
                    "value": "representation_0 - representation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_296": {
                "input": {
                    "value": "representation_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hybridModel.scatteringBase(img.to(device))",
                            "Call"
                        ],
                        [
                            "representation",
                            "Name"
                        ]
                    ]
                }
            },
            "jacobian_377": {
                "func": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda u: (v.item() * (0.5 * u[0] + 0.3 * u[1] ** 2), v.item() * (0.3 * u[1]))",
                            "Lambda"
                        ]
                    ]
                },
                "inputs": {
                    "value": "point",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parametricSN/main.py": {
        "torch": {
            "device_70": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "viewers.params_history",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('/tmp', '{}_{}.pt'.format(params['scattering']['init_params'], params['mlflow']['experiment_name']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parametricSN/models/create_filters.py": {
        "torch": {
            "tensor_172": {
                "variable": {
                    "value": "xis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.random.uniform(0.5, 1, n_filters)",
                            "Call"
                        ],
                        [
                            "torch.tensor(xis, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(xis, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.log(np.random.uniform(np.exp(1), np.exp(5), n_filters))",
                            "Call"
                        ],
                        [
                            "torch.tensor(sigmas, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(sigmas, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "variable": {
                    "value": "slants",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "slants",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.random.uniform(0.5, 1.5, n_filters)",
                            "Call"
                        ],
                        [
                            "torch.tensor(slants, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(slants, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_175": {
                "variable": {
                    "value": "orientations",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "orientations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.random.uniform(0, 2 * np.pi, n_filters)",
                            "Call"
                        ],
                        [
                            "torch.tensor(orientations, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(orientations, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.cos(theta).unsqueeze(1), torch.sin(theta).unsqueeze(1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_217": {
                "variable": {
                    "value": "xis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.random.uniform(0.5, 1, n_filters)",
                            "Call"
                        ],
                        [
                            "torch.tensor(xis, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(xis, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.log(np.random.uniform(np.exp(1), np.exp(5), n_filters))",
                            "Call"
                        ],
                        [
                            "torch.tensor(sigmas, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(sigmas, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "variable": {
                    "value": "slants",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "slants",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.random.uniform(0.5, 1.5, n_filters)",
                            "Call"
                        ],
                        [
                            "torch.tensor(slants, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(slants, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_220": {
                "variable": {
                    "value": "orientations",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "orientations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.random.uniform(0, 2 * np.pi, n_filters)",
                            "Call"
                        ],
                        [
                            "torch.tensor(orientations, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(orientations, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.cos(theta).unsqueeze(1), torch.sin(theta).unsqueeze(1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_255": {
                "variable": {
                    "value": "waves",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1j * torch.matmul(grid.T, wave_vectors.T).T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_258": {
                "variable": {
                    "value": "radii",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gaussian_directions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(grid.T, gaussian_bases.T.reshape(n_dim, n_dim * n_filters)).T",
                            "Attribute"
                        ],
                        [
                            "gaussian_directions.reshape((n_dim, n_filters) + shape)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_259": {
                "variable": {
                    "value": "gaussians",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-0.5 * radii ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_294": {
                "variable": {
                    "value": "orientations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.cos(theta).unsqueeze(1), torch.sin(theta).unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "svd_297": {
                "variable": {
                    "value": "(_, _, gauss_directions)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "orientations[:, np.newaxis]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_250": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid(*ranges)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ifftshift_271": {
                "variable": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "morlets",
                            "Name"
                        ],
                        [
                            "gabors",
                            "Name"
                        ],
                        [
                            "torch.fft.ifftshift(filters, dim=signal_dims)",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(filters, dim=signal_dims)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "signal_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, n_dim + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftn_273": {
                "variable": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "morlets",
                            "Name"
                        ],
                        [
                            "gabors",
                            "Name"
                        ],
                        [
                            "torch.fft.ifftshift(filters, dim=signal_dims)",
                            "Call"
                        ],
                        [
                            "torch.fft.fftn(filters, dim=signal_dims)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "signal_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(range(1, n_dim + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_256": {
                "input": {
                    "value": "grid.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "gaussian_bases.T.reshape(n_dim, n_dim * n_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_299": {
                "start": {
                    "value": "ndim",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "slants.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_249": {
                "start": {
                    "value": "-(s // 2)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-(s // 2) + s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_250": {
                "*tensors": {
                    "value": "*ranges",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cos_294": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(L)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_294": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_294": {
                "input": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(L)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_109": {
                "variable": {
                    "value": "wavelets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(wavelets, wavelet)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_255": {
                "input": {
                    "value": "grid.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "wave_vectors.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "parametricSN/models/sn_base_models.py": {
        "torch": {
            "stack_119": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid(*ranges)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_118": {
                "start": {
                    "value": "-(s // 2)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-(s // 2) + s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_119": {
                "*tensors": {
                    "value": "*ranges",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ParameterList_140": {
                "variable": {
                    "value": "self.params_filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.params_filters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_138": {
                "variable": {
                    "value": "self.params_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "self.params_filters[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_129": {
                "data": {
                    "value": "wavelets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "morlets(self.grid, self.scattering_params_0, self.scattering_params_1, self.scattering_params_2, self.scattering_params_3)",
                            "Call"
                        ],
                        [
                            "self.scattering_wavelets",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "parametricSN/models/sn_hybrid_models.py": {
        "torch": {}
    },
    "parametricSN/models/sn_top_models.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(3 * M_coefficient * N_coefficient * n_coefficients)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(self.n_coefficients * 3, eps=1e-05, affine=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_105": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_135": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * k * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_178": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "int(3 * M_coefficient * N_coefficient * n_coefficients)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_179": {
                "variable": {
                    "value": "self.bn0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.n_coefficients * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_197": {
                "variable": {
                    "value": "self.model_ft.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model_ft.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_209": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_211": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_212": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_214": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_255": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64 * width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_257": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_258": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * width",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.init_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, self.ichannels, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "variable": {
                    "value": "self.init_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.BatchNorm2d(in_channels, eps=1e-05, affine=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_270": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "self.n_coefficients * 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_115": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.ichannels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_117": {
                "num_features": {
                    "value": "self.ichannels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_125": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * 3",
                            "BinOp"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels * 3",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.ichannels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "num_features": {
                    "value": "self.ichannels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_142": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "parametricSN/training/cosine_training.py": {
        "torch": {
            "one_hot_50": {
                "variable": {
                    "value": "target_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "model.top.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineSimilarity_51": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_24": {
                "variable": {
                    "value": "target_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "model.top.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineSimilarity_25": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "parametricSN/training/cross_entropy_training_accumulation.py": {
        "torch": {
            "cross_entropy_47": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_22": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_63": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ],
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "parametricSN/utils/helpers.py": {
        "torch": {
            "device_340": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "load_342": {
                "variable": {
                    "value": "paramsTF",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('/tmp', '{}_{}.pt'.format('Tight-Frame', mlflow_exp_name.strip('\"')))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_343": {
                "variable": {
                    "value": "paramsRand",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join('/tmp', '{}_{}.pt'.format('Random', mlflow_exp_name.strip('\"')))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_257": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_258": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_available_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "parametricSN/utils/optimizer_factory.py": {
        "torch": {
            "Adam_12": {
                "params": {
                    "value": "hybridModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['optim']['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "params['optim']['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_18": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "hybridModel.top.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['optim']['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "momentum": {
                    "value": "params['optim']['momentum']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "params['optim']['weight_decay']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "parametricSN/utils/scheduler_factory.py": {
        "torch": {
            "OneCycleLR_21": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "max_lr": {
                    "value": "params['optim']['max_lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps_per_epoch": {
                    "value": "steps_per_epoch",
                    "type": "variable",
                    "possible_values": []
                },
                "epochs": {
                    "value": "params['model']['epoch']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "three_phase": {
                    "value": "params['optim']['three_phase']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "div_factor": {
                    "value": "params['optim']['div_factor']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_35": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "T_max": {
                    "value": "params['optim']['T_max']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LambdaLR_43": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lmbda",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda epoch: 0.95",
                            "Lambda"
                        ]
                    ]
                }
            },
            "CyclicLR_46": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "base_lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "max_lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "step_size_up": {
                    "value": "params['optim']['T_max'] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "mode": {
                    "value": "triangular2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "StepLR_55": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "steps_per_epoch * int(params['model']['epoch'] / 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "parametricSN/visualization/viewer.py": {
        "torch": {
            "cat_69": {
                "variable": {
                    "value": "self.compared_params_grouped",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.unsqueeze(1) for x in compared_params[1:]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_174": {
                "variable": {
                    "value": "tempParamsGrouped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.unsqueeze(1) for x in [self.scattering.scattering_params_1, self.scattering.scattering_params_2, self.scattering.scattering_params_3]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "tempParamsGrouped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x.unsqueeze(1) for x in [self.scattering.scattering_params_1, self.scattering.scattering_params_2, self.scattering.scattering_params_3]]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "parametricSN/visualization/visualization_utils.py": {
        "torch": {
            "tensor_134": {
                "variable": {
                    "value": "xis",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "xis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([xi])",
                            "Call"
                        ],
                        [
                            "torch.tensor(xis, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_135": {
                "variable": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sigmas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([sigma])",
                            "Call"
                        ],
                        [
                            "torch.tensor(sigmas, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "variable": {
                    "value": "slants",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "slants",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([slant])",
                            "Call"
                        ],
                        [
                            "torch.tensor(slants, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "orientations",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "orientations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([theta])",
                            "Call"
                        ],
                        [
                            "torch.tensor(orientations, dtype=torch.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_141": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.meshgrid(*ranges)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cdist_224": {
                "variable": {
                    "value": "groupDistances",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "params1",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "params2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_225": {
                "variable": {
                    "value": "angleDistances",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "groupDistances.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cdist_258": {
                "variable": {
                    "value": "groupDistances",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "params1",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "params2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_259": {
                "variable": {
                    "value": "angleDistances",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "groupDistances.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_140": {
                "start": {
                    "value": "-(s // 2)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-(s // 2) + s",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_141": {
                "*tensors": {
                    "value": "*ranges",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_226": {
                "*size": {
                    "value": "groupDistances.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_260": {
                "*size": {
                    "value": "groupDistances.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}