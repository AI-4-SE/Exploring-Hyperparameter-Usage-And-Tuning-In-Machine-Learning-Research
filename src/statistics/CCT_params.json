{
    "base/base_dataloader.py": {
        "torch": {
            "SubsetRandomSampler_41": {
                "variable": {
                    "value": "train_sampler",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_indxs",
                    "possible_values": [
                        [
                            "indxs[split_indx:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_42": {
                "variable": {
                    "value": "val_sampler",
                    "possible_values": []
                },
                "indices": {
                    "value": "val_indxs",
                    "possible_values": [
                        [
                            "indxs[:split_indx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_48": {
                "sampler": {
                    "value": "self.val_sampler",
                    "possible_values": []
                }
            }
        }
    },
    "base/base_dataset.py": {
        "torch": {
            "from_numpy_179": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(label, dtype=np.int32)",
                    "possible_values": []
                }
            }
        }
    },
    "base/base_model.py": {
        "torch": {}
    },
    "base/base_trainer.py": {
        "torch": {
            "DataParallel_25": {
                "variable": {
                    "value": "self.model",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "availble_gpus",
                    "possible_values": []
                }
            },
            "SummaryWriter_67": {
                "variable": {
                    "value": "self.writer",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "writer_dir",
                    "possible_values": [
                        [
                            "os.path.join(cfg_trainer['log_dir'], run_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_74": {
                "variable": {
                    "value": "sys_gpu",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_82": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if n_gpu > 0 else cpu",
                    "possible_values": []
                }
            },
            "load_148": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_path",
                    "possible_values": []
                }
            },
            "save_139": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'arch': type(self.model).__name__, 'epoch': epoch, 'state_dict': self.model.state_dict(), 'monitor_best': self.mnt_best, 'config': self.config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, f'checkpoint.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, f'best_model.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_143": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{'arch': type(self.model).__name__, 'epoch': epoch, 'state_dict': self.model.state_dict(), 'monitor_best': self.mnt_best, 'config': self.config}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, f'checkpoint.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(self.checkpoint_dir, f'best_model.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "dataloaders/voc.py": {
        "torch": {}
    },
    "inference.py": {
        "torch": {
            "Upsample_47": {
                "variable": {
                    "value": "upsample",
                    "possible_values": []
                },
                "size": {
                    "value": "upsize",
                    "possible_values": [
                        [
                            "(ceil(H / 8) * 8, ceil(W / 8) * 8)",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "pad_49": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "F.pad(image, pad=(0, pad_w, 0, pad_h), mode='reflect')",
                            "Call"
                        ],
                        [
                            "image.cuda()",
                            "Call"
                        ],
                        [
                            "Image.open(image_path)",
                            "Call"
                        ],
                        [
                            "self.normalize(self.to_tensor(image))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testdataset",
                    "possible_values": [
                        [
                            "testDataset(args.images)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_84": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model",
                    "possible_values": []
                }
            },
            "DataParallel_85": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "models.CCT(num_classes=num_classes, conf=config['model'], testing=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_54": {
                "variable": {
                    "value": "scaled_img",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "possible_values": [
                        [
                            "F.pad(image, pad=(0, pad_w, 0, pad_h), mode='reflect')",
                            "Call"
                        ],
                        [
                            "image.cuda()",
                            "Call"
                        ],
                        [
                            "Image.open(image_path)",
                            "Call"
                        ],
                        [
                            "self.normalize(self.to_tensor(image))",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "scales",
                            "Name"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "no_grad_107": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/backbones/module_helper.py": {
        "torch": {
            "batch_norm_18": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "pretrained_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_107": {
                "variable": {
                    "value": "pretrained_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "pretrained",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_129": {
                "f": {
                    "value": "cached_file",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "possible_values": [
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_25": {
                "*args": {
                    "value": "nn.BatchNorm2d(num_features, **kwargs)",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "num_features": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "*args": {
                    "value": "BatchNorm2d(num_features, **kwargs)",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "*args": {
                    "value": "nn.InstanceNorm2d(num_features, **kwargs)",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_37": {
                "num_features": {
                    "value": "num_features",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "*args": {
                    "value": "FixedBatchNorm(num_features, **kwargs)",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/backbones/resnet_backbone.py": {
        "torch": {}
    },
    "models/backbones/resnet_models.py": {
        "torch": {
            "Conv2d_24": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_123": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "AvgPool2d_129": {
                "variable": {
                    "value": "self.avgpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_130": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.prefix",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, kernel_size=3, stride=2, padding=1, bias=False)), ('bn1', ModuleHelper.BatchNorm2d(norm_type=norm_type)(64)), ('relu1', nn.ReLU(inplace=False)), ('conv2', nn.Conv2d(64, 64, kernel_size=3, stride=1, padding=1, bias=False)), ('bn2', ModuleHelper.BatchNorm2d(norm_type=norm_type)(64)), ('relu2', nn.ReLU(inplace=False)), ('conv3', nn.Conv2d(64, 128, kernel_size=3, stride=1, padding=1, bias=False)), ('bn3', ModuleHelper.BatchNorm2d(norm_type=norm_type)(self.inplanes)), ('relu3', nn.ReLU(inplace=False))])",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.prefix",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('conv1', nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False)), ('bn1', ModuleHelper.BatchNorm2d(norm_type=norm_type)(self.inplanes)), ('relu', nn.ReLU(inplace=False))])",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "models/decoders.py": {
        "torch": {
            "Conv2d_48": {
                "variable": {
                    "value": "conv1x1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "rand_130": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "possible_values": []
                }
            },
            "sub_130": {
                "variable": {
                    "value": "d",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "from_numpy_196": {
                "variable": {
                    "value": "maskcut",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "masks_np",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(masks_np)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_197": {
                "variable": {
                    "value": "maskcut",
                    "possible_values": []
                },
                "input": {
                    "value": "maskcut",
                    "possible_values": [
                        [
                            "torch.from_numpy(masks_np).float().unsqueeze_(1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(maskcut, size=resize, mode='nearest')",
                            "Call"
                        ],
                        [
                            "guided_cutout(pred, upscale=self.upscale, erase=self.erase, resize=(x.size(2), x.size(3)))",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_224": {
                "variable": {
                    "value": "masks_context",
                    "possible_values": []
                },
                "input": {
                    "value": "masks_context",
                    "possible_values": [
                        [
                            "(output > 0).float().unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "(output.argmax(1) > 0).float().unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(masks_context, size=resize, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels * scale ** 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "PixelShuffle_37": {
                "variable": {
                    "value": "self.shuf",
                    "possible_values": []
                },
                "upscale_factor": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_38": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "mean_83": {
                "variable": {
                    "value": "attention",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.shuf(self.relu(self.conv(x)))",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(self.dropout(x))",
                            "Call"
                        ],
                        [
                            "self.feature_dropout(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.feature_based_noise(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ],
                        [
                            "self.upsample(x + r_adv)",
                            "Call"
                        ],
                        [
                            "x * maskcut",
                            "BinOp"
                        ],
                        [
                            "self.upsample(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_84": {
                "variable": {
                    "value": "(max_val, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "attention.view(x.size(0), -1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Uniform_100": {
                "variable": {
                    "value": "self.uni_dist",
                    "possible_values": []
                },
                "low": {
                    "value": "-uniform_range",
                    "possible_values": []
                },
                "high": {
                    "value": "uniform_range",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_128": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder(x_detached)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_136": {
                "variable": {
                    "value": "logp_hat",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_hat",
                    "possible_values": [
                        [
                            "decoder(x_detached + xi * d)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "kl_div_137": {
                "variable": {
                    "value": "adv_distance",
                    "possible_values": []
                },
                "input": {
                    "value": "logp_hat",
                    "possible_values": [
                        [
                            "F.log_softmax(pred_hat, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "F.softmax(decoder(x_detached), dim=1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "batchmean",
                    "possible_values": []
                }
            },
            "interpolate_172": {
                "variable": {
                    "value": "maskdroped",
                    "possible_values": []
                },
                "input": {
                    "value": "maskdroped",
                    "possible_values": [
                        [
                            "(F.dropout(masks, p_drop) > 0).float()",
                            "Call"
                        ],
                        [
                            "maskdroped + (1 - masks)",
                            "BinOp"
                        ],
                        [
                            "F.interpolate(maskdroped, size=resize, mode='nearest')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "resize",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "norm_117": {
                "input": {
                    "value": "d_reshaped",
                    "possible_values": [
                        [
                            "d.view(d.shape[0], -1, *(1 for _ in range(d.dim() - 2)))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dropout2d_69": {
                "p": {
                    "value": "drop_rate",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_69": {
                "p": {
                    "value": "drop_rate",
                    "possible_values": [
                        [
                            "0.3",
                            "MethodArgument"
                        ],
                        [
                            "0.3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "[ni2, nf, h, w]",
                    "possible_values": []
                }
            },
            "dropout_169": {
                "input": {
                    "value": "masks",
                    "possible_values": [
                        [
                            "(output > 0).float()",
                            "Call"
                        ],
                        [
                            "(output.argmax(1) > 0).float()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "p_drop",
                    "possible_values": [
                        [
                            "random.randint(3, 6) / 10",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/encoder.py": {
        "torch": {
            "ModuleList_17": {
                "variable": {
                    "value": "self.stages",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stages(in_channels, out_channels, b_s) for b_s in bin_sizes]",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.bottleneck",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels + out_channels * len(bin_sizes), out_channels, kernel_size=3, padding=1, bias=False)",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_26": {
                "variable": {
                    "value": "prior",
                    "possible_values": []
                },
                "output_size": {
                    "value": "bin_sz",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "in_channels // len(bin_sizes)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "in_channels // len(bin_sizes)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.base",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Sequential(model.prefix, model.maxpool)",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "*args": {
                    "value": "prior",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_channels + out_channels * len(bin_sizes)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "in_channels // len(bin_sizes)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "in_channels // len(bin_sizes)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_37": {
                "tensors": {
                    "value": "pyramids",
                    "possible_values": [
                        [
                            "[features]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "*args": {
                    "value": "model.prefix",
                    "possible_values": []
                }
            },
            "interpolate_35": {
                "input": {
                    "value": "stage(features)",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "models/model.py": {
        "torch": {
            "ModuleList_82": {
                "variable": {
                    "value": "self.aux_decoders",
                    "possible_values": []
                },
                "modules": {
                    "value": "[*vat_decoder, *drop_decoder, *cut_decoder, *context_m_decoder, *object_masking, *feature_drop, *feature_noise]",
                    "possible_values": []
                }
            },
            "interpolate_95": {
                "variable": {
                    "value": "output_l",
                    "possible_values": []
                },
                "input": {
                    "value": "output_l",
                    "possible_values": [
                        [
                            "self.main_decoder(self.encoder(x_l))",
                            "Call"
                        ],
                        [
                            "F.interpolate(output_l, size=input_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_size",
                    "possible_values": [
                        [
                            "(x_l.size(2), x_l.size(3))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "softmax_120": {
                "variable": {
                    "value": "targets",
                    "possible_values": []
                },
                "input": {
                    "value": "output_ul.detach()",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_130": {
                "variable": {
                    "value": "output_ul",
                    "possible_values": []
                },
                "input": {
                    "value": "output_ul",
                    "possible_values": [
                        [
                            "self.main_decoder(x_ul)",
                            "Call"
                        ],
                        [
                            "F.interpolate(output_ul, size=input_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "input_size",
                    "possible_values": [
                        [
                            "(x_l.size(2), x_l.size(3))",
                            "Tuple"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "pseudo_labels/cam_to_pseudo_labels.py": {
        "torch": {
            "DataLoader_13": {
                "variable": {
                    "value": "infer_data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "databin",
                    "possible_values": [
                        [
                            "infer_dataset[process_id]",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "pseudo_labels/make_cam.py": {
        "torch": {
            "device_count_19": {
                "variable": {
                    "value": "n_gpus",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "DataLoader_20": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "databin",
                    "possible_values": [
                        [
                            "dataset[process_id]",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers // n_gpus",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "device_count_67": {
                "variable": {
                    "value": "n_gpus",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "empty_cache_77": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_22": {
                "type": {
                    "value": "process_id",
                    "possible_values": []
                }
            },
            "sum_38": {
                "variable": {
                    "value": "strided_cam",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([F.interpolate(torch.unsqueeze(o, 0), strided_size, mode='bilinear', align_corners=False)[0] for o in outputs])",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "load_64": {
                "f": {
                    "value": "args.cam_weights_name + '.pth'",
                    "possible_values": []
                }
            },
            "stack_38": {
                "tensors": {
                    "value": "[F.interpolate(torch.unsqueeze(o, 0), strided_size, mode='bilinear', align_corners=False)[0] for o in outputs]",
                    "possible_values": []
                }
            },
            "interpolate_42": {
                "input": {
                    "value": "torch.unsqueeze(o, 1)",
                    "possible_values": []
                },
                "size": {
                    "value": "strided_up_size",
                    "possible_values": [
                        [
                            "imutils.get_strided_up_size(size, 16)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "sum_44": {
                "input": {
                    "value": "torch.stack(highres_cam, 0)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "nonzero_46": {
                "input": {
                    "value": "label",
                    "possible_values": [
                        [
                            "pack['label'][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "adaptive_max_pool2d_49": {
                "*args": {
                    "value": "strided_cam",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_52": {
                "*args": {
                    "value": "highres_cam",
                    "possible_values": []
                }
            },
            "unsqueeze_42": {
                "input": {
                    "value": "o",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_44": {
                "tensors": {
                    "value": "highres_cam",
                    "possible_values": [
                        [
                            "[F.interpolate(torch.unsqueeze(o, 1), strided_up_size, mode='bilinear', align_corners=False) for o in outputs]",
                            "ListComp"
                        ],
                        [
                            "torch.sum(torch.stack(highres_cam, 0), 0)[:, 0, :size[0], :size[1]]",
                            "Subscript"
                        ],
                        [
                            "highres_cam[valid_cat]",
                            "Subscript"
                        ],
                        [
                            "highres_cam / (F.adaptive_max_pool2d(highres_cam, (1, 1)) + 1e-05)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "interpolate_39": {
                "input": {
                    "value": "torch.unsqueeze(o, 0)",
                    "possible_values": []
                },
                "size": {
                    "value": "strided_size",
                    "possible_values": [
                        [
                            "imutils.get_strided_size(size, 4)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "unsqueeze_39": {
                "input": {
                    "value": "o",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "pseudo_labels/misc/torchutils.py": {
        "torch": {
            "mean_72": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "input": {
                    "value": "x.view(x.size(0), x.size(1), -1)",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "Subset_68": {
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "indices": {
                    "value": "np.arange(i, len(dataset), n_splits)",
                    "possible_values": []
                }
            }
        }
    },
    "pseudo_labels/net/resnet50.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "strides[0]",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "batch_norm_13": {
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "pseudo_labels/net/resnet50_cam.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.stage1",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.resnet50.conv1",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.stage2",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.resnet50.layer2",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "variable": {
                    "value": "self.stage3",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.resnet50.layer3",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.stage4",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.resnet50.layer4",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "20",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ModuleList_22": {
                "variable": {
                    "value": "self.backbone",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.stage1, self.stage2, self.stage3, self.stage4]",
                    "possible_values": []
                }
            },
            "ModuleList_23": {
                "variable": {
                    "value": "self.newly_added",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.classifier]",
                    "possible_values": []
                }
            },
            "conv2d_54": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x).detach()",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "torchutils.gap2d(x, keepdims=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 20)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.classifier.weight)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x[0] + x[1].flip(-1)",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.classifier.weight",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x).detach()",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "torchutils.gap2d(x, keepdims=True)",
                            "Call"
                        ],
                        [
                            "self.classifier(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 20)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "self.stage4(x)",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, self.classifier.weight)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "x[0] + x[1].flip(-1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "pseudo_labels/train_cam.py": {
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "train_data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "voc12.dataloader.VOC12ClassificationDataset(args.train_list, voc12_root=args.voc12_root, resize_long=(320, 640), hor_flip=True, crop_size=512, crop_method='random')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.cam_batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "val_data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "possible_values": [
                        [
                            "voc12.dataloader.VOC12ClassificationDataset(args.val_list, voc12_root=args.voc12_root, crop_size=512)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.cam_batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_51": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "getattr(importlib.import_module(args.cam_network), 'Net')()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_79": {
                "obj": {
                    "value": "model.module.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "args.cam_weights_name + '.pth'",
                    "possible_values": []
                }
            },
            "empty_cache_80": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_19": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "multilabel_soft_margin_loss_24": {
                "variable": {
                    "value": "loss1",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "model(img)",
                            "Call"
                        ],
                        [
                            "model(img)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "possible_values": [
                        [
                            "pack['label'].cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "pack['label'].cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "multilabel_soft_margin_loss_61": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "model(img)",
                            "Call"
                        ],
                        [
                            "model(img)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "possible_values": [
                        [
                            "pack['label'].cuda(non_blocking=True)",
                            "Call"
                        ],
                        [
                            "pack['label'].cuda(non_blocking=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "pseudo_labels/voc12/dataloader.py": {
        "torch": {
            "from_numpy_170": {
                "variable": {
                    "value": "out[label]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.label_list[idx]",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "ndarray": {
                    "value": "fg_pos_affinity_label",
                    "possible_values": [
                        [
                            "np.logical_and(pos_affinity_label, np.greater(segm_label_from, 0)).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_106": {
                "ndarray": {
                    "value": "neg_affinity_label",
                    "possible_values": [
                        [
                            "np.logical_and(np.logical_not(equal_label), valid_label).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_203": {
                "ndarray": {
                    "value": "self.label_list[idx]",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "manual_seed_19": {
                "seed": {
                    "value": "42",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "stack_282": {
                "variable": {
                    "value": "val_img",
                    "possible_values": []
                },
                "tensors": {
                    "value": "val_img",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(val_img, 0)",
                            "Call"
                        ],
                        [
                            "make_grid(val_img.cpu(), nrow=val_img.size(0) // len(val_visual), padding=5)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "pad_123": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "possible_values": [
                        [
                            "F.pad(data, pad=(0, pad_w, 0, pad_h), mode='reflect')",
                            "Call"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, pad_w, 0, pad_h)",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "possible_values": []
                }
            },
            "cross_entropy_128": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "output[:, :, :H, :W]",
                            "Subscript"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_index",
                    "possible_values": []
                }
            }
        }
    },
    "utils/helpers.py": {
        "torch": {}
    },
    "utils/lr_scheduler.py": {
        "torch": {}
    },
    "utils/metrics.py": {
        "torch": {
            "max_44": {
                "variable": {
                    "value": "(_, predict)",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "np.asarray(output)",
                            "Call"
                        ],
                        [
                            "np.asarray(output) + 1",
                            "BinOp"
                        ],
                        [
                            "output * (target > 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_56": {
                "variable": {
                    "value": "(_, predict)",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "possible_values": [
                        [
                            "np.asarray(output)",
                            "Call"
                        ],
                        [
                            "np.asarray(output) + 1",
                            "BinOp"
                        ],
                        [
                            "output * (target > 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "histc_63": {
                "variable": {
                    "value": "area_inter",
                    "possible_values": []
                },
                "input": {
                    "value": "intersection.float()",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_class",
                    "possible_values": []
                },
                "max": {
                    "value": "num_class",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "histc_64": {
                "variable": {
                    "value": "area_pred",
                    "possible_values": []
                },
                "input": {
                    "value": "predict.float()",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_class",
                    "possible_values": []
                },
                "max": {
                    "value": "num_class",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "histc_65": {
                "variable": {
                    "value": "area_lab",
                    "possible_values": []
                },
                "input": {
                    "value": "target.float()",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_class",
                    "possible_values": []
                },
                "max": {
                    "value": "num_class",
                    "possible_values": []
                },
                "min": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    }
}