{
    "notebooks/distributions_metrics.py": {
        "sklearn": {
            "roc_auc_score_73": {
                "variable": {
                    "value": "res_auc",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_ood",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 - np.array(true_ind)",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "score_ood",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 - np.array(score_ind)",
                            "BinOp"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * true_len + [true_len / false_len] * false_len",
                            "BinOp"
                        ]
                    ]
                }
            },
            "average_precision_score_76": {
                "variable": {
                    "value": "ap_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_ood",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 - np.array(true_ind)",
                            "BinOp"
                        ]
                    ]
                },
                "y_score": {
                    "value": "score_ood",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 - np.array(score_ind)",
                            "BinOp"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * true_len + [true_len / false_len] * false_len",
                            "BinOp"
                        ]
                    ]
                }
            },
            "average_precision_score_80": {
                "variable": {
                    "value": "ap_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "true_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(true_ind)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "score_ind",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(score_ind)",
                            "Call"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * true_len + [true_len / false_len] * false_len",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/adversarial_utilities.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_folder, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_44": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/dataset_utilities.py": {
        "torch": {
            "DataLoader_47": {
                "variable": {
                    "value": "trainloader_with_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train_with_sample",
                    "type": "Name",
                    "possible_values": [
                        [
                            "copy.deepcopy(trainloader.dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "trainloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "trainloader.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_68": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10RandomLabels(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), corrupt_prob=label_corrupt_prob)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.SVHN(root=data_dir, split='test', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "NoiseDataset(root=data_dir, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10Adversarial(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), adversarial_sign_dataset_path=adversarial_sign_dataset_path, epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_109": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10RandomLabels(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), corrupt_prob=label_corrupt_prob)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_119": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.SVHN(root=data_dir, split='test', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "NoiseDataset(root=data_dir, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10Adversarial(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), adversarial_sign_dataset_path=adversarial_sign_dataset_path, epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_141": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10RandomLabels(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), corrupt_prob=label_corrupt_prob)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_151": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.SVHN(root=data_dir, split='test', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "NoiseDataset(root=data_dir, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10Adversarial(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), adversarial_sign_dataset_path=adversarial_sign_dataset_path, epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_233": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10RandomLabels(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), corrupt_prob=label_corrupt_prob)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_244": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.SVHN(root=data_dir, split='test', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "NoiseDataset(root=data_dir, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10Adversarial(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), adversarial_sign_dataset_path=adversarial_sign_dataset_path, epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_269": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10RandomLabels(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), corrupt_prob=label_corrupt_prob)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_279": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.SVHN(root=data_dir, split='test', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "NoiseDataset(root=data_dir, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10Adversarial(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), adversarial_sign_dataset_path=adversarial_sign_dataset_path, epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_301": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10RandomLabels(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), corrupt_prob=label_corrupt_prob)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_309": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.SVHN(root=data_dir, split='test', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "NoiseDataset(root=data_dir, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10Adversarial(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), adversarial_sign_dataset_path=adversarial_sign_dataset_path, epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_363": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10RandomLabels(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), corrupt_prob=label_corrupt_prob)",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_376": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.SVHN(root=data_dir, split='test', download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR10(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.MNIST(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize_mist]))",
                            "Call"
                        ],
                        [
                            "NoiseDataset(root=data_dir, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "CIFAR10Adversarial(root=data_dir, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]), adversarial_sign_dataset_path=adversarial_sign_dataset_path, epsilon=epsilon)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_31": {
                "variable": {
                    "value": "sample_to_insert_data_expended",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_43": {
                "variable": {
                    "value": "dataset_train_with_sample.train_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "dataset_train_with_sample.train_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "trainloader.dataset.train_data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/lenet.py": {
        "torch": {
            "Conv2d_8": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "16 * 5 * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "120",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "120",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "84",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "84",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_15": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_16": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "func.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "func.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "func.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "func.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "func.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "func.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_17": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_18": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "func.relu(self.conv1(x))",
                            "Call"
                        ],
                        [
                            "func.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "func.relu(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "func.max_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "func.relu(self.fc1(x))",
                            "Call"
                        ],
                        [
                            "func.relu(self.fc2(x))",
                            "Call"
                        ],
                        [
                            "self.fc3(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_20": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_21": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/mpl.py": {
        "torch": {
            "Linear_8": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size * input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_9": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/resnet.py": {
        "torch": {
            "DataParallel_166": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_168": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dst_model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(output_folder, 'resnet20_pretrained_cifar10.th')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_folder, 'resnet32_pretrained_cifar10.th')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataParallel_187": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.module",
                            "Attribute"
                        ]
                    ]
                }
            },
            "load_189": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dst_model_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(output_folder, 'resnet20_pretrained_cifar10.th')",
                            "Call"
                        ],
                        [
                            "os.path.join(output_folder, 'resnet32_pretrained_cifar10.th')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_91": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_109": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_113": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.size()[3])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.size()[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_69": {
                "input": {
                    "value": "x[:, :, ::2, ::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 0, 0, 0, planes // 4, planes // 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "Constant",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_utilities.py": {
        "torch": {
            "softmax_179": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "model(sample_data.unsqueeze(0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "SGD_38": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params_to_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_42": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MultiStepLR_43": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "milestones": {
                    "value": "step_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "gamma": {
                    "value": "gamma",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_121": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_200": {
                "obj": {
                    "value": "model_base.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(logger.output_folder, '%s_model_%f.pt' % (experiment_h.get_exp_name(), train_loss))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "[-1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_152": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_204": {
                "f": {
                    "value": "params_train['pretrained_model_path']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_available_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_72": {
                "data": {
                    "value": "[-1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "is_available_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_147": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/wide_resnet.py": {
        "torch": {
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_111": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu1(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu2(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.forward_repr(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_33": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu1(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu2(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.forward_repr(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_36": {
                "input": {
                    "value": "self.convShortcut(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu1(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu2(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.forward_repr(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_38": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(self.relu1(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(self.relu2(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.forward_repr(x)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}