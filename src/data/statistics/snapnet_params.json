{
    "python/pytorch/pytorch_trainer.py": {
        "sklearn": {
            "confusion_matrix_124": {
                "y_true": {
                    "value": "targets_np.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "outputs_np.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "list(range(label_nbr))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_62": {
                "variable": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(Image.open(os.path.join(self.image_directory, self.filenames[index] + '.png')))",
                            "Call"
                        ],
                        [
                            "im.transpose(2, 0, 1).astype(np.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(im).float()",
                            "Call"
                        ],
                        [
                            "im[::-1]",
                            "Subscript"
                        ],
                        [
                            "im[:, ::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_94": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SnapNetDataset(image_files, im_images_dir, True, im_labels_dir)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.load(os.path.join(self.label_directory, self.filenames[index] + '.npz'))['arr_0']",
                            "Subscript"
                        ],
                        [
                            "labels.astype(np.int64)",
                            "Call"
                        ],
                        [
                            "labels[::-1]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(labels).long()",
                            "Call"
                        ],
                        [
                            "labels[:, ::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cross_entropy_117": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(inputs)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "variable"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_137": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saver_directory, 'state_dict.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "python/pytorch/pytorch_trainer_fusion.py": {
        "sklearn": {
            "confusion_matrix_155": {
                "y_true": {
                    "value": "targets_np.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "outputs_np.ravel()",
                    "type": "Call",
                    "possible_values": []
                },
                "labels": {
                    "value": "list(range(label_nbr))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_68": {
                "variable": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(Image.open(os.path.join(self.image_directory1, self.filenames[index] + '.png')))",
                            "Call"
                        ],
                        [
                            "im1.transpose(2, 0, 1).astype(np.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(im1).float()",
                            "Call"
                        ],
                        [
                            "im1[::-1]",
                            "Subscript"
                        ],
                        [
                            "im1[:, ::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_69": {
                "variable": {
                    "value": "im2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(Image.open(os.path.join(self.image_directory2, self.filenames[index] + '.png')))",
                            "Call"
                        ],
                        [
                            "im2.transpose(2, 0, 1).astype(np.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(im2).float()",
                            "Call"
                        ],
                        [
                            "im2[::-1]",
                            "Subscript"
                        ],
                        [
                            "im2[:, ::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net_fusion.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SnapNetDataset(image_files, im_images1_dir, im_images2_dir, True, im_labels_dir)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "np.load(os.path.join(self.label_directory, self.filenames[index] + '.npz'))['arr_0']",
                            "Subscript"
                        ],
                        [
                            "labels.astype(np.int64)",
                            "Call"
                        ],
                        [
                            "labels[::-1]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(labels).long()",
                            "Call"
                        ],
                        [
                            "labels[:, ::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "load_106": {
                "f": {
                    "value": "os.path.join(saver_directory1, 'state_dict.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_108": {
                "f": {
                    "value": "os.path.join(saver_directory2, 'state_dict.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_148": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_fusion(outputs1, outputs2, features1, features2)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "variable"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_168": {
                "obj": {
                    "value": "net_fusion.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(saver_directory, 'state_dict.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/pytorch/pytorch_tester_fusion.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "images2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, imsize, imsize, input_ch]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "images1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, imsize, imsize, input_ch]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_51": {
                "variable": {
                    "value": "saver1",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if variable_scope1 in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_52": {
                "variable": {
                    "value": "saver2",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if variable_scope2 in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_53": {
                "variable": {
                    "value": "saverFusion",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if variable_scope_fusion in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Session_55": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_59": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "saver_directory1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver_directory1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_64": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "saver_directory2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver_directory2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_70": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "saver_directoryFusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver_directoryFusion",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "variable_scope1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "variable_scope2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "variable_scope_fusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope_fusion",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/tf/models/tensorflow_residual_fusion.py": {
        "tensorflow": {
            "concat_18": {
                "values": {
                    "value": "[tf.stop_gradient(net1[-3]), tf.stop_gradient(net2[-3])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stop_gradient_18": {
                "input": {
                    "value": "net2[-3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stop_gradient_22": {
                "input": {
                    "value": "net2[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "python/tf/models/tensorflow_unet.py": {
        "tensorflow": {
            "max_pool_47": {
                "variable": {
                    "value": "self.layers[pool1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers['conv1_2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_52": {
                "variable": {
                    "value": "self.layers[pool2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers['conv2_2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_58": {
                "variable": {
                    "value": "self.layers[pool3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers['conv3_3']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_64": {
                "variable": {
                    "value": "self.layers[pool4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layers['conv4_3']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_95": {
                "values": {
                    "value": "[deconv_net[-1], net.layers['conv4_3']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_101": {
                "values": {
                    "value": "[deconv_net[-1], net.layers['conv3_3']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_107": {
                "values": {
                    "value": "[deconv_net[-1], net.layers['conv2_2']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_113": {
                "values": {
                    "value": "[deconv_net[-1], net.layers['conv1_2']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "variable_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "op_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict",
                            "variable"
                        ]
                    ]
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_78": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "param_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_dict[op_name].items()",
                            "Call"
                        ],
                        [
                            "param_name.decode('utf-8')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "python/tf/tensorflow_tester_backprojeter.py": {
        "tensorflow": {
            "placeholder_49": {
                "variable": {
                    "value": "images2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, imsize, imsize, input_ch]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_50": {
                "variable": {
                    "value": "images1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, imsize, imsize, input_ch]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "bool",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Saver_66": {
                "variable": {
                    "value": "saver1",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if variable_scope1 in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_67": {
                "variable": {
                    "value": "saver2",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if variable_scope2 in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_68": {
                "variable": {
                    "value": "saverFusion",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if variable_scope_fusion in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Session_70": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_74": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "saver_directory1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver_directory1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_79": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "saver_directory2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver_directory2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_85": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "saver_directoryFusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver_directoryFusion",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "variable_scope1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "variable_scope2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "variable_scope_fusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope_fusion",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/tf/tensorflow_tester_fusion.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "images2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, imsize, imsize, input_ch]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "images1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, imsize, imsize, input_ch]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_51": {
                "variable": {
                    "value": "saver1",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if variable_scope1 in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_52": {
                "variable": {
                    "value": "saver2",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if variable_scope2 in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_53": {
                "variable": {
                    "value": "saverFusion",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if variable_scope_fusion in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Session_55": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_59": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "saver_directory1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver_directory1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_64": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "saver_directory2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver_directory2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_70": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "saver_directoryFusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver_directoryFusion",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "variable_scope1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "variable_scope2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_46": {
                "name_or_scope": {
                    "value": "variable_scope_fusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope_fusion",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/tf/tensorflow_trainer.py": {
        "tensorflow": {
            "placeholder_31": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, imsize, imsize, input_ch]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, imsize, imsize]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_41": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if variable_scope in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "variable": {
                    "value": "reshaped_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, imsize, imsize], name='labels')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "reshaped_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_net[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, label_nbr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_46": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "reshaped_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(predictions, [-1, label_nbr])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "reshaped_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_54": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_55": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_34": {
                "name_or_scope": {
                    "value": "variable_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'s'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "python/tf/tensorflow_trainer_fusion.py": {
        "tensorflow": {
            "placeholder_37": {
                "variable": {
                    "value": "images2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, imsize, imsize, input_ch]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_38": {
                "variable": {
                    "value": "images1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, imsize, imsize, input_ch]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "images",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, imsize, imsize]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_48": {
                "variable": {
                    "value": "saver1",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if variable_scope1 in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_49": {
                "variable": {
                    "value": "saver2",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if variable_scope2 in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Saver_56": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "[v for v in tf.global_variables() if variable_scope_fusion in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "reshaped_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, imsize, imsize], name='labels')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "reshaped_predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net_fusion[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, label_nbr]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_61": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "reshaped_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(predictions, [-1, label_nbr])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "reshaped_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_64": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Session_67": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_68": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_checkpoint_state_71": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "saver_directory1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver_directory1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_76": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "saver_directory2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "saver_directory2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Graph_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "variable_scope1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_44": {
                "name_or_scope": {
                    "value": "variable_scope2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "variable_scope_fusion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variable_scope_fusion",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sem3d_test_backproj.py": {
        "tensorflow": {}
    },
    "python/pytorch/models/net_fusion.py": {
        "torch": {
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[f1, f2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_36": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_42": {
                "variable": {
                    "value": "th",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "python/pytorch/models/net_unet.py": {
        "torch": {
            "Conv2d_19": {
                "variable": {
                    "value": "self.conv11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn11",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn12",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "variable": {
                    "value": "self.conv31",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn31",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.conv32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv33",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.bn33",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv41",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn41",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv42",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn42",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv43",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn43",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv51",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "variable": {
                    "value": "self.bn51",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.conv52",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_46": {
                "variable": {
                    "value": "self.bn52",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "variable": {
                    "value": "self.conv53",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn53",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_50": {
                "variable": {
                    "value": "self.upconv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_52": {
                "variable": {
                    "value": "self.conv53d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn53d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_54": {
                "variable": {
                    "value": "self.conv52d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn52d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_56": {
                "variable": {
                    "value": "self.conv51d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn51d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_59": {
                "variable": {
                    "value": "self.upconv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_61": {
                "variable": {
                    "value": "self.conv43d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn43d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_63": {
                "variable": {
                    "value": "self.conv42d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "variable": {
                    "value": "self.bn42d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_65": {
                "variable": {
                    "value": "self.conv41d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "variable": {
                    "value": "self.bn41d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_68": {
                "variable": {
                    "value": "self.upconv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_70": {
                "variable": {
                    "value": "self.conv33d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn33d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_72": {
                "variable": {
                    "value": "self.conv32d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_73": {
                "variable": {
                    "value": "self.bn32d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_74": {
                "variable": {
                    "value": "self.conv31d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn31d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_77": {
                "variable": {
                    "value": "self.upconv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_79": {
                "variable": {
                    "value": "self.conv22d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_80": {
                "variable": {
                    "value": "self.bn22d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_81": {
                "variable": {
                    "value": "self.conv21d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_82": {
                "variable": {
                    "value": "self.bn21d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_84": {
                "variable": {
                    "value": "self.upconv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_86": {
                "variable": {
                    "value": "self.conv12d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_87": {
                "variable": {
                    "value": "self.bn12d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_88": {
                "variable": {
                    "value": "self.conv11d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_103": {
                "variable": {
                    "value": "x11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn11(self.conv11(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_104": {
                "variable": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn12(self.conv12(x11))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_105": {
                "variable": {
                    "value": "x1p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn12(self.conv12(x11)))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_108": {
                "variable": {
                    "value": "x21",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn21(self.conv21(x1p))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_109": {
                "variable": {
                    "value": "x22",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn22(self.conv22(x21))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_110": {
                "variable": {
                    "value": "x2p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x22",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn22(self.conv22(x21)))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_113": {
                "variable": {
                    "value": "x31",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn31(self.conv31(x2p))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "x32",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn32(self.conv32(x31))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "x33",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn33(self.conv33(x32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_116": {
                "variable": {
                    "value": "x3p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x33",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn33(self.conv33(x32)))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_119": {
                "variable": {
                    "value": "x41",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn41(self.conv41(x3p))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "x42",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn42(self.conv42(x41))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "x43",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn43(self.conv43(x42))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_122": {
                "variable": {
                    "value": "x4p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x43",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn43(self.conv43(x42)))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "x51",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn51(self.conv51(x4p))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_126": {
                "variable": {
                    "value": "x52",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn52(self.conv52(x51))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_127": {
                "variable": {
                    "value": "x53",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn53(self.conv53(x52))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_128": {
                "variable": {
                    "value": "x5p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x53",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn53(self.conv53(x52)))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "x5d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.upconv5(x5p), x53)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_132": {
                "variable": {
                    "value": "x53d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn53d(self.conv53d(x5d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_133": {
                "variable": {
                    "value": "x52d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn52d(self.conv52d(x53d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_134": {
                "variable": {
                    "value": "x51d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn51d(self.conv51d(x52d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "x4d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.upconv4(x51d), x43)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_138": {
                "variable": {
                    "value": "x43d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn43d(self.conv43d(x4d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_139": {
                "variable": {
                    "value": "x42d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn42d(self.conv42d(x43d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_140": {
                "variable": {
                    "value": "x41d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn41d(self.conv41d(x42d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "x3d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.upconv3(x41d), x33)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_144": {
                "variable": {
                    "value": "x33d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn33d(self.conv33d(x3d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_145": {
                "variable": {
                    "value": "x32d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn32d(self.conv32d(x33d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_146": {
                "variable": {
                    "value": "x31d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn31d(self.conv31d(x32d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "x2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.upconv2(x31d), x22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_150": {
                "variable": {
                    "value": "x22d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn22d(self.conv22d(x2d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_151": {
                "variable": {
                    "value": "x21d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn21d(self.conv21d(x22d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "x1d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.upconv1(x21d), x12)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "x12d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn12d(self.conv12d(x1d))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_208": {
                "variable": {
                    "value": "th",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "python/pytorch/pytorch_tester_backprojeter.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(Image.open(os.path.join(self.image_directory1, self.filenames[index] + '.png')))",
                            "Call"
                        ],
                        [
                            "im1.transpose(2, 0, 1).astype(np.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(im1).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "im2",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "im2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(Image.open(os.path.join(self.image_directory2, self.filenames[index] + '.png')))",
                            "Call"
                        ],
                        [
                            "im2.transpose(2, 0, 1).astype(np.float32) / 255 - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(im2).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_50": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.load(os.path.join(self.dir_views, self.filenames[index] + '.npz'))['arr_0']",
                            "Subscript"
                        ],
                        [
                            "indices.astype(np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(indices).long()",
                            "Call"
                        ],
                        [
                            "indices_np[im_id]",
                            "Subscript"
                        ],
                        [
                            "indices.reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "ds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SnapNetDataset(image_files, im_images1_dir, im_images2_dir, dir_views)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_90": {
                "f": {
                    "value": "os.path.join(saver_directory1, 'state_dict.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_92": {
                "f": {
                    "value": "os.path.join(saver_directory2, 'state_dict.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_94": {
                "f": {
                    "value": "os.path.join(saver_directoryFusion, 'state_dict.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}