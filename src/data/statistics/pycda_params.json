{
    "dataset/cityscapes_dataset.py": {
        "torch": {}
    },
    "dataset/gta5_dataset.py": {
        "torch": {}
    },
    "dataset/utils.py": {
        "torch": {}
    },
    "lib/nn/modules/batchnorm.py": {
        "torch": {
            "zeros_50": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_51": {
                "*size": {
                    "value": "self.num_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_52": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "batch_norm_59": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nn/modules/replicate.py": {
        "torch": {}
    },
    "lib/nn/modules/tests/test_numeric_batchnorm.py": {
        "torch": {
            "rand_31": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_42": {
                "variable": {
                    "value": "a_std2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "handy_var(a_var2, unbias=False).clamp(min=1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nn/modules/tests/test_sync_batchnorm.py": {
        "torch": {
            "BatchNorm1d_68": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_74": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_80": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm1d_90": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "bn",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_71": {
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_77": {
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_87": {
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_97": {
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_107": {
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/nn/modules/unittest.py": {
        "torch": {}
    },
    "lib/utils/data/dataloader.py": {
        "torch": {
            "set_num_threads_44": {
                "int": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_45": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_tensor_106": {
                "obj": {
                    "value": "batch[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "is_tensor_143": {
                "obj": {
                    "value": "batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.collate_fn([self.dataset[i] for i in indices])",
                            "Call"
                        ],
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.reorder_dict.pop(self.rcvd_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_66": {
                "device": {
                    "value": "device_id",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_114": {
                "tensors": {
                    "value": "batch",
                    "type": "Call",
                    "possible_values": [
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.collate_fn([self.dataset[i] for i in indices])",
                            "Call"
                        ],
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.reorder_dict.pop(self.rcvd_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_123": {
                "tensors": {
                    "value": "[torch.from_numpy(b) for b in batch]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "current_device_221": {
                "variable": {
                    "value": "maybe_device_id",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_123": {
                "ndarray": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/data/dataset.py": {
        "torch": {
            "randperm_117": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "sum(lengths)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/data/distributed.py": {
        "torch": {
            "Generator_39": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_41": {
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/utils/data/sampler.py": {
        "torch": {
            "randperm_50": {
                "n": {
                    "value": "len(self.data_source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_90": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "self.replacement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_67": {
                "n": {
                    "value": "len(self.indices)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/utils/th.py": {
        "torch": {
            "is_tensor_31": {
                "obj": {
                    "value": "obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(obj)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_25": {
                "obj": {
                    "value": "obj",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(obj)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/autoencoder.py": {
        "torch": {
            "Tensor_34": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "pad_41": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[self.pad, self.pad, self.pad, self.pad]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_42": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.pad(x, [self.pad, self.pad, self.pad, self.pad], mode='replicate')",
                            "Call"
                        ],
                        [
                            "nn.functional.conv2d(out, self.blur_kernel, groups=3)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ],
                        [
                            "self.encode(x)",
                            "Call"
                        ],
                        [
                            "self.dec_shared(out)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.blur_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_130": {
                "variable": {
                    "value": "self.encode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*enc",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.dec_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*dec_shared",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_133": {
                "variable": {
                    "value": "self.decode_A",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*dec_A",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_134": {
                "variable": {
                    "value": "self.decode_B",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*dec_B",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "variable": {
                    "value": "data[i, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kernel2d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.dot(kernel.reshape(kernel_size, 1), kernel.reshape(1, kernel_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_56": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_59": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_89": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_129": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_61": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/common_net.py": {
        "torch": {
            "pad_25": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[self.pad, self.pad, self.pad, self.pad]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_26": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "nn.functional.pad(x, [self.pad, self.pad, self.pad, self.pad], mode='replicate')",
                            "Call"
                        ],
                        [
                            "nn.functional.conv2d(out, self.blur_kernel, groups=3)",
                            "Call"
                        ],
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "out + residual",
                            "BinOp"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.blur_kernel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_145": {
                "variable": {
                    "value": "self.en_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "self.en_sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Softplus_147": {
                "variable": {
                    "value": "self.softplus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_170": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_21": {
                "variable": {
                    "value": "data[i, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "kernel2d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.dot(kernel.reshape(kernel_size, 1), kernel.reshape(1, kernel_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_40": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_43": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_71": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_72": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_85": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_96": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_97": {
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_98": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_109": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_110": {
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_122": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_124": {
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_139": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_170": {},
            "Conv2d_184": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_185": {
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_187": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_198": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_199": {
                "num_features": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_201": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_164": {
                "*size": {
                    "value": "mu.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "mu.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mu.size(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "layout": {
                    "value": "mu.size(3)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/discriminator.py": {
        "torch": {
            "Module_46": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "h + [stage(x)]",
                            "BinOp"
                        ],
                        [
                            "torch.cat(h, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_87": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_88": {
                "variable": {
                    "value": "self.leaky_relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_90": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_109": {
                "variable": {
                    "value": "self.leaky_relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_dim, dim1, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_158": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_162": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_191": {
                "variable": {
                    "value": "self.leaky_relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_193": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_214": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "Variable",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024 if input_dim == 4096 else 512",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_134": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "dim1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024 if input_dim == 4096 else 512",
                            "IfExp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(dim1 / 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_137": {
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_139": {
                "in_channels": {
                    "value": "dim2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(dim1 / 2)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_34": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/helpers.py": {
        "torch": {
            "ge_21": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "le_28": {
                "variable": {
                    "value": "predictions",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_35": {
                "variable": {
                    "value": "(_, true_predicts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_40": {
                "variable": {
                    "value": "(_, true_predicts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/lib/syncbn/batchnorm.py": {
        "torch": {
            "batch_norm_51": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/lib/syncbn/replicate.py": {
        "torch": {}
    },
    "models/lib/syncbn/unittest.py": {
        "torch": {}
    },
    "models/models.py": {
        "torch": {
            "max_15": {
                "variable": {
                    "value": "(_, preds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_17": {
                "variable": {
                    "value": "acc_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid * (preds == label).long()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_18": {
                "variable": {
                    "value": "pixel_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(label >= 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_33": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weighted_softmax",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_45": {
                "variable": {
                    "value": "seg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.functional.upsample(seg, interp_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "interp_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image.size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "has_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_63": {
                "*args": {
                    "value": "conv3x3(in_planes, out_planes, stride)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_334": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_369": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_370": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_371": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_392": {
                "variable": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_399": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fc_dim + len(pool_scales) * 512, 512, kernel_size=3, padding=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_421": {
                "variable": {
                    "value": "ppm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "List",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_456": {
                "variable": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_pooling",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_457": {
                "variable": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_conv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_468": {
                "variable": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_475": {
                "variable": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_477": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(len(fpn_inplanes) * fpn_dim, fpn_dim, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_493": {
                "variable": {
                    "value": "ppm_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "type": "List",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_515": {
                "variable": {
                    "value": "fusion_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fusion_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[fpn_feature_list[0]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_47": {
                "variable": {
                    "value": "aux_seg",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "aux_seg",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nn.functional.upsample(aux_seg, interp_size, mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "interp_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image.size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_338": {
                "variable": {
                    "value": "self.conv_last_deepsup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_395": {
                "variable": {
                    "value": "self.conv_last_deepsup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_396": {
                "variable": {
                    "value": "self.dropout_deepsup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_501": {
                "variable": {
                    "value": "f",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ppm_last_conv(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.upsample(f, size=conv_x.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "conv_x + f",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_400": {
                "in_channels": {
                    "value": "fc_dim + len(pool_scales) * 512",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_403": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_404": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_405": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_479": {
                "in_channels": {
                    "value": "fpn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_class",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ],
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_143": {
                "f": {
                    "value": "weights",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_173": {
                "f": {
                    "value": "weights",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_195": {
                "f": {
                    "value": "weights",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_208": {
                "f": {
                    "value": "weights",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Sequential_386": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(scale)",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_417": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_450": {
                "output_size": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Sequential_451": {
                "*args": {
                    "value": "nn.Conv2d(fc_dim, 512, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_463": {
                "*args": {
                    "value": "nn.Conv2d(fpn_inplane, fpn_dim, kernel_size=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_472": {
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "upsample_511": {
                "input": {
                    "value": "fpn_feature_list[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fpn_feature_list[0].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_387": {
                "output_size": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_388": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_390": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_452": {
                "in_channels": {
                    "value": "fc_dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_454": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_464": {
                "in_channels": {
                    "value": "fpn_inplane",
                    "type": "Name",
                    "possible_values": [
                        [
                            "fpn_inplanes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_466": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_489": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/reconstruction.py": {
        "torch": {
            "Sequential_27": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*enc",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*dec",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "inplances",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_plances",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_21": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_22": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_24": {
                "num_features": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_43": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_54": {
                "in_channels": {
                    "value": "n_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_26": {
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/refine.py": {
        "torch": {
            "Conv2d_7": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "49",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Conv2d_26": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_74": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_115": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_121": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_147": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet38.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "first_dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dilation",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "first_dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dilation",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv_branch2b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "mid_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "branch2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "branch2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b2(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b2(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b2(branch2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_42": {
                "variable": {
                    "value": "branch2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "branch2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b2(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b2(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b2(branch2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv_branch2a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_65": {
                "variable": {
                    "value": "self.dropout_2b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv_branch2b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_69": {
                "variable": {
                    "value": "self.dropout_2b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv_branch2b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "branch2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "branch2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b2(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b2(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b2(branch2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_86": {
                "variable": {
                    "value": "branch2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "branch2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b2(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b2(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b2(branch2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_91": {
                "variable": {
                    "value": "branch2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "branch2",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2a(x)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2a(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b1(branch2)",
                            "Call"
                        ],
                        [
                            "self.bn_branch2b2(branch2)",
                            "Call"
                        ],
                        [
                            "F.relu(branch2)",
                            "Call"
                        ],
                        [
                            "self.dropout_2b2(branch2)",
                            "Call"
                        ],
                        [
                            "self.conv_branch2b2(branch2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.conv1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "variable": {
                    "value": "self.conv6a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "variable": {
                    "value": "self.linear19",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "19",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_188": {
                "variable": {
                    "value": "conv6",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn7(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_189": {
                "variable": {
                    "value": "conv7",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv6a(conv6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v.asnumpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv_branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "variable": {
                    "value": "self.conv_branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "segtransforms.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.asarray(label)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "label.resize(self.size[::-1], Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "label.resize((new_w, new_h), Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "ImageOps.expand(label, border=border, fill=self.ignore_label)",
                            "Call"
                        ],
                        [
                            "label.crop((w_off, h_off, w_off + self.crop_w, h_off + self.crop_h))",
                            "Call"
                        ],
                        [
                            "label.transpose(Image.FLIP_LEFT_RIGHT)",
                            "Call"
                        ],
                        [
                            "label.transpose(Image.FLIP_TOP_BOTTOM)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "test_adabn.py": {
        "torch": {}
    },
    "train_adabn.py": {
        "torch": {}
    },
    "train_pycda.py": {
        "torch": {}
    },
    "train_pycda_spatial.py": {
        "torch": {}
    },
    "train_source_only.py": {
        "torch": {}
    },
    "utils/functional.py": {
        "torch": {
            "from_numpy_48": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pic.transpose((2, 0, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_tensor_108": {
                "obj": {
                    "value": "pic",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pic.mul(255).byte()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_25": {
                "obj": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.from_numpy(pic.transpose((2, 0, 1)))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(pic, np.int32, copy=False))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(pic, np.int16, copy=False))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(np.array(pic, np.float32, copy=False))",
                            "Call"
                        ],
                        [
                            "img.view(pic.size[1], pic.size[0], nchannel)",
                            "Call"
                        ],
                        [
                            "img.transpose(0, 1).transpose(0, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "255 * torch.from_numpy(np.array(pic, np.uint8, copy=False))",
                            "BinOp"
                        ],
                        [
                            "torch.ByteTensor(torch.ByteStorage.from_buffer(pic.tobytes()))",
                            "Call"
                        ],
                        [
                            "np.asarray(img)",
                            "Call"
                        ],
                        [
                            "np.pad(img, ((pad_top, pad_bottom), (pad_left, pad_right), (0, 0)), padding_mode)",
                            "Call"
                        ],
                        [
                            "np.pad(img, ((pad_top, pad_bottom), (pad_left, pad_right)), padding_mode)",
                            "Call"
                        ],
                        [
                            "crop(img, i, j, h, w)",
                            "Call"
                        ],
                        [
                            "resize(img, size, interpolation)",
                            "Call"
                        ],
                        [
                            "vflip(img)",
                            "Call"
                        ],
                        [
                            "hflip(img)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(brightness_factor)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(contrast_factor)",
                            "Call"
                        ],
                        [
                            "enhancer.enhance(saturation_factor)",
                            "Call"
                        ],
                        [
                            "Image.merge('HSV', (h, s, v)).convert(input_mode)",
                            "Call"
                        ],
                        [
                            "img.convert('RGB')",
                            "Call"
                        ],
                        [
                            "img.point(gamma_map)",
                            "Call"
                        ],
                        [
                            "img.convert(input_mode)",
                            "Call"
                        ],
                        [
                            "img.convert('L')",
                            "Call"
                        ],
                        [
                            "img.convert('L')",
                            "Call"
                        ],
                        [
                            "Image.fromarray(np_img, 'RGB')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_58": {
                "ndarray": {
                    "value": "nppic",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros([pic.channels, pic.height, pic.width], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_64": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.int16, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(pic, np.float32, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_68": {
                "ndarray": {
                    "value": "np.array(pic, np.uint8, copy=False)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/loss.py": {
        "torch": {
            "cross_entropy_35": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predict",
                    "type": "Call",
                    "possible_values": [
                        [
                            "predict.transpose(1, 2).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "predict[target_mask.view(n, h, w, 1).repeat(1, 1, 1, c)].view(-1, c)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target[target_mask]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "size_average": {
                    "value": "self.size_average",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/transforms_seg.py": {
        "torch": {
            "from_numpy_247": {
                "variable": {
                    "value": "lbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "lbl",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "np.asarray(lbl)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(lbl)",
                            "Call"
                        ],
                        [
                            "lbl.long()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "save_75": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + 'checkpoint.pth.tar'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_72": {
                "input": {
                    "value": "pred + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_64": {
                "input": {
                    "value": "inv_pred",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-pred + 1.0 + 1e-06",
                            "BinOp"
                        ],
                        [
                            "pred + 1.0 + 1e-06",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_69": {
                "input": {
                    "value": "inv_pred",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "-pred + 1.0 + 1e-06",
                            "BinOp"
                        ],
                        [
                            "pred + 1.0 + 1e-06",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}