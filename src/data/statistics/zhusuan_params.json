{
    "examples/bayesian_neural_nets/bnn_sgmcmc.py": {
        "tensorflow": {
            "tile_22": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[None, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_particles, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_100": {
                "variable": {
                    "value": "assign_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "assign_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[logstds[i].assign(logstd) for (i, logstd) in enumerate(esti_logstds)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_mean_105": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.deterministic('y_mean', tf.squeeze(h, 2))",
                            "Call"
                        ],
                        [
                            "bn['y_mean']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_26": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h, tf.ones(tf.shape(h)[:-1])[..., None]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_random_seed_39": {
                "seed": {
                    "value": "1237",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(x[None, ...], [n_particles, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h, tf.ones(tf.shape(h)[:-1])[..., None]], -1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('imk,ijk->ijm', w, h) / tf.sqrt(tf.cast(tf.shape(h)[2], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_32": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(x[None, ...], [n_particles, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h, tf.ones(tf.shape(h)[:-1])[..., None]], -1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('imk,ijk->ijm', w, h) / tf.sqrt(tf.cast(tf.shape(h)[2], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_24": {
                "shape": {
                    "value": "[n_out, n_in + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_27": {
                "equation": {
                    "value": "imk,ijk->ijm",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.normal('w' + str(i), tf.zeros([n_out, n_in + 1]), logstd=logstds[i], group_ndims=2, n_samples=n_particles)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(x[None, ...], [n_particles, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h, tf.ones(tf.shape(h)[:-1])[..., None]], -1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('imk,ijk->ijm', w, h) / tf.sqrt(tf.cast(tf.shape(h)[2], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_27": {
                "x": {
                    "value": "tf.cast(tf.shape(h)[2], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_68": {
                "initial_value": {
                    "value": "tf.random_uniform([n_particles, n_out, n_in + 1]) * 4 - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_70": {
                "initial_value": {
                    "value": "tf.zeros([n_out, n_in + 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_77": {
                "inputs": {
                    "value": "log_pws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.cond_log_prob(w_names)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_95": {
                "x": {
                    "value": "tf.reduce_mean(w * w, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_28": {
                "x": {
                    "value": "tf.shape(h)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_70": {
                "shape": {
                    "value": "[n_out, n_in + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_77": {
                "input_tensor": {
                    "value": "log_py_xw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.cond_log_prob('y')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "input_tensor": {
                    "value": "w * w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_26": {
                "shape": {
                    "value": "tf.shape(h)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_97": {
                "x": {
                    "value": "tf.reduce_mean(w * w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_28": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(x[None, ...], [n_particles, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h, tf.ones(tf.shape(h)[:-1])[..., None]], -1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('imk,ijk->ijm', w, h) / tf.sqrt(tf.cast(tf.shape(h)[2], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_97": {
                "input_tensor": {
                    "value": "w * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_26": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(x[None, ...], [n_particles, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h, tf.ones(tf.shape(h)[:-1])[..., None]], -1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('imk,ijk->ijm', w, h) / tf.sqrt(tf.cast(tf.shape(h)[2], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/bayesian_neural_nets/bnn_vi.py": {
        "tensorflow": {
            "tile_21": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[None, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_particles, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_32": {
                "variable": {
                    "value": "y_logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "y_logstd",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "variable": {
                    "value": "n_particles",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n_particles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_94": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_99": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.deterministic('y_mean', tf.squeeze(h, 2))",
                            "Call"
                        ],
                        [
                            "lower_bound.bn['y_mean']",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_25": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[h, tf.ones(tf.shape(h)[:-1])[..., None]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "w_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w_mean_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out, n_in + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "w_logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'w_logstd_' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_out, n_in + 1]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_random_seed_54": {
                "seed": {
                    "value": "1237",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(x[None, ...], [n_particles, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h, tf.ones(tf.shape(h)[:-1])[..., None]], -1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('imk,ijk->ijm', w, h) / tf.sqrt(tf.cast(tf.shape(h)[2], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_31": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(x[None, ...], [n_particles, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h, tf.ones(tf.shape(h)[:-1])[..., None]], -1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('imk,ijk->ijm', w, h) / tf.sqrt(tf.cast(tf.shape(h)[2], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_100": {
                "x": {
                    "value": "tf.reduce_mean((y_pred - y) ** 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "input_tensor": {
                    "value": "zs.log_mean_exp(log_py_xw, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_102": {
                "x": {
                    "value": "std_y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.standardize(y_train, y_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_23": {
                "shape": {
                    "value": "[n_out, n_in + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_26": {
                "equation": {
                    "value": "imk,ijk->ijm",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.normal('w' + str(i), tf.zeros([n_out, n_in + 1]), std=1.0, group_ndims=2, n_samples=n_particles)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(x[None, ...], [n_particles, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h, tf.ones(tf.shape(h)[:-1])[..., None]], -1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('imk,ijk->ijm', w, h) / tf.sqrt(tf.cast(tf.shape(h)[2], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_26": {
                "x": {
                    "value": "tf.cast(tf.shape(h)[2], tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_33": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "add_n_86": {
                "inputs": {
                    "value": "log_pws",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.cond_log_prob(w_names)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_100": {
                "input_tensor": {
                    "value": "(y_pred - y) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_27": {
                "x": {
                    "value": "tf.shape(h)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_44": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_47": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "input_tensor": {
                    "value": "log_py_xw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lower_bound.bn.cond_log_prob('y')",
                            "Call"
                        ],
                        [
                            "bn.cond_log_prob('y')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_25": {
                "shape": {
                    "value": "tf.shape(h)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_27": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(x[None, ...], [n_particles, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h, tf.ones(tf.shape(h)[:-1])[..., None]], -1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('imk,ijk->ijm', w, h) / tf.sqrt(tf.cast(tf.shape(h)[2], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_25": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(x[None, ...], [n_particles, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([h, tf.ones(tf.shape(h)[:-1])[..., None]], -1)",
                            "Call"
                        ],
                        [
                            "tf.einsum('imk,ijk->ijm', w, h) / tf.sqrt(tf.cast(tf.shape(h)[2], tf.float32))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/bayesian_neural_nets/variational_dropout.py": {
        "tensorflow": {
            "placeholder_81": {
                "variable": {
                    "value": "n_particles",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n_particles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, n_x)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "tile_90": {
                "variable": {
                    "value": "x_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_particles, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_91": {
                "variable": {
                    "value": "y_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(y, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_particles, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_106": {
                "variable": {
                    "value": "h_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax(y_logit)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_107": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.softmax(y_logit), 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(y_pred, y), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "learning_rate_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdamOptimizer_112": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=())",
                            "Call"
                        ]
                    ]
                },
                "epsilon": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_117": {
                "variable": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_27": {
                "variable": {
                    "value": "eps_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, n_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_48": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.sigmoid(logit_alpha) + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_49": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(std, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_random_seed_57": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_35": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "layers.fully_connected(h * eps, n_out, normalizer_fn=layers.batch_norm, normalizer_params=normalizer_params)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "logit_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "logit_alpha",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_in]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_85": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, n_x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_90": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=(None, n_x))",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_91": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=None)",
                            "Call"
                        ],
                        [
                            "bn.categorical('y', h)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_106": {
                "logits": {
                    "value": "y_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lower_bound.bn['y_logit']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_108": {
                "x": {
                    "value": "tf.equal(y_pred, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "input_tensor": {
                    "value": "lower_bound.sgvb()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_115": {
                "input_tensor": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zs.variational.elbo(model, {'y': y_obs}, variational=variational, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound) / x_train.shape[0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_45": {
                "name_or_scope": {
                    "value": "'layer' + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_49": {
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.nn.sigmoid(logit_alpha) + 1e-10)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(std, 0), [n, 1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_99": {
                "inputs": {
                    "value": "log_pe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.cond_log_prob(e_names)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_108": {
                "x": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(h_pred, 1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=None)",
                            "Call"
                        ],
                        [
                            "bn.categorical('y', h)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_48": {
                "x": {
                    "value": "logit_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('logit_alpha', [n_in])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/gaussian_process/svgp.py": {
        "tensorflow": {
            "cholesky_59": {
                "variable": {
                    "value": "Kzz_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel(z_pos, z_pos)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "noise_level",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "noise_level",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hps.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_70": {
                "variable": {
                    "value": "noise_level",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "noise_level",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('noise_level', shape=[], dtype=hps.dtype, initializer=tf.constant_initializer(0.05))",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(noise_level)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_77": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "z/mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.n_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hps.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_79": {
                "variable": {
                    "value": "z_cov_raw",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "z/cov_raw",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.eye(hps.n_z, dtype=hps.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "x_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hps.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_covariates]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "y_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hps.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "variable": {
                    "value": "z_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "z/pos",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hps.n_z, n_covariates]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hps.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "n_particles_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n_particles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_118": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x_ph)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hps.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "hps.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_146": {
                "variable": {
                    "value": "std_y_train",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "std_y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.standardize(y_train, y_test)",
                            "Call"
                        ],
                        [
                            "tf.cast(std_y_train, hps.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "hps.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_149": {
                "variable": {
                    "value": "y_pred_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "model['y'].distribution.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "shape": {
                    "value": "[hps.n_z]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hps.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_initializer_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_83": {
                "features": {
                    "value": "tf.matrix_diag_part(z_cov_raw)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_133": {
                "input": {
                    "value": "var_fx[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_148": {
                "x": {
                    "value": "std_y_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.standardize(y_train, y_test)",
                            "Call"
                        ],
                        [
                            "tf.cast(std_y_train, hps.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_150": {
                "input_tensor": {
                    "value": "(y_pred_mean - y_ph) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_69": {
                "value": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eye_80": {
                "num_rows": {
                    "value": "hps.n_z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hps.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_115": {
                "minval": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_118": {
                "input": {
                    "value": "x_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(hps.dtype, [None, n_covariates], 'x')",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/gaussian_process/utils.py": {
        "tensorflow": {
            "matmul_70": {
                "variable": {
                    "value": "Kzz_inv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.transpose(Kzz_chol_inv)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "Kzz_chol_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Kzz_chol, tf.eye(n_z))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "Kxziz",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(x, z)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Kzz_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.transpose(Kzz_chol_inv), Kzz_chol_inv)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "mean_fx_given_fz",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fz",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.matrix_transpose(Kxziz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_13": {
                "variable": {
                    "value": "k_raw_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'k_log_scale_{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_covariates]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_16": {
                "variable": {
                    "value": "self.k_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "features": {
                    "value": "k_raw_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('k_log_scale_{}'.format(name), [n_covariates], dtype, initializer=tf.zeros_initializer())",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_64": {
                "variable": {
                    "value": "Kzz_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel(z, z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_77": {
                "variable": {
                    "value": "cov_fx_given_fz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(tf.cholesky(cov_fx_given_fz), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_particles, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_87": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel.Kdiag(x) - tf.reduce_sum(tf.matmul(Kxz, tf.matrix_transpose(Kzz_chol_inv)) ** 2, axis=-1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_35": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, rank - 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "rank - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_36": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, rank - 2)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "rank - 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_37": {
                "variable": {
                    "value": "k_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.k_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] * rank + [-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_38": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.reduce_sum(tf.square(x - y) / k_scale, axis=-1) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_61": {
                "input": {
                    "value": "fz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fz",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_69": {
                "num_rows": {
                    "value": "n_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(z.shape[0])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_70": {
                "a": {
                    "value": "Kzz_chol_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Kzz_chol, tf.eye(n_z))",
                            "Call"
                        ]
                    ]
                }
            },
            "matrix_transpose_73": {
                "a": {
                    "value": "Kxziz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Kxz, Kzz_inv)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, rank - 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assert_greater_equal_28": {
                "x": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape.ndims",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "RBFKernel: rank(x) should be static and >=2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_equal_31": {
                "x": {
                    "value": "rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape.ndims",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.rank(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "RBFKernel: x and y should have the same rank",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_34": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assert_greater_equal(rank, 2, message='RBFKernel: rank(x) should be static and >=2'), tf.assert_equal(rank, tf.rank(y), message='RBFKernel: x and y should have the same rank')]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_47": {
                "shape": {
                    "value": "[tf.shape(x)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_49": {
                "shape": {
                    "value": "[tf.shape(x)[0], tf.shape(x)[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "a": {
                    "value": "Kxziz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Kxz, Kzz_inv)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(Kxz)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "input": {
                    "value": "tf.cholesky(cov_fx_given_fz)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_85": {
                "input_tensor": {
                    "value": "tf.matmul(Kxz, tf.matrix_transpose(Kzz_chol_inv)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_initializer_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rank_32": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(y, rank - 2)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_76": {
                "a": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(x, z)",
                            "Call"
                        ]
                    ]
                }
            },
            "cholesky_78": {
                "input": {
                    "value": "cov_fx_given_fz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(x, x) - tf.matmul(Kxziz, tf.transpose(Kxz))",
                            "BinOp"
                        ],
                        [
                            "tf.tile(tf.expand_dims(tf.cholesky(cov_fx_given_fz), 0), [n_particles, 1, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_85": {
                "a": {
                    "value": "Kxz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel(x, z)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.matrix_transpose(Kzz_chol_inv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_39": {
                "input_tensor": {
                    "value": "tf.square(x - y) / k_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_47": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, rank - 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_49": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, rank - 1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matrix_transpose_86": {
                "a": {
                    "value": "Kzz_chol_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Kzz_chol, tf.eye(n_z))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_39": {
                "x": {
                    "value": "x - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/generative_adversarial_nets/dcgan.py": {
        "tensorflow": {
            "ones_24": {
                "variable": {
                    "value": "z_max",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_26": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.uniform('z', z_min, z_max)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "ngf * 8 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_27": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ngf * 8 * 4 * 4, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lx_z, [-1, 4, 4, ngf * 8])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_28": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ngf * 8 * 4 * 4, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lx_z, [-1, 4, 4, ngf * 8])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ngf * 8 * 4 * 4, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lx_z, [-1, 4, 4, ngf * 8])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4, 4, ngf * 8]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_30": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ngf * 8 * 4 * 4, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lx_z, [-1, 4, 4, ngf * 8])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_32": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ngf * 8 * 4 * 4, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lx_z, [-1, 4, 4, ngf * 8])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_33": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ngf * 8 * 4 * 4, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lx_z, [-1, 4, 4, ngf * 8])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_34": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ngf * 8 * 4 * 4, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lx_z, [-1, 4, 4, ngf * 8])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_36": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ngf * 8 * 4 * 4, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lx_z, [-1, 4, 4, ngf * 8])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_37": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ngf * 8 * 4 * 4, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lx_z, [-1, 4, 4, ngf * 8])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, ngf * 8 * 4 * 4, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lx_z, [-1, 4, 4, ngf * 8])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_45": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d_transpose(lx_z, 3, 5, strides=(2, 2), padding='same', activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, 32, 32, 3], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_47": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 8, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 8 * 4 * 4])",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_48": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 8, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 8 * 4 * 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_49": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 8, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 8 * 4 * 4])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_51": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 8, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 8 * 4 * 4])",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_52": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 8, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 8 * 4 * 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_53": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 8, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 8 * 4 * 4])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ndf * 8",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_55": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 8, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 8 * 4 * 4])",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_56": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 8, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 8 * 4 * 4])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_57": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 8, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 8 * 4 * 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, ndf * 8 * 4 * 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_58": {
                "variable": {
                    "value": "class_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 8, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 8 * 4 * 4])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_75": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_76": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_77": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_121": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_random_seed_63": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "gen_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(x_gen_class_logits), logits=x_gen_class_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_91": {
                "variable": {
                    "value": "gen_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "gen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_103": {
                "variable": {
                    "value": "disc_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "disc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_23": {
                "shape": {
                    "value": "[n, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_122": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_82": {
                "input": {
                    "value": "tower_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[id_ * tf.shape(x)[0] // FLAGS.num_gpus:(id_ + 1) * tf.shape(x)[0] // FLAGS.num_gpus]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_88": {
                "labels": {
                    "value": "tf.ones_like(x_gen_class_logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "x_gen_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(x_gen, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_113": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.ones_like(x_class_logits), logits=x_class_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_99": {
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(labels=tf.zeros_like(x_gen_class_logits), logits=x_gen_class_logits)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "name_scope_114": {
                "name": {
                    "value": "'tower_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_89": {
                "input": {
                    "value": "x_gen_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(x_gen, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_96": {
                "labels": {
                    "value": "tf.ones_like(x_class_logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "x_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(tower_x, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_100": {
                "labels": {
                    "value": "tf.zeros_like(x_gen_class_logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "logits": {
                    "value": "x_gen_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(x_gen, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_80": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d_transpose(lx_z, 3, 5, strides=(2, 2), padding='same', activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, 32, 32, 3], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_81": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d_transpose(lx_z, 3, 5, strides=(2, 2), padding='same', activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, 32, 32, 3], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_97": {
                "input": {
                    "value": "x_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(tower_x, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_101": {
                "input": {
                    "value": "x_gen_class_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(x_gen, is_training)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/generative_adversarial_nets/wasserstein_gan.py": {
        "tensorflow": {
            "ones_24": {
                "variable": {
                    "value": "z_max",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.uniform('z', z_min, z_max)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_transpose_27": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1, 1, 1, z_dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 3, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ngf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_28": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1, 1, 1, z_dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 3, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1, 1, 1, z_dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 3, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_31": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1, 1, 1, z_dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 3, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ngf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_32": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1, 1, 1, z_dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 3, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1, 1, 1, z_dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 3, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_35": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1, 1, 1, z_dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 3, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_37": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1, 1, 1, z_dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 3, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1, 1, 1, z_dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 3, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_transpose_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(z, [-1, 1, 1, z_dim])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 4, 3, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf * 2, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(lx_z, ngf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lx_z, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_shape": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d_transpose(lx_z, 1, 5, strides=(2, 2), padding='same', activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, 28, 28, 1], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_49": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 4 * 3 * 3])",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 4 * 3 * 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_52": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 4 * 3 * 3])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_54": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 4 * 3 * 3])",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 4 * 3 * 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_57": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 4 * 3 * 3])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "ndf * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_58": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 4 * 3 * 3])",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 4 * 3 * 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_61": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 4 * 3 * 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, ndf * 4 * 3 * 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "critic",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(x, ndf, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 2, 5, strides=(2, 2), padding='same', use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lc_x, ndf * 4, 5, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(lc_x, training=is_training, scale=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lc_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lc_x, [-1, ndf * 4 * 3 * 3])",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_82": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_116": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_121": {
                "variable": {
                    "value": "disc_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "disc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_67": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "trainable_variables_93": {
                "variable": {
                    "value": "gen_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "gen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_97": {
                "variable": {
                    "value": "disc_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "disc",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_123": {
                "variable": {
                    "value": "clip_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*[var.assign(tf.clip_by_value(var, -0.01, 0.01)) for var in disc_var_list]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ones_23": {
                "shape": {
                    "value": "[n, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_117": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_122": {
                "control_inputs": {
                    "value": "[infer_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_87": {
                "input": {
                    "value": "tower_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[id_ * tf.shape(x)[0] // FLAGS.num_gpus:(id_ + 1) * tf.shape(x)[0] // FLAGS.num_gpus]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_mean_92": {
                "input_tensor": {
                    "value": "x_gen_critic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "discriminator(x_gen, is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_96": {
                "input_tensor": {
                    "value": "x_critic - x_gen_critic",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_107": {
                "device_name": {
                    "value": "'/gpu:%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_108": {
                "name": {
                    "value": "'tower_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_124": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "-0.01",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_85": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d_transpose(lx_z, 1, 5, strides=(2, 2), padding='same', activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, 28, 28, 1], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_86": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d_transpose(lx_z, 1, 5, strides=(2, 2), padding='same', activation=tf.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, shape=[None, 28, 28, 1], name='x')",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/normalizing_flows/vae_nf.py": {
        "tensorflow": {
            "zeros_22": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_24": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.normal('z', z_mean, std=1.0, group_ndims=1, n_samples=n_particles)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_25": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_26": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_34": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.cast(x, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_35": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_36": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "int"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_37": {
                "variable": {
                    "value": "z_logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "int"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "n_particles",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n_particles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_62": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.random_uniform(tf.shape(x_input)), x_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_79": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound.sgvb()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "variable": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zs.variational.elbo(model, observed={'x': x}, latent={'z': [qz_samples, log_qz]}, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_83": {
                "variable": {
                    "value": "is_log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "zs.is_loglikelihood(model, {'x': x}, {'z': [qz_samples, log_qz]}, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_87": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_random_seed_44": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_34": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.random_uniform(tf.shape(x_input)), x_input), tf.int32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_62": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(x_input))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/probabilistic_matrix_factorization/pmf_hmc.py": {
        "tensorflow": {
            "zeros_22": {
                "variable": {
                    "value": "mu_u",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "mu_v",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[m, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_26": {
                "variable": {
                    "value": "gather_u",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.normal('u', mu_u, std=alpha_u, n_samples=n_particles, group_ndims=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "select_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None], name='select_u')",
                            "Call"
                        ],
                        [
                            "select_u",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_27": {
                "variable": {
                    "value": "gather_v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.normal('v', mu_v, std=alpha_v, n_samples=n_particles, group_ndims=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "select_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None], name='select_v')",
                            "Call"
                        ],
                        [
                            "select_v",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_28": {
                "variable": {
                    "value": "r_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gather_u * gather_v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_85": {
                "variable": {
                    "value": "neighbor_u",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "neighbor_u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "neighbor_v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "neighbor_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "select_u",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "select_u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "select_v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "select_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_106": {
                "variable": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "Us",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "Vs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_110": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "m",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "true_rating",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "true_rating",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "variable": {
                    "value": "pred_rating",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "pred_rating",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.observe(u=U, v=V)['r']",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_mean(pred_rating, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_126": {
                "variable": {
                    "value": "target_u",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(Us, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "neighbor_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None], name='neighbor_u')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_127": {
                "variable": {
                    "value": "target_v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(Vs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "neighbor_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None], name='neighbor_v')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_129": {
                "variable": {
                    "value": "candidate_sample_u",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cand_sample_chunk_u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[K, chunk_size, D]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_132": {
                "variable": {
                    "value": "candidate_sample_v",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "cand_sample_chunk_v",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[K, chunk_size, D]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_155": {
                "variable": {
                    "value": "candidate_idx_u",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[chunk_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cand_u_chunk",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_157": {
                "variable": {
                    "value": "candidate_idx_v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[chunk_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "cand_v_chunk",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_159": {
                "variable": {
                    "value": "candidate_u",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(Us, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "candidate_idx_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[chunk_size], name='cand_u_chunk')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_160": {
                "variable": {
                    "value": "candidate_v",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "V",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(Vs, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "candidate_idx_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[chunk_size], name='cand_v_chunk')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_162": {
                "variable": {
                    "value": "trans_cand_U",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "candidate_sample_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('cand_sample_chunk_u', shape=[K, chunk_size, D], initializer=tf.random_normal_initializer(0, 0.1), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "candidate_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(U, candidate_idx_u, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_163": {
                "variable": {
                    "value": "trans_cand_V",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "candidate_sample_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('cand_sample_chunk_v', shape=[K, chunk_size, D], initializer=tf.random_normal_initializer(0, 0.1), trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "candidate_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(V, candidate_idx_v, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_65": {
                "seed": {
                    "value": "1237",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_97": {
                "variable": {
                    "value": "ui",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'u_chunk_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[K, chunk_size, D]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_102": {
                "variable": {
                    "value": "vi",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'v_chunk_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[K, chunk_size, D]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_139": {
                "variable": {
                    "value": "log_pu",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_pu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.cond_log_prob(['u', 'v'])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_pu, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_140": {
                "variable": {
                    "value": "log_pv",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_pv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.cond_log_prob(['u', 'v'])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_pv, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_141": {
                "variable": {
                    "value": "log_pr",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_pr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.cond_log_prob('r')",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_pr, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_29": {
                "x": {
                    "value": "r_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(gather_u * gather_v, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_30": {
                "x": {
                    "value": "r_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(gather_u * gather_v, axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_119": {
                "x": {
                    "value": "tf.reduce_mean(tf.square(pred_rating - normalized_rating))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_120": {
                "input_tensor": {
                    "value": "tf.square(pred_rating - normalized_rating)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_131": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_134": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "assign_167": {
                "ref": {
                    "value": "Us[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "candidate_sample_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('cand_sample_chunk_u', shape=[K, chunk_size, D], initializer=tf.random_normal_initializer(0, 0.1), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_170": {
                "ref": {
                    "value": "Vs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "candidate_sample_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('cand_sample_chunk_v', shape=[K, chunk_size, D], initializer=tf.random_normal_initializer(0, 0.1), trainable=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "random_normal_initializer_98": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_103": {
                "mean": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_120": {
                "x": {
                    "value": "pred_rating - normalized_rating",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/semi_supervised_vae/vae_ssl.py": {
        "tensorflow": {
            "zeros_22": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_24": {
                "variable": {
                    "value": "h_from_z",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.normal('z', z_mean, std=1.0, group_ndims=1, n_samples=n_particles)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "y_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_27": {
                "variable": {
                    "value": "h_from_y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.cast(y, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h_from_z + h_from_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_29": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_30": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_38": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.cast(tf.concat([x, y], -1), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_40": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_41": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_42": {
                "variable": {
                    "value": "z_logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_50": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.cast(x, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_51": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_52": {
                "variable": {
                    "value": "y_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_83": {
                "variable": {
                    "value": "n_particles",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n_particles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "x_labeled_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_l",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_88": {
                "variable": {
                    "value": "x_labeled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.random_uniform(tf.shape(x_labeled_ph)), x_labeled_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "y_labeled_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_class]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_l",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_94": {
                "variable": {
                    "value": "labeled_lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "zs.variational.elbo(model, observed={'x': x_labeled, 'y': y_labeled_ph}, variational=variational, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_103": {
                "variable": {
                    "value": "x_unlabeled_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_105": {
                "variable": {
                    "value": "x_unlabeled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.random_uniform(tf.shape(x_unlabeled_ph)), x_unlabeled_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_108": {
                "variable": {
                    "value": "y_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "y_u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(y_diag[None, ...], [n, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "variable": {
                    "value": "x_u",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(x_unlabeled[:, None, ...], [1, n_class, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, x_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "lb_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lb_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zs.variational.elbo(model, observed={'x': x_u, 'y': y_u}, variational=variational, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lb_z, [-1, n_class])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_122": {
                "variable": {
                    "value": "log_qy_u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "qy_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(qy_logits_u) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "qy_u / tf.reduce_sum(qy_u, 1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "unlabeled_lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(qy_u * (lb_z - log_qy_u), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_128": {
                "variable": {
                    "value": "qy_l",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "qy_logits_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qy_x(x_labeled, n_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_129": {
                "variable": {
                    "value": "pred_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qy_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(qy_logits_l)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_130": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(pred_y, tf.argmax(y_labeled_ph, 1)), tf.float32) / tf.cast(tf.shape(x_labeled)[0], tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0003",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_random_seed_57": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_121": {
                "input_tensor": {
                    "value": "qy_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(qy_logits_u) + 1e-08",
                            "BinOp"
                        ],
                        [
                            "qy_u / tf.reduce_sum(qy_u, 1, keepdims=True)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_27": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.onehot_categorical('y', y_logits)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_38": {
                "x": {
                    "value": "tf.concat([x, y], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_50": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_89": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(x_labeled_ph))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_labeled_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x_l')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_106": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(x_unlabeled_ph))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_unlabeled_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x_u')",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_109": {
                "input": {
                    "value": "y_diag[None, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_110": {
                "input": {
                    "value": "x_unlabeled[:, None, ...]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, n_class, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_120": {
                "logits": {
                    "value": "qy_logits_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qy_x(x_unlabeled_ph, n_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_124": {
                "input_tensor": {
                    "value": "qy_u * (lb_z - log_qy_u)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_135": {
                "input_tensor": {
                    "value": "log_qy_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "onehot_cat.log_prob(y_labeled_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_38": {
                "values": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_131": {
                "x": {
                    "value": "tf.equal(pred_y, tf.argmax(y_labeled_ph, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_132": {
                "x": {
                    "value": "tf.shape(x_labeled)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_89": {
                "input": {
                    "value": "x_labeled_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x_l')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_106": {
                "input": {
                    "value": "x_unlabeled_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x_u')",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_131": {
                "x": {
                    "value": "pred_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(qy_l, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.argmax(y_labeled_ph, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_131": {
                "input": {
                    "value": "y_labeled_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None, n_class], name='y_l')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_132": {
                "input": {
                    "value": "x_labeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.load_mnist_semi_supervised(data_path, one_hot=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.less(tf.random_uniform(tf.shape(x_labeled_ph)), x_labeled_ph), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/semi_supervised_vae/vae_ssl_adaptive_is.py": {
        "tensorflow": {
            "zeros_22": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_24": {
                "variable": {
                    "value": "h_from_z",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.normal('z', z_mean, std=1.0, group_ndims=1, n_samples=n_particles)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "y_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, n_class]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_27": {
                "variable": {
                    "value": "h_from_y",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.cast(y, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_28": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h_from_z + h_from_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dense_29": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_30": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_37": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.cast(tf.concat([x, y], -1), tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_39": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_40": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_41": {
                "variable": {
                    "value": "z_logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_47": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.cast(x, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_48": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_49": {
                "variable": {
                    "value": "y_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(h_from_z + h_from_y)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(tf.concat([x, y], -1), tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ],
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "n_particles",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n_particles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "x_labeled_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_l",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_94": {
                "variable": {
                    "value": "x_labeled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.random_uniform(tf.shape(x_labeled_ph)), x_labeled_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_97": {
                "variable": {
                    "value": "y_labeled_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_class]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "y_l",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_106": {
                "variable": {
                    "value": "labeled_q_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "labeled_klpq_obj.importance()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "variable": {
                    "value": "labeled_lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "zs.variational.importance_weighted_objective(model, observed={'x': x_labeled, 'y': y_labeled_ph}, variational=proposal, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "x_unlabeled_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x_u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_117": {
                "variable": {
                    "value": "x_unlabeled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.random_uniform(tf.shape(x_unlabeled_ph)), x_unlabeled_ph)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "unlabeled_q_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "unlabeled_klpq_obj.importance()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "variable": {
                    "value": "unlabeled_lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "zs.variational.importance_weighted_objective(model, observed={'x': x_unlabeled}, variational=proposal, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_138": {
                "variable": {
                    "value": "qy_l",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "qy_logits_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qy_x(x_labeled, n_class)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_139": {
                "variable": {
                    "value": "pred_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "qy_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(qy_logits_l)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_140": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.equal(pred_y, tf.argmax(y_labeled_ph, 1)), tf.float32) / tf.cast(tf.shape(x_labeled)[0], tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdamOptimizer_151": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0003",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_152": {
                "variable": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "gen",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_72": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_27": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.onehot_categorical('y', y_logits)",
                            "Call"
                        ],
                        [
                            "bn.onehot_categorical('y', y_logits)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_37": {
                "x": {
                    "value": "tf.concat([x, y], -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_47": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_95": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(x_labeled_ph))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_labeled_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x_l')",
                            "Call"
                        ]
                    ]
                }
            },
            "less_118": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(x_unlabeled_ph))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_unlabeled_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x_u')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_145": {
                "input_tensor": {
                    "value": "log_qy_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "onehot_cat.log_prob(y_labeled_ph)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_155": {
                "scope": {
                    "value": "qy_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_156": {
                "scope": {
                    "value": "qz_xy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_37": {
                "values": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_141": {
                "x": {
                    "value": "tf.equal(pred_y, tf.argmax(y_labeled_ph, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_142": {
                "x": {
                    "value": "tf.shape(x_labeled)[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_95": {
                "input": {
                    "value": "x_labeled_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x_l')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_118": {
                "input": {
                    "value": "x_unlabeled_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x_u')",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_141": {
                "x": {
                    "value": "pred_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.argmax(qy_l, 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.argmax(y_labeled_ph, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_141": {
                "input": {
                    "value": "y_labeled_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, shape=[None, n_class], name='y_l')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_142": {
                "input": {
                    "value": "x_labeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.load_mnist_semi_supervised(data_path, one_hot=True)",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.less(tf.random_uniform(tf.shape(x_labeled_ph)), x_labeled_ph), tf.int32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/sigmoid_belief_nets/sbn_adaptive_is.py": {
        "tensorflow": {
            "zeros_22": {
                "variable": {
                    "value": "h3_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, h_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_25": {
                "variable": {
                    "value": "h2_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bernoulli('h3', h3_logits, group_ndims=1, n_samples=n_particles, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_27": {
                "variable": {
                    "value": "h1_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bernoulli('h2', h2_logits, group_ndims=1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "bn.bernoulli('h2', h2_logits, group_ndims=1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_29": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bernoulli('h1', h1_logits, group_ndims=1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "bn.bernoulli('h1', h1_logits, group_ndims=1, n_samples=n_particles, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_37": {
                "variable": {
                    "value": "h1_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.cast(x, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_40": {
                "variable": {
                    "value": "h2_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bernoulli('h1', h1_logits, group_ndims=1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "bn.bernoulli('h1', h1_logits, group_ndims=1, n_samples=n_particles, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_42": {
                "variable": {
                    "value": "h3_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bernoulli('h2', h2_logits, group_ndims=1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "bn.bernoulli('h2', h2_logits, group_ndims=1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "n_particles",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n_particles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.random_uniform(tf.shape(x_input)), x_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "zs.variational.importance_weighted_objective(model, observed={'x': x}, variational=proposal, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_77": {
                "variable": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "sbn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_83": {
                "variable": {
                    "value": "klpq_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "klpq_obj.importance()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_84": {
                "variable": {
                    "value": "proposal_params",
                    "type": "variable",
                    "possible_values": []
                },
                "scope": {
                    "value": "proposal",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_48": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_37": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.random_uniform(tf.shape(x_input)), x_input), tf.int32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_65": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(x_input))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/sigmoid_belief_nets/sbn_vimco.py": {
        "tensorflow": {
            "zeros_22": {
                "variable": {
                    "value": "h3_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, h_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_25": {
                "variable": {
                    "value": "h2_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bernoulli('h3', h3_logits, group_ndims=1, n_samples=n_particles, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_27": {
                "variable": {
                    "value": "h1_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bernoulli('h2', h2_logits, group_ndims=1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "bn.bernoulli('h2', h2_logits, group_ndims=1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_29": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bernoulli('h1', h1_logits, group_ndims=1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "bn.bernoulli('h1', h1_logits, group_ndims=1, n_samples=n_particles, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_37": {
                "variable": {
                    "value": "h1_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.cast(x, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_40": {
                "variable": {
                    "value": "h2_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bernoulli('h1', h1_logits, group_ndims=1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "bn.bernoulli('h1', h1_logits, group_ndims=1, n_samples=n_particles, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_42": {
                "variable": {
                    "value": "h3_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bernoulli('h2', h2_logits, group_ndims=1, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "bn.bernoulli('h2', h2_logits, group_ndims=1, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "h_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "200",
                            "int"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ],
                        [
                            "h_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "n_particles",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n_particles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.random_uniform(tf.shape(x_input)), x_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound.vimco()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zs.variational.importance_weighted_objective(model, observed={'x': x}, variational=variational, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_77": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_random_seed_48": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_37": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.random_uniform(tf.shape(x_input)), x_input), tf.int32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_65": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(x_input))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/topic_models/lntm_mcem.py": {
        "tensorflow": {
            "tile_36": {
                "variable": {
                    "value": "eta_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(eta_mean, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[n_docs, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_39": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([n_chains, batch_size, n_topics]), name='eta')",
                            "Call"
                        ],
                        [
                            "bn.normal('eta', eta_mean, logstd=eta_logstd, n_samples=n_chains, group_ndims=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([n_topics, n_vocab]), name='beta')",
                            "Call"
                        ],
                        [
                            "bn.normal('beta', tf.zeros([n_topics, n_vocab]), logstd=log_delta, group_ndims=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_44": {
                "variable": {
                    "value": "doc_word",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(theta, [-1, n_topics])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(beta)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "doc_word",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "doc_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(theta, [-1, n_topics]), phi)",
                            "Call"
                        ],
                        [
                            "tf.reshape(doc_word, [n_chains, n_docs, n_vocab])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_chains, n_docs, n_vocab]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, n_vocab]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "eta_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_topics]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "eta_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "eta_logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_topics]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "eta_logstd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_90": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_chains, batch_size, n_topics])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "eta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_91": {
                "variable": {
                    "value": "eta_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_chains, batch_size, n_topics]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "eta_ph",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_93": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_topics, n_vocab])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_94": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([n_topics, n_vocab]), name='beta')",
                            "Call"
                        ],
                        [
                            "bn.normal('beta', tf.zeros([n_topics, n_vocab]), logstd=log_delta, group_ndims=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "assign_95": {
                "variable": {
                    "value": "init_eta_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([n_chains, batch_size, n_topics]), name='eta')",
                            "Call"
                        ],
                        [
                            "bn.normal('eta', eta_mean, logstd=eta_logstd, n_samples=n_chains, group_ndims=1)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "eta_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[n_chains, batch_size, n_topics], name='eta_ph')",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_109": {
                "variable": {
                    "value": "log_p_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_p_beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.cond_log_prob(['beta', 'x'])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(log_p_beta)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_110": {
                "variable": {
                    "value": "log_px",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_mean(log_px, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "learning_rate_ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[], name='lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_124": {
                "variable": {
                    "value": "_x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_docs_test, n_vocab]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_125": {
                "variable": {
                    "value": "_eta",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([_n_chains, n_docs_test, n_topics])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "eta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_52": {
                "seed": {
                    "value": "1237",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_36": {
                "input": {
                    "value": "eta_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[n_topics], name='eta_mean')",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(eta_mean, 0), [n_docs, 1])",
                            "Call"
                        ],
                        [
                            "eta_mean",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "shape": {
                    "value": "[n_topics, n_vocab]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_44": {
                "tensor": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(eta)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, n_topics]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_46": {
                "x": {
                    "value": "doc_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(theta, [-1, n_topics]), phi)",
                            "Call"
                        ],
                        [
                            "tf.reshape(doc_word, [n_chains, n_docs, n_vocab])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_90": {
                "shape": {
                    "value": "[n_chains, batch_size, n_topics]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_93": {
                "shape": {
                    "value": "[n_topics, n_vocab]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "input_tensor": {
                    "value": "log_px",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.cond_log_prob(['beta', 'x'])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.reduce_mean(log_px, axis=0))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_125": {
                "shape": {
                    "value": "[_n_chains, n_docs_test, n_topics]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_145": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/toy_examples/gaussian.py": {
        "tensorflow": {
            "placeholder_40": {
                "variable": {
                    "value": "adapt_step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "adapt_step_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "adapt_mass",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "adapt_mass",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_chains, n_x])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_24": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_18": {
                "shape": {
                    "value": "[n_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "shape": {
                    "value": "[n_chains, n_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/toy_examples/mixture_sgnht.py": {
        "tensorflow": {
            "Variable_39": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([n_chains]) * 10 - 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_16": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_34": {
                "variable": {
                    "value": "amax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * ((x - mu1) / stdev) ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "a2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-0.5 * ((x - mu2) / stdev) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_35": {
                "x": {
                    "value": "tf.exp(a1 - amax) + tf.exp(a2 - amax)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_35": {
                "x": {
                    "value": "a2 - amax",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "examples/toy_examples/toy2d_intractable.py": {
        "tensorflow": {
            "placeholder_35": {
                "variable": {
                    "value": "n_particles",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_43": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_83": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "variational.get(['z1_mean', 'z2_mean'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_84": {
                "variable": {
                    "value": "z_logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "variational.get(['z1_logstd', 'z2_logstd'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_27": {
                "initial_value": {
                    "value": "-2.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_28": {
                "initial_value": {
                    "value": "-5.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/utils/multi_gpu.py": {
        "tensorflow": {
            "DEFINE_integer_12": {
                "name": {
                    "value": "num_gpus",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "How many GPUs to use",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_19": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "log_device_placement": {
                    "value": "FLAGS.log_device_placement",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_21": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, log_device_placement=FLAGS.log_device_placement)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_51": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_52": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(grads, 0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(grad, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_45": {
                "variable": {
                    "value": "expanded_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_and_vars",
                            "variable"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_74": {
                "inputs": {
                    "value": "quantities",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*tower_losses)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/utils/optimizers.py": {
        "tensorflow": {
            "convert_to_tensor_31": {
                "variable": {
                    "value": "self._lr_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_32": {
                "variable": {
                    "value": "self._beta1_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_33": {
                "variable": {
                    "value": "self._beta2_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self._beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_42": {
                "variable": {
                    "value": "lr_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._lr_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_43": {
                "variable": {
                    "value": "beta1_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._beta1_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_44": {
                "variable": {
                    "value": "beta2_t",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._beta2_t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "var.dtype.base_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_sub_57": {
                "variable": {
                    "value": "var_update",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var",
                            "Method Argument"
                        ],
                        [
                            "var",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "lr_t * g_t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_58": {
                "*inputs": {
                    "value": "*[var_update, m_t, v_t]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "maximum_54": {
                "x": {
                    "value": "beta2_t * m + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_54": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Method Argument"
                        ],
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "examples/utils/utils.py": {
        "tensorflow": {
            "stack_88": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batchsize, out_shape[0], out_shape[1], out_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_93": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[kernel_size[0], kernel_size[1], out_shape[2], in_channels]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "weights_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.xavier_initializer()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_96": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', filter_shape, initializer=weights_initializer)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batchsize, out_shape[0], out_shape[1], out_shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride[0], stride[1], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_85": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "Conv2d_transpose",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_102": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[out_shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bias_add_104": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(inputs, w, output_shape=output_shape, strides=[1, stride[0], stride[1], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(outputs, biases)",
                            "Call"
                        ],
                        [
                            "normalizer_fn(outputs, **normalizer_params)",
                            "Call"
                        ],
                        [
                            "activation_fn(outputs)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [out_shape[2]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_103": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "examples/variational_autoencoders/bernoulli_latent_vae.py": {
        "tensorflow": {
            "zeros_22": {
                "variable": {
                    "value": "z_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_25": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.bernoulli('z', z_logits, group_ndims=1, n_samples=n_particles, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_26": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_27": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_28": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_29": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_30": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_31": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_39": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.cast(x, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_40": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_41": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_42": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_43": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.bool, shape=[], name='is_training')",
                            "Call"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ],
                        [
                            "is_training",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_44": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_45": {
                "variable": {
                    "value": "z_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, use_bias=False)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(h, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(h)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "int"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_52": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.cast(x, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_53": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 100, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(lc_x, 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(lc_x, -1)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_54": {
                "variable": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lc_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 100, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(lc_x, 1)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(lc_x, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_71": {
                "variable": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_72": {
                "variable": {
                    "value": "n_particles",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n_particles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_73": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_74": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.random_uniform(tf.shape(x_input)), x_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_80": {
                "variable": {
                    "value": "cx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "baseline_net(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_85": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cost + baseline_cost",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "variable": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zs.variational.elbo(model, {'x': x}, variational=variational, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "is_log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "zs.is_loglikelihood(model, {'x': x}, proposal=variational, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_92": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "get_collection_93": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_39": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.random_uniform(tf.shape(x_input)), x_input), tf.int32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_52": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.random_uniform(tf.shape(x_input)), x_input), tf.int32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_74": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(x_input))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_76": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.random_uniform(tf.shape(x_input)), x_input), tf.int32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_94": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_74": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/variational_autoencoders/iwae.py": {
        "tensorflow": {
            "zeros_26": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_28": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.normal('z', z_mean, std=1.0, group_ndims=1, n_samples=n_particles)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_29": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_30": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_38": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.cast(x, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_39": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_40": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "int"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_41": {
                "variable": {
                    "value": "z_logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "int"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "n_particles",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n_particles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_64": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.random_uniform(tf.shape(x_input)), x_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_67": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_74": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound.sgvb()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_75": {
                "variable": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zs.variational.importance_weighted_objective(model, {'x': x}, variational=variational, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_77": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_random_seed_48": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_38": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.random_uniform(tf.shape(x_input)), x_input), tf.int32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_65": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(x_input))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_65": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/variational_autoencoders/vae.py": {
        "tensorflow": {
            "zeros_22": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_24": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.normal('z', z_mean, std=1.0, group_ndims=1, n_samples=n_particles)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_25": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_26": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "x_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_train.shape[1]",
                            "Subscript"
                        ],
                        [
                            "x_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_35": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.cast(x, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_36": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_37": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "int"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_38": {
                "variable": {
                    "value": "z_logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(z, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(tf.cast(x, tf.float32), 500, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(h, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "40",
                            "int"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "n_particles",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n_particles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(tf.random_uniform(tf.shape(x_input)), x_input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_60": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_67": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound.sgvb()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "variable": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zs.variational.elbo(model, {'x': x}, variational=variational, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_71": {
                "variable": {
                    "value": "is_log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "zs.is_loglikelihood(model, {'x': x}, proposal=variational, axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_74": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_78": {
                "variable": {
                    "value": "x_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.observe()['x_mean']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_27": {
                "x": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(h, x_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_35": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.less(tf.random_uniform(tf.shape(x_input)), x_input), tf.int32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_58": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(x_input))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_58": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim], name='x')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/variational_autoencoders/vae_conv.py": {
        "tensorflow": {
            "relu_35": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_transpose(input_, out_shape, kernel_size=(3, 3), stride=(1, 1))",
                            "Call"
                        ],
                        [
                            "conv2d_transpose(lx_z, out_shape, kernel_size=(3, 3), stride=(1, 1), activation_fn=None)",
                            "Call"
                        ],
                        [
                            "lx_z + residual",
                            "BinOp"
                        ],
                        [
                            "conv2d_transpose(input_, input_.get_shape().as_list()[1:], kernel_size=(3, 3), stride=(1, 1))",
                            "Call"
                        ],
                        [
                            "conv2d_transpose(lx_z, out_shape, kernel_size=(3, 3), stride=(2, 2), activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 7 * 7 * nf * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lx_z, [-1, 7, 7, nf * 2])",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [7, 7, nf * 2])",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [14, 14, nf * 2], resize=True)",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [14, 14, nf * 2])",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [28, 28, nf], resize=True)",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [28, 28, nf])",
                            "Call"
                        ],
                        [
                            "conv2d_transpose(lx_z, [28, 28, 1], kernel_size=(3, 3), stride=(1, 1), activation_fn=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_52": {
                "variable": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "lz_x + residual",
                            "BinOp"
                        ],
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, strides=(2, 2), padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lz_x)",
                            "Call"
                        ],
                        [
                            "2 * tf.cast(x, tf.float32) - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(lz_x, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, nf, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(lz_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(lz_x, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_61": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.normal('z', z_mean, std=1.0, group_ndims=1, n_samples=n_particles)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "7 * 7 * nf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_62": {
                "variable": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_transpose(input_, out_shape, kernel_size=(3, 3), stride=(1, 1))",
                            "Call"
                        ],
                        [
                            "conv2d_transpose(lx_z, out_shape, kernel_size=(3, 3), stride=(1, 1), activation_fn=None)",
                            "Call"
                        ],
                        [
                            "lx_z + residual",
                            "BinOp"
                        ],
                        [
                            "conv2d_transpose(input_, input_.get_shape().as_list()[1:], kernel_size=(3, 3), stride=(1, 1))",
                            "Call"
                        ],
                        [
                            "conv2d_transpose(lx_z, out_shape, kernel_size=(3, 3), stride=(2, 2), activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 7 * 7 * nf * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lx_z, [-1, 7, 7, nf * 2])",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [7, 7, nf * 2])",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [14, 14, nf * 2], resize=True)",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [14, 14, nf * 2])",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [28, 28, nf], resize=True)",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [28, 28, nf])",
                            "Call"
                        ],
                        [
                            "conv2d_transpose(lx_z, [28, 28, 1], kernel_size=(3, 3), stride=(1, 1), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7, 7, nf * 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lx_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv2d_transpose(input_, out_shape, kernel_size=(3, 3), stride=(1, 1))",
                            "Call"
                        ],
                        [
                            "conv2d_transpose(lx_z, out_shape, kernel_size=(3, 3), stride=(1, 1), activation_fn=None)",
                            "Call"
                        ],
                        [
                            "lx_z + residual",
                            "BinOp"
                        ],
                        [
                            "conv2d_transpose(input_, input_.get_shape().as_list()[1:], kernel_size=(3, 3), stride=(1, 1))",
                            "Call"
                        ],
                        [
                            "conv2d_transpose(lx_z, out_shape, kernel_size=(3, 3), stride=(2, 2), activation_fn=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lx_z)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(z, 7 * 7 * nf * 2, activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.reshape(lx_z, [-1, 7, 7, nf * 2])",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [7, 7, nf * 2])",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [14, 14, nf * 2], resize=True)",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [14, 14, nf * 2])",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [28, 28, nf], resize=True)",
                            "Call"
                        ],
                        [
                            "deconv_resnet_block(lx_z, [28, 28, nf])",
                            "Call"
                        ],
                        [
                            "conv2d_transpose(lx_z, [28, 28, 1], kernel_size=(3, 3), stride=(1, 1), activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n_particles, -1, x_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "lz_x + residual",
                            "BinOp"
                        ],
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, strides=(2, 2), padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lz_x)",
                            "Call"
                        ],
                        [
                            "2 * tf.cast(x, tf.float32) - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(lz_x, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, nf, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(lz_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(lz_x, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_81": {
                "variable": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "lz_x + residual",
                            "BinOp"
                        ],
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, strides=(2, 2), padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lz_x)",
                            "Call"
                        ],
                        [
                            "2 * tf.cast(x, tf.float32) - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(lz_x, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, nf, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(lz_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(lz_x, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ],
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_87": {
                "variable": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "lz_x + residual",
                            "BinOp"
                        ],
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, strides=(2, 2), padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lz_x)",
                            "Call"
                        ],
                        [
                            "2 * tf.cast(x, tf.float32) - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(lz_x, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, nf, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(lz_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(lz_x, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_88": {
                "variable": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "lz_x + residual",
                            "BinOp"
                        ],
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, strides=(2, 2), padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lz_x)",
                            "Call"
                        ],
                        [
                            "2 * tf.cast(x, tf.float32) - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(lz_x, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, nf, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(lz_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(lz_x, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "500",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_89": {
                "variable": {
                    "value": "z_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "lz_x + residual",
                            "BinOp"
                        ],
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, strides=(2, 2), padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lz_x)",
                            "Call"
                        ],
                        [
                            "2 * tf.cast(x, tf.float32) - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(lz_x, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, nf, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(lz_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(lz_x, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_90": {
                "variable": {
                    "value": "z_logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "lz_x + residual",
                            "BinOp"
                        ],
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, strides=(2, 2), padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lz_x)",
                            "Call"
                        ],
                        [
                            "2 * tf.cast(x, tf.float32) - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(lz_x, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, nf, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(lz_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(lz_x, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "z_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ],
                        [
                            "z_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "n_particles",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n_particles",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.random_uniform(tf.shape(x_input)) <= x_input",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "n",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_122": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound.sgvb()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_123": {
                "variable": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zs.variational.elbo(model, {'x': x}, variational=variational, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "variable": {
                    "value": "x_gen",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "model.observe()['x_mean']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_41": {
                "variable": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_43": {
                "variable": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "lz_x + residual",
                            "BinOp"
                        ],
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, strides=(2, 2), padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lz_x)",
                            "Call"
                        ],
                        [
                            "2 * tf.cast(x, tf.float32) - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(lz_x, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, nf, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(lz_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(lz_x, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_46": {
                "variable": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_48": {
                "variable": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lz_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "lz_x + residual",
                            "BinOp"
                        ],
                        [
                            "tf.layers.conv2d(input_, out_channel, 3, strides=(2, 2), padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, out_channel, 3, padding='same')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(lz_x)",
                            "Call"
                        ],
                        [
                            "2 * tf.cast(x, tf.float32) - 1",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(lz_x, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(lz_x, nf, 3, padding='same', activation=tf.nn.relu)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2, resize=True)",
                            "Call"
                        ],
                        [
                            "conv_resnet_block(lz_x, nf * 2)",
                            "Call"
                        ],
                        [
                            "tf.layers.flatten(lz_x)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(lz_x, 500, activation=tf.nn.relu)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_49": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_",
                            "Method Argument"
                        ],
                        [
                            "input_",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channel",
                            "Method Argument"
                        ]
                    ]
                },
                "strides": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_random_seed_97": {
                "seed": {
                    "value": "1234",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_71": {
                "x": {
                    "value": "x_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(lx_z, [n_particles, -1, x_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_79": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.random_uniform(tf.shape(x_input)) <= x_input, tf.int32)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_114": {
                "input": {
                    "value": "x_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, shape=[None, x_dim])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_base.py": {
        "tensorflow": {
            "constant_30": {
                "value": {
                    "value": "[5]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_35": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "constant_38": {
                "value": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_43": {
                "dims": {
                    "value": "[None, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_46": {
                "shape": {
                    "value": "[n_samples, 2, 3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_49": {
                "input_tensor": {
                    "value": "tf.zeros_like(given)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_prod_52": {
                "input_tensor": {
                    "value": "tf.ones_like(given)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_124": {
                "variable": {
                    "value": "given_1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_132": {
                "variable": {
                    "value": "given_2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_136": {
                "variable": {
                    "value": "given_3",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_163": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_34": {
                "dims": {
                    "value": "[5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_42": {
                "dims": {
                    "value": "[2, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_49": {
                "input": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(given_dtype, None)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(given_dtype, None)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_189": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "given_dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ones_78": {
                "shape": {
                    "value": "[2, 3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_80": {
                "shape": {
                    "value": "[2, 3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_176": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ones_130": {
                "shape": {
                    "value": "[3, 3, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_multivariate.py": {
        "tensorflow": {
            "constant_124": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 * np.random.normal(size=(10, 11, 2)).astype('d')",
                            "BinOp"
                        ],
                        [
                            "10 * np.random.normal(size=(10, 11, 3)).astype('d')",
                            "BinOp"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ],
                        [
                            "tf.constant(mean)",
                            "Call"
                        ],
                        [
                            "10 * np.random.normal(size=(10, 11, 2, 3)).astype('d')",
                            "BinOp"
                        ],
                        [
                            "10 * np.random.normal(size=(10, 11, 2, 3)).astype('d')",
                            "BinOp"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ],
                        [
                            "tf.constant(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_125": {
                "variable": {
                    "value": "cov_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "cov_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(cov)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ],
                        [
                            "tf.constant(cov_chol)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_128": {
                "variable": {
                    "value": "(mean_grads, cov_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mean, cov_chol]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_134": {
                "variable": {
                    "value": "(mean_grads, cov_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mean, cov_chol]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_180": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_294": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_387": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_481": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_564": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_565": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_618": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "constant_680": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_681": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_684": {
                "variable": {
                    "value": "(t_grads, logits_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[temperature, logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_690": {
                "variable": {
                    "value": "(t_grads, logits_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[temperature, logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_695": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_696": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_697": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_702": {
                "variable": {
                    "value": "(t_path_grads, logits_path_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[temperature, logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_704": {
                "variable": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_719": {
                "variable": {
                    "value": "(t_path_grads, logits_path_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[temperature, logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_725": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_726": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_727": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_779": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "constant_841": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_842": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_845": {
                "variable": {
                    "value": "(t_grads, logits_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[temperature, logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_851": {
                "variable": {
                    "value": "(t_grads, logits_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[temperature, logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_856": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_857": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_858": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_863": {
                "variable": {
                    "value": "(t_path_grads, logits_path_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[temperature, logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_865": {
                "variable": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_880": {
                "variable": {
                    "value": "(t_path_grads, logits_path_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[temperature, logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_886": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_887": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_888": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "constant_1053": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10 * np.random.normal(size=(10, 11, 2)).astype('d')",
                            "BinOp"
                        ],
                        [
                            "10 * np.random.normal(size=(10, 11, 3)).astype('d')",
                            "BinOp"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ],
                        [
                            "tf.constant(mean)",
                            "Call"
                        ],
                        [
                            "10 * np.random.normal(size=(10, 11, 2, 3)).astype('d')",
                            "BinOp"
                        ],
                        [
                            "10 * np.random.normal(size=(10, 11, 2, 3)).astype('d')",
                            "BinOp"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ],
                        [
                            "tf.constant(mean)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1054": {
                "variable": {
                    "value": "u_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "u_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(u)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ],
                        [
                            "tf.constant(u_chol)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1055": {
                "variable": {
                    "value": "v_chol",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(v)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ],
                        [
                            "tf.constant(v_chol)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_1058": {
                "variable": {
                    "value": "(mean_grads, u_grads, v_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mean, u_chol, v_chol]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_1066": {
                "variable": {
                    "value": "(mean_grads, u_grads, v_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mean, u_chol, v_chol]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "unk_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "unk_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_154": {
                "variable": {
                    "value": "n_experiments",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_279": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_373": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_467": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_592": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_606": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_753": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_767": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_937": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_939": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_962": {
                "variable": {
                    "value": "unk_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_963": {
                "variable": {
                    "value": "unk_u_tril",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_964": {
                "variable": {
                    "value": "unk_v_tril",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Graph_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_127": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_146": {
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_175": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_274": {
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_290": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_368": {
                "shape": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_383": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_457": {
                "shape": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_463": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_477": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_587": {
                "shape": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_614": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_683": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_689": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_705": {
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.constant(1.0)",
                            "Call"
                        ],
                        [
                            "tf.constant(1.0)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.constant(1.0)",
                            "Call"
                        ],
                        [
                            "tf.constant(1.0)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_706": {
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(logits, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(logits, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(logits, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(logits, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(logits, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_748": {
                "shape": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_775": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_844": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_850": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_866": {
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.constant(1.0)",
                            "Call"
                        ],
                        [
                            "tf.constant(1.0)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.constant(1.0)",
                            "Call"
                        ],
                        [
                            "tf.constant(1.0)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_867": {
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(logits, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(logits, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(logits, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(logits, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(logits, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_992": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_1057": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1065": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_29": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None])",
                            "Call"
                        ],
                        [
                            "np.zeros((10, 11, 2, 2))",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_31": {
                "shape": {
                    "value": "[len_u, len_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_42": {
                "value": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((10, 11, 2, 2))",
                            "Call"
                        ],
                        [
                            "np.zeros((10, 11, 3, 3))",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_70": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[23, 233, 2333]",
                            "List"
                        ],
                        [
                            "[23, 233, 2333]",
                            "List"
                        ],
                        [
                            "[23, 233, 2333]",
                            "List"
                        ],
                        [
                            "[23, 233, 2333]",
                            "List"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_462": {
                "shape": {
                    "value": "[3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_938": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [None])",
                            "Call"
                        ],
                        [
                            "np.zeros((10, 11, 2, 2))",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_940": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None])",
                            "Call"
                        ],
                        [
                            "np.zeros((10, 11, 3, 3))",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_942": {
                "shape": {
                    "value": "[len_u, len_u]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_943": {
                "shape": {
                    "value": "[len_v, len_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_958": {
                "value": {
                    "value": "v_tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((10, 11, 3, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_994": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[23, 233, 2333]",
                            "List"
                        ],
                        [
                            "[23, 233, 2333]",
                            "List"
                        ],
                        [
                            "[23, 233, 2333]",
                            "List"
                        ],
                        [
                            "[23, 233, 2333]",
                            "List"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_22": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_78": {
                "value": {
                    "value": "cov_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(cov)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ],
                        [
                            "tf.constant(cov_chol)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_101": {
                "value": {
                    "value": "cov_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(cov)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ],
                        [
                            "tf.constant(cov_chol)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_105": {
                "value": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_143": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_261": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_271": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_422": {
                "indices": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(given)",
                            "Call"
                        ],
                        [
                            "np.array(given)",
                            "Call"
                        ],
                        [
                            "np.array(given, np.int32)",
                            "Call"
                        ],
                        [
                            "np.array(given, np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(given, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(given, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(given, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "logits.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_434": {
                "indices": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(given)",
                            "Call"
                        ],
                        [
                            "np.array(given)",
                            "Call"
                        ],
                        [
                            "np.array(given, np.int32)",
                            "Call"
                        ],
                        [
                            "np.array(given, np.float32)",
                            "Call"
                        ],
                        [
                            "np.array(given, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(given, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(given, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "depth": {
                    "value": "logits.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_915": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_918": {
                "shape": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_921": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_924": {
                "shape": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_925": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_926": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_929": {
                "shape": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_930": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_931": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_934": {
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_935": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_936": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 3, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_1002": {
                "value": {
                    "value": "u_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(u)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ],
                        [
                            "tf.constant(u_chol)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1003": {
                "value": {
                    "value": "v_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(v)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ],
                        [
                            "tf.constant(v_chol)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1029": {
                "value": {
                    "value": "u_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(u)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ],
                        [
                            "tf.constant(u_chol)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1030": {
                "value": {
                    "value": "v_chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros_like(v)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(seed)",
                            "Call"
                        ],
                        [
                            "self._gen_test_params(23)",
                            "Call"
                        ],
                        [
                            "tf.constant(v_chol)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1033": {
                "value": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_365": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_454": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_584": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_745": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_117": {
                "value": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1046": {
                "value": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.zeros(shape)",
                            "Call"
                        ],
                        [
                            "samples.reshape((-1, shape[-1]))",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "np.ones(shape, dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp)",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "np.reshape(samples.transpose([0, 1, 2, 4, 3]), [n_exp, 10, 11, -1])",
                            "Call"
                        ],
                        [
                            "dst.sample(n_exp).eval()",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "mvn_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/test_univariate.py": {
        "tensorflow": {
            "ones_78": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_79": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_82": {
                "variable": {
                    "value": "(mean_grads, logstd_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mean, logstd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_88": {
                "variable": {
                    "value": "(mean_grads, logstd_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mean, logstd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_93": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_94": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_100": {
                "variable": {
                    "value": "(mean_path_grads, logstd_path_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mean, logstd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_102": {
                "variable": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_117": {
                "variable": {
                    "value": "(mean_path_grads, logstd_path_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mean, logstd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_237": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_238": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_241": {
                "variable": {
                    "value": "(mean_grads, logstd_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mean, logstd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_247": {
                "variable": {
                    "value": "(mean_grads, logstd_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mean, logstd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_252": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_253": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_254": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_259": {
                "variable": {
                    "value": "(mean_path_grads, logstd_path_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mean, logstd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_261": {
                "variable": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_276": {
                "variable": {
                    "value": "(mean_path_grads, logstd_path_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mean, logstd]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_604": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_605": {
                "variable": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_608": {
                "variable": {
                    "value": "(minval_grads, maxval_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[minval, maxval]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_614": {
                "variable": {
                    "value": "(minval_grads, maxval_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[minval, maxval]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_710": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_711": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_712": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_785": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_786": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_787": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_854": {
                "variable": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_855": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_950": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_951": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1027": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1028": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1029": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1077": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1078": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_1081": {
                "variable": {
                    "value": "(loc_grads, scale_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_1087": {
                "variable": {
                    "value": "(loc_grads, scale_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1092": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1093": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1094": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_1099": {
                "variable": {
                    "value": "(loc_path_grads, scale_path_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_1100": {
                "variable": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_1115": {
                "variable": {
                    "value": "(loc_path_grads, scale_path_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[loc, scale]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1144": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1145": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1146": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1227": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1228": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_1231": {
                "variable": {
                    "value": "(t_grads, logits_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[temperature, logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_1237": {
                "variable": {
                    "value": "(t_grads, logits_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[temperature, logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1242": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1243": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1244": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_1249": {
                "variable": {
                    "value": "(t_path_grads, logits_path_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[temperature, logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_1251": {
                "variable": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_1266": {
                "variable": {
                    "value": "(t_path_grads, logits_path_grads)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_rep.log_prob(samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.log_prob(samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[temperature, logits]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1272": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_1273": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_1274": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_403": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_426": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "logits_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_459": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "logits_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_497": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "logits_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ],
                        [
                            "logits_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_498": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "given_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_880": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_881": {
                "variable": {
                    "value": "n_experiments",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_1165": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_103": {
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "np.array(mean, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "np.array(mean, np.float32)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_104": {
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "np.array(logstd, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "np.array(logstd, np.float32)",
                            "Call"
                        ],
                        [
                            "logstd",
                            "Method Argument"
                        ],
                        [
                            "logstd",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_155": {
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_161": {
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_167": {
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_240": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_246": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_262": {
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "np.array(mean, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "np.array(mean, np.float32)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_263": {
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "np.array(logstd, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "np.array(logstd, np.float32)",
                            "Call"
                        ],
                        [
                            "logstd",
                            "Method Argument"
                        ],
                        [
                            "logstd",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_316": {
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_322": {
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_328": {
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_342": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ones_396": {
                "shape": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_399": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[3, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_413": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_445": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_474": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_482": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_519": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_521": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_579": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_580": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_607": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_613": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_661": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_662": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_737": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_738": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_811": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ones_873": {
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_894": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_980": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_981": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1054": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1055": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1080": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1086": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_1101": {
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "np.array(loc, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_1102": {
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "np.array(scale, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_1230": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_1236": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_1252": {
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.ones([])",
                            "Call"
                        ],
                        [
                            "tf.ones([])",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_1253": {
                "ys": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(logits, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, logits_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, logits_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, logits_shape)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(logits, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "np.array(logits, np.float64)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, [])",
                            "Call"
                        ],
                        [
                            "np.array(logits, np.float32)",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.ones([2, 3])",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, None)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_ys": {
                    "value": "sample_grads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ],
                        [
                            "tf.gradients(log_prob, samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_44": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_51": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_52": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_54": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_203": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_204": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_205": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_206": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_210": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_211": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_213": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_214": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_584": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_585": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_666": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_667": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_742": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_743": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ones_877": {
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_970": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_985": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_986": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_1059": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_1060": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_1173": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "ones_30": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_189": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_486": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "norm_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "norm_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "cat.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "unif_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "unif_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "laplace_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "laplace_no_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(tf.placeholder(tf.int32, shape=[]))",
                            "Call"
                        ],
                        [
                            "con_rep.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "con_no_rep.sample(n_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_524": {
                "input": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bernoulli.log_prob(given)",
                            "Call"
                        ],
                        [
                            "cat.log_prob(given)",
                            "Call"
                        ],
                        [
                            "cat.log_prob(given)",
                            "Call"
                        ],
                        [
                            "cat.log_prob(given)",
                            "Call"
                        ],
                        [
                            "unif.log_prob(given)",
                            "Call"
                        ],
                        [
                            "gamma.log_prob(given)",
                            "Call"
                        ],
                        [
                            "gamma.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "poisson.log_prob(given)",
                            "Call"
                        ],
                        [
                            "poisson.log_prob(given)",
                            "Call"
                        ],
                        [
                            "binomial.log_prob(given)",
                            "Call"
                        ],
                        [
                            "binomial.log_prob(given)",
                            "Call"
                        ],
                        [
                            "inv_gamma.log_prob(given)",
                            "Call"
                        ],
                        [
                            "inv_gamma.log_prob(given)",
                            "Call"
                        ],
                        [
                            "laplace.log_prob(given)",
                            "Call"
                        ],
                        [
                            "laplace.log_prob(given)",
                            "Call"
                        ],
                        [
                            "con.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_33": {
                "shape": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_36": {
                "shape": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_39": {
                "shape": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_39": {
                "shape": {
                    "value": "[2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_42": {
                "shape": {
                    "value": "[2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_192": {
                "shape": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_195": {
                "shape": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_198": {
                "shape": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_198": {
                "shape": {
                    "value": "[2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_201": {
                "shape": {
                    "value": "[2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_393": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_577": {
                "shape": {
                    "value": "[2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_577": {
                "shape": {
                    "value": "[2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_659": {
                "shape": {
                    "value": "[2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_735": {
                "shape": {
                    "value": "[2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_978": {
                "shape": {
                    "value": "[2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_1052": {
                "shape": {
                    "value": "[2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/distributions/test_utils.py": {
        "tensorflow": {
            "placeholder_82": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_92": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_104": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "convert_to_tensor_21": {
                "variable": {
                    "value": "tf_n",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_22": {
                "variable": {
                    "value": "tf_ks",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "ks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ks",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_38": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "a_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_39": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "b_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_60": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "x_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_61": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "y_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/distributions/utils.py": {
        "tensorflow": {
            "placeholder_16": {
                "variable": {
                    "value": "param1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "param2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "param1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "param2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "param1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param1_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param1_dtype",
                            "Method Argument"
                        ],
                        [
                            "param1_dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "param2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param2_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param2_dtype",
                            "Method Argument"
                        ],
                        [
                            "param2_dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_101": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_dtype",
                            "Method Argument"
                        ],
                        [
                            "param_dtype",
                            "Method Argument"
                        ],
                        [
                            "param_dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_dtype",
                            "Method Argument"
                        ],
                        [
                            "param_dtype",
                            "Method Argument"
                        ],
                        [
                            "param_dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "given_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "given_dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_148": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_159": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "param_dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_dtype",
                            "Method Argument"
                        ],
                        [
                            "param_dtype",
                            "Method Argument"
                        ],
                        [
                            "param_dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_168": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_190": {
                "variable": {
                    "value": "param1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "param1_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_191": {
                "variable": {
                    "value": "param2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "param2_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_235": {
                "variable": {
                    "value": "param1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "param1_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_236": {
                "variable": {
                    "value": "param2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "param2_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_279": {
                "variable": {
                    "value": "param1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "param1_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ],
                        [
                            "param1_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_280": {
                "variable": {
                    "value": "param2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "param2_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ],
                        [
                            "param2_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_281": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "given_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_322": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "param_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_shape[:-1]",
                            "Subscript"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_363": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "param_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_shape[:-1]",
                            "Subscript"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_401": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "param_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_shape[:-1]",
                            "Subscript"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_403": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dist.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "given_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_444": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "param_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_shape[:-1]",
                            "Subscript"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_483": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "param_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param_shape[:-1]",
                            "Subscript"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ],
                        [
                            "param_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_485": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dist.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "given_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ],
                        [
                            "given_shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "placeholder_213": {
                "variable": {
                    "value": "param1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_214": {
                "variable": {
                    "value": "param2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_248": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_258": {
                "variable": {
                    "value": "param1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_259": {
                "variable": {
                    "value": "param2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_298": {
                "variable": {
                    "value": "param1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_299": {
                "variable": {
                    "value": "param2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_301": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_345": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_384": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_421": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_423": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dist.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_458": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_466": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_510": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_512": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dist.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_375": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_263": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distribution.sample(2)",
                            "Call"
                        ],
                        [
                            "distribution.sample(2)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_304": {
                "input": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_388": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distribution.sample(2)",
                            "Call"
                        ],
                        [
                            "distribution.sample(2)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_427": {
                "input": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_470": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distribution.sample(2)",
                            "Call"
                        ],
                        [
                            "distribution.sample(2)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ],
                        [
                            "dist.sample(n_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_516": {
                "input": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ],
                        [
                            "dist.log_prob(given)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/framework/test_base.py": {
        "tensorflow": {
            "placeholder_47": {
                "variable": {
                    "value": "obs_int32",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "placeholder_48": {
                "variable": {
                    "value": "obs_float32",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "add_72": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.normal('a', 0.0, logstd=1.0)",
                            "Call"
                        ],
                        [
                            "bn.normal('a', 0.0, logstd=1.0)",
                            "Call"
                        ],
                        [
                            "bn.normal('a', 0.0, logstd=1.0)",
                            "Call"
                        ],
                        [
                            "bn.normal('a', 0.0, logstd=1.0)",
                            "Call"
                        ],
                        [
                            "build_meta_bn().observe(a=a_observed)",
                            "Call"
                        ],
                        [
                            "bn.normal('a', 0.0, logstd=1.0)",
                            "Call"
                        ],
                        [
                            "bn.normal('a', a_mean, logstd=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "x_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "x_logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "a_observed",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_226": {
                "variable": {
                    "value": "a_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "a",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_80": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.normal('c', 0.0, logstd=1.0)",
                            "Call"
                        ],
                        [
                            "build_meta_bn().observe(a=a_observed)",
                            "Call"
                        ],
                        [
                            "bn.normal('c', b, logstd=1.0)",
                            "Call"
                        ],
                        [
                            "bn.normal('c', b, logstd=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_96": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_214": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_238": {
                "name_or_scope": {
                    "value": "you_might_want_do_this",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_244": {
                "name_or_scope": {
                    "value": "when_you_are_perfectly_conscious",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "shape": {
                    "value": "(2,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "shape": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "global_variables_initializer_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_226": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_241": {
                "name_or_scope": {
                    "value": "you_might_want_do_this",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_104": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bn.normal('t', tf.zeros((3,)), std=1.0, n_samples=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_66": {
                "shape": {
                    "value": "(3,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/framework/test_stochastic.py": {
        "tensorflow": {
            "zeros_20": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_22": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([2, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_24": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_45": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "placeholder_63": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_79": {
                "variable": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_96": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_97": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_98": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_114": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_115": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_117": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_132": {
                "variable": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_133": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_134": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_150": {
                "variable": {
                    "value": "n_experiments",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_151": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_152": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_168": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "n_experiments",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_170": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_188": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_189": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_200": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_201": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_202": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_217": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_218": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_219": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_234": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_235": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_236": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_237": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_253": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_254": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_255": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_270": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_271": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_272": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_273": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_288": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_289": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_290": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_291": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_306": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_307": {
                "variable": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_308": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_309": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_207": {
                "indices": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "depth": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/framework/test_utils.py": {
        "tensorflow": {
            "placeholder_37": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_38": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, name='a')",
                            "Call"
                        ]
                    ]
                }
            },
            "square_39": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(a)",
                            "Call"
                        ],
                        [
                            "tf.exp(a)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(a)",
                            "Call"
                        ],
                        [
                            "tf.identity(a, name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_61": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_62": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, name='a')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_63": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(a)",
                            "Call"
                        ],
                        [
                            "tf.exp(a)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(a)",
                            "Call"
                        ],
                        [
                            "tf.identity(a, name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "negative_64": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(a)",
                            "Call"
                        ],
                        [
                            "tf.exp(a)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(a)",
                            "Call"
                        ],
                        [
                            "tf.identity(a, name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_81": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_82": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, name='a')",
                            "Call"
                        ]
                    ]
                },
                "reduction_indices": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(a)",
                            "Call"
                        ],
                        [
                            "tf.exp(a)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(a)",
                            "Call"
                        ],
                        [
                            "tf.identity(a, name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_83": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(b)",
                            "Call"
                        ],
                        [
                            "tf.log(b)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(a, reduction_indices=b)",
                            "Call"
                        ],
                        [
                            "tf.cast(b, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, name='c')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_94": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, name='a')",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_95": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(a)",
                            "Call"
                        ],
                        [
                            "tf.exp(a)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(a)",
                            "Call"
                        ],
                        [
                            "tf.identity(a, name='b')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_96": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(b)",
                            "Call"
                        ],
                        [
                            "tf.log(b)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(a, reduction_indices=b)",
                            "Call"
                        ],
                        [
                            "tf.cast(b, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, name='c')",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(a)",
                            "Call"
                        ],
                        [
                            "tf.exp(a)",
                            "Call"
                        ],
                        [
                            "tf.constant(0, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(a)",
                            "Call"
                        ],
                        [
                            "tf.identity(a, name='b')",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_97": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.negative(b)",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(c)",
                            "Call"
                        ],
                        [
                            "tf.tile(c, b)",
                            "Call"
                        ],
                        [
                            "tf.identity(c, name='d')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_110": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, name='a')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_111": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_112": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(b)",
                            "Call"
                        ],
                        [
                            "tf.log(b)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(a, reduction_indices=b)",
                            "Call"
                        ],
                        [
                            "tf.cast(b, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32, name='c')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_114": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "e",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_116": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "f",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_113": {
                "control_inputs": {
                    "value": "[b, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_115": {
                "control_inputs": {
                    "value": "[e, d]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_diagnostics.py": {
        "tensorflow": {}
    },
    "tests/test_evaluation.py": {
        "tensorflow": {}
    },
    "tests/test_mcmc.py": {
        "tensorflow": {
            "Variable_28": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([n_chains], dtype=dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "x",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "shape": {
                    "value": "[n_chains]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_variables_initializer_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_25": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.zeros([n_chains], dtype=dtype), trainable=False, name='x', dtype=dtype)",
                            "Call"
                        ],
                        [
                            "observed['x']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_transform.py": {
        "tensorflow": {
            "concat_22": {
                "variable": {
                    "value": "z_0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.random_normal(shape=(2, 10, 6), mean=0, stddev=0.05)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.random_normal(shape=(2, 10, 6), mean=0, stddev=0.05)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "n_log_det_ja",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "n_log_det_ja",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planar_normalizing_flow(z_0, [0.0], n_iters=10)",
                            "Call"
                        ],
                        [
                            "tf.reshape(n_log_det_ja, [])",
                            "Call"
                        ],
                        [
                            "inv_autoregressive_flow(z_0, None, [0.0], linear_ar, n_iters=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(n_log_det_ja, [])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_32": {
                "variable": {
                    "value": "jocabian",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_33": {
                "variable": {
                    "value": "log_det_jacobian",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matrix_determinant(jocabian)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_59": {
                "variable": {
                    "value": "z_0",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.random_normal(shape=(2, 10, 6), mean=0, stddev=0.05)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.random_normal(shape=(2, 10, 6), mean=0, stddev=0.05)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "n_log_det_ja",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "n_log_det_ja",
                    "type": "variable",
                    "possible_values": [
                        [
                            "planar_normalizing_flow(z_0, [0.0], n_iters=10)",
                            "Call"
                        ],
                        [
                            "tf.reshape(n_log_det_ja, [])",
                            "Call"
                        ],
                        [
                            "inv_autoregressive_flow(z_0, None, [0.0], linear_ar, n_iters=1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(n_log_det_ja, [])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_69": {
                "variable": {
                    "value": "jocabian",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_70": {
                "variable": {
                    "value": "log_det_jacobian",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matrix_determinant(jocabian)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_21": {
                "variable": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_58": {
                "variable": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "z[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_31": {
                "ys": {
                    "value": "z_1i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_1[0, i]",
                            "Subscript"
                        ],
                        [
                            "z_1[0, i]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "z_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(z, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat(z, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_68": {
                "ys": {
                    "value": "z_1i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z_1[0, i]",
                            "Subscript"
                        ],
                        [
                            "z_1[0, i]",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "z_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat(z, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.concat(z, axis=1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_utils.py": {
        "tensorflow": {
            "register_tensor_conversion_function_42": {
                "base_type": {
                    "value": "_SimpleTensor",
                    "type": "variable",
                    "possible_values": []
                },
                "conversion_func": {
                    "value": "_to_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_to_tensor",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_21": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ],
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_63": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_65": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "func(_SimpleTensor(x_tensor))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_94": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_95": {
                "variable": {
                    "value": "y_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_97": {
                "variable": {
                    "value": "res_1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "func(_SimpleTensor(x_tensor), y_tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_99": {
                "variable": {
                    "value": "res_2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "func(x_tensor, _SimpleTensor(y_tensor))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_101": {
                "variable": {
                    "value": "res_3",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "func(_SimpleTensor(x_tensor), _SimpleTensor(y_tensor))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_188": {
                "variable": {
                    "value": "ans",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x[y]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Graph_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_228": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.asarray([1, 2, 3, 4, 5, 6, 7, 8], dtype=np.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "Graph_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_233": {
                "variable": {
                    "value": "y_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices_or_slices",
                            "variable"
                        ]
                    ]
                }
            },
            "ones_293": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_265": {
                "value": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[1.0, 3.0, 0.2], [0.7, 2.0, 1e-06]], [[0.0, 1000000.0, 1.0], [1.0, 1.0, 1.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[1.0, 3.0, 0.2], [0.7, 2.0, 1e-06]], [[0.0, 1000000.0, 1.0], [1.0, 1.0, 1.0]]])",
                            "Call"
                        ],
                        [
                            "A()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_279": {
                "value": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[[1.0, 3.0, 0.2], [0.7, 2.0, 1e-06]], [[0.0, 1000000.0, 1.0], [1.0, 1.0, 1.0]]])",
                            "Call"
                        ],
                        [
                            "np.array([[[1.0, 3.0, 0.2], [0.7, 2.0, 1e-06]], [[0.0, 1000000.0, 1.0], [1.0, 1.0, 1.0]]])",
                            "Call"
                        ],
                        [
                            "A()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/variational/test_exclusive_kl.py": {
        "tensorflow": {
            "convert_to_tensor_28": {
                "variable": {
                    "value": "qx_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._n01_1e5",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_29": {
                "variable": {
                    "value": "log_qx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "log_qx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stats.norm.logpdf(self._n01_1e5).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_qx)",
                            "Call"
                        ],
                        [
                            "norm.log_prob(qx_samples)",
                            "Call"
                        ],
                        [
                            "norm.log_prob(qx_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_50": {
                "variable": {
                    "value": "eps_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._n01_1e5",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_81": {
                "variable": {
                    "value": "eps_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._n01_1e6",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_82": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_83": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stop_gradient_84": {
                "variable": {
                    "value": "qx_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eps_samples * sigma + mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_65": {
                "variable": {
                    "value": "sgvb_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "sgvb_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lower_bound.sgvb()",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mu, sigma]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_67": {
                "variable": {
                    "value": "true_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "true_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_kl_normal_normal(mu, sigma, x_mean, x_std)",
                            "Call"
                        ],
                        [
                            "_kl_normal_normal(mu, sigma, x_mean, x_std)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mu, sigma]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_97": {
                "variable": {
                    "value": "reinforce_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "reinforce_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lower_bound.reinforce(variance_reduction=False)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mu, sigma]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_99": {
                "variable": {
                    "value": "true_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "true_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_kl_normal_normal(mu, sigma, x_mean, x_std)",
                            "Call"
                        ],
                        [
                            "_kl_normal_normal(mu, sigma, x_mean, x_std)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mu, sigma]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/variational/test_inclusive_kl.py": {
        "tensorflow": {
            "convert_to_tensor_28": {
                "variable": {
                    "value": "qx_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._n01_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_29": {
                "variable": {
                    "value": "log_qx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "log_qx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stats.norm.logpdf(self._n01_samples).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_qx)",
                            "Call"
                        ],
                        [
                            "q.log_prob(qx_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_45": {
                "variable": {
                    "value": "eps_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._n01_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_46": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_47": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stop_gradient_48": {
                "variable": {
                    "value": "qx_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eps_samples * sigma + mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_74": {
                "variable": {
                    "value": "single_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.random_normal([]) * sigma + mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_60": {
                "variable": {
                    "value": "importance_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "klpq_obj.importance()",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mu, sigma]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_62": {
                "variable": {
                    "value": "true_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "true_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_kl_normal_normal(x_mean, x_std, mu, sigma)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mu, sigma]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tests/variational/test_monte_carlo.py": {
        "tensorflow": {
            "convert_to_tensor_27": {
                "variable": {
                    "value": "qx_samples_n1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._n1_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_28": {
                "variable": {
                    "value": "log_qx_n1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "log_qx_n1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stats.norm.logpdf(self._n1_samples).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_qx_n1)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_31": {
                "variable": {
                    "value": "qx_samples_n3",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._n3_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_32": {
                "variable": {
                    "value": "log_qx_n3",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "log_qx_n3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stats.norm.logpdf(self._n3_samples).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_qx_n3)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_73": {
                "variable": {
                    "value": "eps_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._n1_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_74": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_75": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "convert_to_tensor_105": {
                "variable": {
                    "value": "eps_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "self._n3_samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_106": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_107": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_mean_43": {
                "variable": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "importance_weighted_objective(log_joint, observed={}, latent={'x': [qx_samples_n1, log_qx_n1]}, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound)",
                            "Call"
                        ],
                        [
                            "importance_weighted_objective(log_joint, observed={}, latent={'x': [qx_samples_n3, log_qx_n3]}, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound)",
                            "Call"
                        ],
                        [
                            "importance_weighted_objective(log_joint, observed={}, latent={'x': [qx_samples, log_qx]}, axis=0)",
                            "Call"
                        ],
                        [
                            "importance_weighted_objective(log_joint, observed={}, latent={'x': [qx_samples, log_qx]}, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_62": {
                "variable": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "importance_weighted_objective(log_joint, observed={}, latent={'x': [qx_samples_n1, log_qx_n1]}, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound)",
                            "Call"
                        ],
                        [
                            "importance_weighted_objective(log_joint, observed={}, latent={'x': [qx_samples_n3, log_qx_n3]}, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound)",
                            "Call"
                        ],
                        [
                            "importance_weighted_objective(log_joint, observed={}, latent={'x': [qx_samples, log_qx]}, axis=0)",
                            "Call"
                        ],
                        [
                            "importance_weighted_objective(log_joint, observed={}, latent={'x': [qx_samples, log_qx]}, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_89": {
                "variable": {
                    "value": "sgvb_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "sgvb_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lower_bound.sgvb()",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sgvb_cost)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound.sgvb())",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_90": {
                "variable": {
                    "value": "sgvb_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "sgvb_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lower_bound.sgvb()",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sgvb_cost)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound.sgvb())",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mu, sigma]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_92": {
                "variable": {
                    "value": "true_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "true_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_kl_normal_normal(mu, sigma, x_mean, x_std)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mu, sigma]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_129": {
                "variable": {
                    "value": "vimco_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "vimco_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_lower_bound.vimco()",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(vimco_cost)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_130": {
                "variable": {
                    "value": "vimco_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "vimco_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_lower_bound.vimco()",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(vimco_cost)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mu, sigma]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_131": {
                "variable": {
                    "value": "sgvb_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound.sgvb()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_132": {
                "variable": {
                    "value": "sgvb_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "sgvb_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lower_bound.sgvb()",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(sgvb_cost)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(lower_bound.sgvb())",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "[mu, sigma]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_113": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(2.0)",
                            "Call"
                        ],
                        [
                            "tf.constant(2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_112": {
                "input": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(3.0)",
                            "Call"
                        ],
                        [
                            "tf.constant(3.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/variational/utils.py": {
        "tensorflow": {
            "log_12": {
                "x": {
                    "value": "std2 / std1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "zhusuan/distributions/base.py": {
        "tensorflow": {
            "convert_to_tensor_272": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(given, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "self._check_input_shape(given)",
                            "Call"
                        ],
                        [
                            "self._check_input_shape(given)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_105": {
                "variable": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_ndims",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(group_ndims, tf.int32)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_rank_106": {
                "variable": {
                    "value": "_assert_rank_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_ndims",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(group_ndims, tf.int32)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "rank": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "group_ndims should be a scalar (0-D Tensor).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_greater_equal_109": {
                "variable": {
                    "value": "_assert_nonnegative_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_ndims",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(group_ndims, tf.int32)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "group_ndims must be non-negative.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_304": {
                "input_tensor": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._log_prob(given)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "tf.range(-self._group_ndims, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_prod_320": {
                "input_tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._prob(given)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "tf.range(-self._group_ndims, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_114": {
                "variable": {
                    "value": "self._group_ndims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "group_ndims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "group_ndims",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(group_ndims, tf.int32)",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_155": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "param",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_176": {
                "value": {
                    "value": "static_value_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_value_shape()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_211": {
                "value": {
                    "value": "static_batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_batch_shape()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_253": {
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._sample(n_samples=1)",
                            "Call"
                        ],
                        [
                            "self._sample(n_samples)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_257": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(n_samples, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_rank_258": {
                "variable": {
                    "value": "_assert_rank_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(n_samples, dtype=tf.int32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ]
                    ]
                },
                "rank": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "n_samples should be a scalar (0-D Tensor).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "control_dependencies_112": {
                "control_inputs": {
                    "value": "[_assert_rank_op, _assert_nonnegative_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_281": {
                "shape_x": {
                    "value": "given.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "static_sample_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_batch_shape().concatenate(self.get_value_shape())",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_261": {
                "control_inputs": {
                    "value": "[_assert_rank_op]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "zhusuan/distributions/multivariate.py": {
        "tensorflow": {
            "convert_to_tensor_81": {
                "variable": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_85": {
                "variable": {
                    "value": "self._cov_tril",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "cov_tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cov_tril",
                            "Call"
                        ],
                        [
                            "self.cov_tril",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(cov_tril)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.cov_tril)",
                            "Call"
                        ],
                        [
                            "cov_tril",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_94": {
                "variable": {
                    "value": "expected_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(self._mean), [self._n_dim]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_96": {
                "variable": {
                    "value": "actual_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._cov_tril",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_158": {
                "variable": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tile(mean)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_mean, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_161": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(batch_cov, noise) + batch_mean",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(samples, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(samples_flat, shape)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.one_hot(samples, self.n_categories, dtype=self.dtype), axis=1)",
                            "Call"
                        ],
                        [
                            "samples_flat",
                            "variable"
                        ],
                        [
                            "tf.reshape(samples_flat, shape)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(samples, self.n_categories, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_gamma([n_samples], self.alpha, beta=1, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.nn.log_softmax((logits + gumbel) / temperature)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax((logits + gumbel) / temperature)",
                            "Call"
                        ],
                        [
                            "mean + tf.matmul(tf.matmul(batch_u_tril, noise), tf.matrix_transpose(batch_v_tril))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_174": {
                "variable": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._n_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_182": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "given - mean",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_187": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(L, y, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_238": {
                "variable": {
                    "value": "self._logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_303": {
                "variable": {
                    "value": "samples_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.random.categorical(logits_flat, n_samples * self.n_experiments)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_305": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n_samples, self.n_experiments], self.batch_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_307": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "samples_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.random.categorical(logits_flat, n_samples * self.n_experiments))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random.categorical(logits_flat, n_samples))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[n_samples, self.n_experiments], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], tf.shape(self.logits)], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], tf.shape(self.logits)], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_315": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.one_hot(samples, self.n_categories, dtype=self.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_321": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.alpha, 'given', 'alpha')",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.param_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_383": {
                "variable": {
                    "value": "self._logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_436": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.alpha, 'given', 'alpha')",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.param_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_442": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "given * logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_478": {
                "variable": {
                    "value": "self._logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_527": {
                "variable": {
                    "value": "samples_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.random.categorical(logits_flat, n_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_539": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(batch_cov, noise) + batch_mean",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(samples, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(samples_flat, shape)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.one_hot(samples, self.n_categories, dtype=self.dtype), axis=1)",
                            "Call"
                        ],
                        [
                            "samples_flat",
                            "variable"
                        ],
                        [
                            "tf.reshape(samples_flat, shape)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(samples, self.n_categories, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_gamma([n_samples], self.alpha, beta=1, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.nn.log_softmax((logits + gumbel) / temperature)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax((logits + gumbel) / temperature)",
                            "Call"
                        ],
                        [
                            "mean + tf.matmul(tf.matmul(batch_u_tril, noise), tf.matrix_transpose(batch_v_tril))",
                            "BinOp"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.n_categories",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_543": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.alpha, 'given', 'alpha')",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.param_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_598": {
                "variable": {
                    "value": "self._alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.alpha, 'given', 'alpha')",
                            "Call"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lbeta_668": {
                "variable": {
                    "value": "lbeta_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.alpha, 'given', 'alpha')",
                            "Call"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_672": {
                "variable": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.alpha, 'given', 'alpha')",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_727": {
                "variable": {
                    "value": "self._logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_728": {
                "variable": {
                    "value": "self._temperature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_786": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n_samples], tf.shape(self.logits)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_790": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "(logits + gumbel) / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_800": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.n_categories",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_801": {
                "variable": {
                    "value": "log_temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_865": {
                "variable": {
                    "value": "self._logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_866": {
                "variable": {
                    "value": "self._temperature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_924": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n_samples], tf.shape(self.logits)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_929": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "(logits + gumbel) / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_939": {
                "variable": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.alpha, 'given', 'alpha')",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_940": {
                "variable": {
                    "value": "log_temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_941": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.n_categories",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1010": {
                "variable": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1015": {
                "variable": {
                    "value": "self._u_tril",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "u_tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_tril",
                            "Call"
                        ],
                        [
                            "self.u_tril",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(u_tril)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.u_tril)",
                            "Call"
                        ],
                        [
                            "u_tril",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1018": {
                "variable": {
                    "value": "self._v_tril",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "v_tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_tril",
                            "Call"
                        ],
                        [
                            "self.v_tril",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(v_tril)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.v_tril)",
                            "Call"
                        ],
                        [
                            "v_tril",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_1030": {
                "variable": {
                    "value": "expected_u_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(self._mean)[:-1], [self._n_row]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1032": {
                "variable": {
                    "value": "actual_u_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._u_tril",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_1036": {
                "variable": {
                    "value": "assert_u_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "expected_u_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._mean.get_shape()[:-1].concatenate([self._n_row if isinstance(self._n_row, int) else None])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(self._mean)[:-1], [self._n_row]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "actual_u_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self._u_tril)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['MultivariateNormalCholesky.cov_tril should have compatible shape with mean. Expected', expected_shape, ' got ', actual_shape]",
                            "List"
                        ],
                        [
                            "['MatrixVariateNormalCholesky.u_tril should have compatible shape with mean. Expected', expected_u_shape, ' got ', actual_u_shape]",
                            "List"
                        ],
                        [
                            "['MatrixVariateNormalCholesky.v_tril should have compatible shape with mean. Expected', expected_v_shape, ' got ', actual_v_shape]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_1037": {
                "variable": {
                    "value": "expected_v_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.shape(self._mean)[:-2], [self._n_col, self._n_col]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_1039": {
                "variable": {
                    "value": "actual_v_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._v_tril",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assert_equal_1043": {
                "variable": {
                    "value": "assert_v_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "expected_v_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._mean.get_shape()[:-2].concatenate([self._n_col if isinstance(self._n_col, int) else None] * 2)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(self._mean)[:-2], [self._n_col, self._n_col]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "actual_v_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self._v_tril)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['MultivariateNormalCholesky.cov_tril should have compatible shape with mean. Expected', expected_shape, ' got ', actual_shape]",
                            "List"
                        ],
                        [
                            "['MatrixVariateNormalCholesky.u_tril should have compatible shape with mean. Expected', expected_u_shape, ' got ', actual_u_shape]",
                            "List"
                        ],
                        [
                            "['MatrixVariateNormalCholesky.v_tril should have compatible shape with mean. Expected', expected_v_shape, ' got ', actual_v_shape]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorShape_1086": {
                "variable": {
                    "value": "shape_",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[self._n_row if isinstance(self._n_row, int) else None, self._n_col if isinstance(self._n_col, int) else None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1133": {
                "variable": {
                    "value": "n_row",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._n_row",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1134": {
                "variable": {
                    "value": "n_col",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._n_col",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_1143": {
                "variable": {
                    "value": "y_with_last_dim_changed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.ones(tf.shape(y)[:-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1147": {
                "variable": {
                    "value": "y_with_sec_last_dim_changed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.ones(tf.concat([tf.shape(y)[:-2], tf.shape(y)[-1:]], axis=0))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "identity_102": {
                "variable": {
                    "value": "self._cov_tril",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._cov_tril",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_130": {
                "value": {
                    "value": "[self._n_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_135": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_143": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "stop_gradient_148": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_149": {
                "variable": {
                    "value": "cov_tril",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov_tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cov_tril",
                            "Call"
                        ],
                        [
                            "self.cov_tril",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(cov_tril)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.cov_tril)",
                            "Call"
                        ],
                        [
                            "cov_tril",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_152": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n_samples], tf.ones_like(tf.shape(t))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "check_numerics_179": {
                "variable": {
                    "value": "log_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-n_dim / 2 * tf.log(2 * tf.constant(np.pi, dtype=self.dtype)) - log_det / 2",
                            "BinOp"
                        ],
                        [
                            "tf.check_numerics(log_z, 'log[det(Cov)]')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log[det(Cov)]",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_192": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_280": {
                "value": {
                    "value": "[self.n_categories]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_285": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_293": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_302": {
                "variable": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_categories]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_328": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.alpha, 'given', 'alpha')",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_330": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.n_experiments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.param_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_336": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_414": {
                "value": {
                    "value": "[self.n_categories]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_419": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_427": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "exp_446": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_507": {
                "value": {
                    "value": "[self.n_categories]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_512": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_520": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_526": {
                "variable": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_categories]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_532": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n_samples], self.batch_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_533": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "samples_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.random.categorical(logits_flat, n_samples * self.n_experiments))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random.categorical(logits_flat, n_samples))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[n_samples, self.n_experiments], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], tf.shape(self.logits)], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], tf.shape(self.logits)], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_550": {
                "variable": {
                    "value": "given_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.alpha, 'given', 'alpha')",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_categories]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_551": {
                "variable": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_categories]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_557": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_p_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.nn.softmax_cross_entropy_with_logits(labels=given_flat, logits=logits_flat)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(logits)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_564": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_645": {
                "value": {
                    "value": "[self.n_categories]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_650": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_658": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "check_numerics_674": {
                "variable": {
                    "value": "lbeta_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lbeta_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.lbeta(alpha)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lbeta_alpha, 'lbeta(alpha)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "lbeta(alpha)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_675": {
                "variable": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(given)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_680": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_766": {
                "value": {
                    "value": "[self.n_categories]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_771": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_779": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "stop_gradient_784": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_785": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_numerics_804": {
                "variable": {
                    "value": "log_temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(temperature)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_temperature, 'log(temperature)')",
                            "Call"
                        ],
                        [
                            "tf.log(temperature)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_temperature, 'log(temperature)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(temperature)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_814": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_904": {
                "value": {
                    "value": "[self.n_categories]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_909": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_917": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "stop_gradient_922": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_923": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_numerics_944": {
                "variable": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(given)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_945": {
                "variable": {
                    "value": "log_temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(temperature)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_temperature, 'log(temperature)')",
                            "Call"
                        ],
                        [
                            "tf.log(temperature)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_temperature, 'log(temperature)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(temperature)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_955": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_1045": {
                "variable": {
                    "value": "self._u_tril",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._u_tril",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_1046": {
                "variable": {
                    "value": "self._v_tril",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._v_tril",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1083": {
                "value": {
                    "value": "[self._n_row, self._n_col]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_1097": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "stop_gradient_1102": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_1103": {
                "variable": {
                    "value": "u_tril",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u_tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u_tril",
                            "Call"
                        ],
                        [
                            "self.u_tril",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(u_tril)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.u_tril)",
                            "Call"
                        ],
                        [
                            "u_tril",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_1104": {
                "variable": {
                    "value": "v_tril",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v_tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v_tril",
                            "Call"
                        ],
                        [
                            "self.v_tril",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(v_tril)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.v_tril)",
                            "Call"
                        ],
                        [
                            "v_tril",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_1107": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n_samples], tf.ones_like(tf.shape(t))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "check_numerics_1140": {
                "variable": {
                    "value": "logZ",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logZ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(n_row * n_col) / 2.0 * tf.log(2.0 * tf.constant(np.pi, dtype=self.dtype)) - n_row / 2.0 * log_det_v - n_col / 2.0 * log_det_u",
                            "BinOp"
                        ],
                        [
                            "tf.check_numerics(logZ, 'log[det(Cov)]')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log[det(Cov)]",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_1160": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assert_equal_100": {
                "x": {
                    "value": "expected_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._mean.get_shape().concatenate([self._n_dim if isinstance(self._n_dim, int) else None])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.shape(self._mean), [self._n_dim]], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "actual_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(self._cov_tril)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "['MultivariateNormalCholesky.cov_tril should have compatible shape with mean. Expected', expected_shape, ' got ', actual_shape]",
                            "List"
                        ],
                        [
                            "['MatrixVariateNormalCholesky.u_tril should have compatible shape with mean. Expected', expected_u_shape, ' got ', actual_u_shape]",
                            "List"
                        ],
                        [
                            "['MatrixVariateNormalCholesky.v_tril should have compatible shape with mean. Expected', expected_v_shape, ' got ', actual_v_shape]",
                            "List"
                        ]
                    ]
                }
            },
            "control_dependencies_101": {
                "control_inputs": {
                    "value": "assert_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.assert_equal(expected_shape, actual_shape, msg)]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorShape_134": {
                "dims": {
                    "value": "[self._n_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_138": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_153": {
                "input": {
                    "value": "tf.expand_dims(t, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[n_samples], tf.ones_like(tf.shape(t))], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], tf.ones_like(tf.shape(t))], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_159": {
                "input": {
                    "value": "batch_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tile(mean)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(batch_mean, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_160": {
                "a": {
                    "value": "batch_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tile(cov_tril)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(batch_mean), dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(tf.concat([[n_samples], tf.shape(mean)], axis=0), dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_164": {
                "dims": {
                    "value": "[static_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_164": {
                "arys": {
                    "value": "self.get_value_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_172": {
                "input_tensor": {
                    "value": "tf.log(tf.matrix_diag_part(cov_tril))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_188": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "TensorShape_284": {
                "dims": {
                    "value": "[self.n_categories]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_288": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "categorical_304": {
                "logits": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, self.n_categories])",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, self.n_categories])",
                            "Call"
                        ],
                        [
                            "logits",
                            "variable"
                        ],
                        [
                            "tf.reshape(logits, [-1, self.n_categories])",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "n_samples * self.n_experiments",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorShape_313": {
                "dims": {
                    "value": "[static_n_samples, static_n_exps]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_313": {
                "arys": {
                    "value": "self.get_batch_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_316": {
                "indices": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(batch_cov, noise) + batch_mean",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(samples, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(samples_flat, shape)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.one_hot(samples, self.n_categories, dtype=self.dtype), axis=1)",
                            "Call"
                        ],
                        [
                            "samples_flat",
                            "variable"
                        ],
                        [
                            "tf.reshape(samples_flat, shape)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(samples, self.n_categories, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_gamma([n_samples], self.alpha, beta=1, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.nn.log_softmax((logits + gumbel) / temperature)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax((logits + gumbel) / temperature)",
                            "Call"
                        ],
                        [
                            "mean + tf.matmul(tf.matmul(batch_u_tril, noise), tf.matrix_transpose(batch_v_tril))",
                            "BinOp"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.n_categories",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_332": {
                "input_tensor": {
                    "value": "given * logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "TensorShape_418": {
                "dims": {
                    "value": "[self.n_categories]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_422": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_511": {
                "dims": {
                    "value": "[self.n_categories]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_515": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "categorical_528": {
                "logits": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, self.n_categories])",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, self.n_categories])",
                            "Call"
                        ],
                        [
                            "logits",
                            "variable"
                        ],
                        [
                            "tf.reshape(logits, [-1, self.n_categories])",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_552": {
                "labels": {
                    "value": "given_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "given",
                            "variable"
                        ],
                        [
                            "tf.reshape(given, [-1, self.n_categories])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, self.n_categories])",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, self.n_categories])",
                            "Call"
                        ],
                        [
                            "logits",
                            "variable"
                        ],
                        [
                            "tf.reshape(logits, [-1, self.n_categories])",
                            "Call"
                        ]
                    ]
                }
            },
            "assert_rank_at_least_614": {
                "variable": {
                    "value": "_assert_shape_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rank": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "shape_err_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'alpha should have rank >= 1.'",
                            "str"
                        ]
                    ]
                }
            },
            "assert_greater_equal_620": {
                "variable": {
                    "value": "_assert_cat_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._n_categories",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "cat_err_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'n_categories (length of the last axis of alpha) should be at least 2.'",
                            "str"
                        ]
                    ]
                }
            },
            "TensorShape_649": {
                "dims": {
                    "value": "[self.n_categories]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_653": {
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_663": {
                "input_tensor": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(batch_cov, noise) + batch_mean",
                            "BinOp"
                        ],
                        [
                            "tf.squeeze(samples, -1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(samples_flat, shape)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.one_hot(samples, self.n_categories, dtype=self.dtype), axis=1)",
                            "Call"
                        ],
                        [
                            "samples_flat",
                            "variable"
                        ],
                        [
                            "tf.reshape(samples_flat, shape)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(samples, self.n_categories, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_gamma([n_samples], self.alpha, beta=1, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.nn.log_softmax((logits + gumbel) / temperature)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax((logits + gumbel) / temperature)",
                            "Call"
                        ],
                        [
                            "mean + tf.matmul(tf.matmul(batch_u_tril, noise), tf.matrix_transpose(batch_v_tril))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_676": {
                "input_tensor": {
                    "value": "(alpha - 1) * log_given",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "TensorShape_770": {
                "dims": {
                    "value": "[self.n_categories]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_774": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_789": {
                "x": {
                    "value": "uniform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "open_interval_standard_uniform(shape, self.dtype)",
                            "Call"
                        ],
                        [
                            "open_interval_standard_uniform(shape, self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_794": {
                "dims": {
                    "value": "[static_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_794": {
                "arys": {
                    "value": "logits.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorShape_908": {
                "dims": {
                    "value": "[self.n_categories]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_912": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_928": {
                "x": {
                    "value": "uniform",
                    "type": "variable",
                    "possible_values": [
                        [
                            "open_interval_standard_uniform(shape, self.dtype)",
                            "Call"
                        ],
                        [
                            "open_interval_standard_uniform(shape, self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_933": {
                "dims": {
                    "value": "[static_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_933": {
                "arys": {
                    "value": "logits.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_1044": {
                "control_inputs": {
                    "value": "[assert_u_ops, assert_v_ops]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1092": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_1108": {
                "input": {
                    "value": "tf.expand_dims(t, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[n_samples], tf.ones_like(tf.shape(t))], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], tf.ones_like(tf.shape(t))], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_1113": {
                "values": {
                    "value": "[[n_samples], tf.shape(mean)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_1115": {
                "a": {
                    "value": "batch_u_tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tile(u_tril)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(batch_mean), dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(tf.concat([[n_samples], tf.shape(mean)], axis=0), dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_1119": {
                "dims": {
                    "value": "[static_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_1119": {
                "arys": {
                    "value": "self.get_value_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1129": {
                "input_tensor": {
                    "value": "tf.log(tf.matrix_diag_part(u_tril))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1131": {
                "input_tensor": {
                    "value": "tf.log(tf.matrix_diag_part(v_tril))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_1143": {
                "shape": {
                    "value": "tf.shape(y)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_1147": {
                "shape": {
                    "value": "tf.concat([tf.shape(y)[:-2], tf.shape(y)[-1:]], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matrix_transpose_1154": {
                "a": {
                    "value": "x_Lb_inv_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Lu, y, lower=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1156": {
                "input_tensor": {
                    "value": "tf.square(x_t)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[-1, -2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_95": {
                "input": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_153": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_173": {
                "x": {
                    "value": "tf.matrix_diag_part(cov_tril)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_175": {
                "x": {
                    "value": "2 * tf.constant(np.pi, dtype=self.dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_188": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(L, y, lower=True)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_logsumexp_325": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_440": {
                "input_tensor": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorShape_537": {
                "dims": {
                    "value": "[static_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_537": {
                "arys": {
                    "value": "self.get_batch_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_617": {
                "variable": {
                    "value": "self._alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_623": {
                "variable": {
                    "value": "self._alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_786": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_810": {
                "input_tensor": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits - temperature * given",
                            "BinOp"
                        ],
                        [
                            "logits - temperature * log_given",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_811": {
                "input_tensor": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits - temperature * given",
                            "BinOp"
                        ],
                        [
                            "logits - temperature * log_given",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_924": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_951": {
                "input_tensor": {
                    "value": "temp - log_given",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_952": {
                "input_tensor": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits - temperature * given",
                            "BinOp"
                        ],
                        [
                            "logits - temperature * log_given",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_1108": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matrix_transpose_1116": {
                "a": {
                    "value": "batch_v_tril",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tile(v_tril)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_1130": {
                "x": {
                    "value": "tf.matrix_diag_part(u_tril)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_1132": {
                "x": {
                    "value": "tf.matrix_diag_part(v_tril)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_1148": {
                "values": {
                    "value": "[tf.shape(y)[:-2], tf.shape(y)[-1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_1156": {
                "x": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matrix_triangular_solve(Lv, tf.matrix_transpose(x_Lb_inv_t), lower=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_152": {
                "input": {
                    "value": "tf.shape(t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_557": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits - tf.reduce_logsumexp(logits, axis=-1, keepdims=True)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_616": {
                "control_inputs": {
                    "value": "[_assert_shape_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_618": {
                "input": {
                    "value": "self._alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_622": {
                "control_inputs": {
                    "value": "[_assert_cat_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "lgamma_809": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(given, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.n_experiments, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.n_categories, self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.n_categories, self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "lgamma_950": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(given, -1)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.n_experiments, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.n_categories, self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.n_categories, self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1031": {
                "input": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_1038": {
                "input": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_1107": {
                "input": {
                    "value": "tf.shape(t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1113": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ],
                        [
                            "mean",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_1136": {
                "x": {
                    "value": "2.0 * tf.constant(np.pi, dtype=self.dtype)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_1143": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(given - mean, -1)",
                            "Call"
                        ],
                        [
                            "given - mean",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_152": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_176": {
                "value": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_559": {
                "shape_x": {
                    "value": "given.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "logits.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1107": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_1136": {
                "value": {
                    "value": "np.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_1148": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(given - mean, -1)",
                            "Call"
                        ],
                        [
                            "given - mean",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "zhusuan/distributions/univariate.py": {
        "tensorflow": {
            "convert_to_tensor_90": {
                "variable": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_166": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n_samples], self.batch_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_178": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-2 * logstd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_235": {
                "variable": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_311": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n_samples], self.batch_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_323": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-2.0 * logstd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_326": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(given >= 0.0, dtype=precision.dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_355": {
                "variable": {
                    "value": "self._logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "logits * tf.ones_like(tf.expand_dims(given, -1), self.param_dtype)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_387": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_388": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n_samples], self.batch_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_391": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(alpha, p)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_399": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.param_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_434": {
                "variable": {
                    "value": "self._logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "logits * tf.ones_like(tf.expand_dims(given, -1), self.param_dtype)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_483": {
                "variable": {
                    "value": "samples_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.random.categorical(logits_flat, n_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_485": {
                "variable": {
                    "value": "samples_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "samples_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.random.categorical(logits_flat, n_samples))",
                            "Call"
                        ],
                        [
                            "tf.cast(samples_flat, self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random.categorical(stacked_logits_flat, n_samples * n))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_488": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n_samples], self.batch_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_489": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "samples_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.random.categorical(logits_flat, n_samples))",
                            "Call"
                        ],
                        [
                            "tf.cast(samples_flat, self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random.categorical(stacked_logits_flat, n_samples * n))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n, n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_585": {
                "variable": {
                    "value": "self._minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "minval",
                            "Call"
                        ],
                        [
                            "self.minval",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(minval)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_586": {
                "variable": {
                    "value": "self._maxval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxval",
                            "Call"
                        ],
                        [
                            "self.maxval",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(maxval)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_637": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n_samples], self.batch_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_647": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_653": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_and(tf.less_equal(self.minval, given), tf.less(given, self.maxval))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_686": {
                "variable": {
                    "value": "self._alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=0, maxval=1, dtype=self.param_dtype)",
                            "Call"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(self.alpha, self.beta, 'alpha', 'beta')",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_687": {
                "variable": {
                    "value": "self._beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(self.alpha, self.beta, 'alpha', 'beta')",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_739": {
                "variable": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_740": {
                "variable": {
                    "value": "log_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(self.alpha, self.beta, 'alpha', 'beta')",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lgamma_741": {
                "variable": {
                    "value": "lgamma_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=0, maxval=1, dtype=self.param_dtype)",
                            "Call"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(self.alpha, self.beta, 'alpha', 'beta')",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_779": {
                "variable": {
                    "value": "self._alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=0, maxval=1, dtype=self.param_dtype)",
                            "Call"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(self.alpha, self.beta, 'alpha', 'beta')",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_780": {
                "variable": {
                    "value": "self._beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(self.alpha, self.beta, 'alpha', 'beta')",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_836": {
                "variable": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_837": {
                "variable": {
                    "value": "log_1_minus_given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - given",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_839": {
                "variable": {
                    "value": "lgamma_alpha_plus_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha + beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_882": {
                "variable": {
                    "value": "self._rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate",
                            "Call"
                        ],
                        [
                            "self.rate",
                            "Attribute"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_poisson_916": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "lam": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_samples]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.param_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_924": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.param_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_926": {
                "variable": {
                    "value": "log_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rate",
                            "Call"
                        ],
                        [
                            "self.rate",
                            "Attribute"
                        ],
                        [
                            "rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lgamma_927": {
                "variable": {
                    "value": "lgamma_given_plus_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_969": {
                "variable": {
                    "value": "self._logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "logits * tf.ones_like(tf.expand_dims(given, -1), self.param_dtype)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_1033": {
                "variable": {
                    "value": "stacked_logits_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[log_1_minus_p, log_p]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_1034": {
                "variable": {
                    "value": "samples_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.random.categorical(stacked_logits_flat, n_samples * n)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_1037": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n, n_samples], self.batch_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_1038": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(samples_flat, shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_1041": {
                "variable": {
                    "value": "static_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[static_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_1041": {
                "variable": {
                    "value": "static_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "arys": {
                    "value": "self.get_batch_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_1049": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.n_experiments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.param_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_1050": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.param_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lgamma_1053": {
                "variable": {
                    "value": "lgamma_n_plus_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_1054": {
                "variable": {
                    "value": "lgamma_given_plus_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_1055": {
                "variable": {
                    "value": "lgamma_n_minus_given_plus_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n - given + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1094": {
                "variable": {
                    "value": "self._alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=0, maxval=1, dtype=self.param_dtype)",
                            "Call"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(self.alpha, self.beta, 'alpha', 'beta')",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1095": {
                "variable": {
                    "value": "self._beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(self.alpha, self.beta, 'alpha', 'beta')",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_1148": {
                "variable": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_1149": {
                "variable": {
                    "value": "log_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(self.alpha, self.beta, 'alpha', 'beta')",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "lgamma_1150": {
                "variable": {
                    "value": "lgamma_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=0, maxval=1, dtype=self.param_dtype)",
                            "Call"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(self.alpha, self.beta, 'alpha', 'beta')",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1198": {
                "variable": {
                    "value": "self._loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc",
                            "Call"
                        ],
                        [
                            "self.loc",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(loc)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.loc)",
                            "Call"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1199": {
                "variable": {
                    "value": "self._scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale",
                            "Call"
                        ],
                        [
                            "self.scale",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(scale)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.scale)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_1252": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n_samples], self.batch_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_1270": {
                "variable": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale",
                            "Call"
                        ],
                        [
                            "self.scale",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(scale)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.scale)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1322": {
                "variable": {
                    "value": "self._logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "logits * tf.ones_like(tf.expand_dims(given, -1), self.param_dtype)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_1323": {
                "variable": {
                    "value": "self._temperature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_1368": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n_samples], self.batch_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_1373": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(logits + logistic) / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_1384": {
                "variable": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_1385": {
                "variable": {
                    "value": "log_1_minus_given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - given",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_1386": {
                "variable": {
                    "value": "log_temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_148": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_151": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_dynamic_shape_154": {
                "shape_x": {
                    "value": "tf.shape(self.mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "tf.shape(self.std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_158": {
                "shape_x": {
                    "value": "self.mean.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self.std.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_164": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_165": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std",
                            "Call"
                        ],
                        [
                            "tf.exp(self._logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(std, 'exp(logstd)')",
                            "Call"
                        ],
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(std)",
                            "Call"
                        ],
                        [
                            "std",
                            "Call"
                        ],
                        [
                            "tf.exp(self._logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(std, 'exp(logstd)')",
                            "Call"
                        ],
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(std)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_numerics_180": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-2 * logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(precision, 'precision')",
                            "Call"
                        ],
                        [
                            "tf.exp(-2.0 * logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(precision, 'precision')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "precision",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_184": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_293": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_296": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_dynamic_shape_299": {
                "shape_x": {
                    "value": "tf.shape(self.mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "tf.shape(self.std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_303": {
                "shape_x": {
                    "value": "self.mean.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self.std.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_309": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "mean",
                            "Call"
                        ],
                        [
                            "self.mean",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(mean)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.mean)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_310": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std",
                            "Call"
                        ],
                        [
                            "tf.exp(self._logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(std, 'exp(logstd)')",
                            "Call"
                        ],
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(std)",
                            "Call"
                        ],
                        [
                            "std",
                            "Call"
                        ],
                        [
                            "tf.exp(self._logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(std, 'exp(logstd)')",
                            "Call"
                        ],
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(std)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_numerics_325": {
                "variable": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "precision",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-2 * logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(precision, 'precision')",
                            "Call"
                        ],
                        [
                            "tf.exp(-2.0 * logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(precision, 'precision')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "precision",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_331": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_375": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_378": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_381": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_406": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_465": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_468": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_476": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "reshape_482": {
                "variable": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.n_categories]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_501": {
                "variable": {
                    "value": "ones_",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "tf.shape(logits)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_540": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_551": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_619": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_622": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_dynamic_shape_625": {
                "shape_x": {
                    "value": "tf.shape(self.minval)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "tf.shape(self.maxval)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_629": {
                "shape_x": {
                    "value": "self.minval.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self.maxval.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_635": {
                "variable": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "minval",
                            "Call"
                        ],
                        [
                            "self.minval",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(minval)",
                            "Call"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_636": {
                "variable": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "maxval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "maxval",
                            "Call"
                        ],
                        [
                            "self.maxval",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(maxval)",
                            "Call"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_numerics_649": {
                "variable": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.nn.sparse_softmax_cross_entropy_with_logits(labels=given, logits=logits)",
                            "UnaryOp"
                        ],
                        [
                            "tf.log(self._prob(given))",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_p, 'log_p')",
                            "Call"
                        ],
                        [
                            "logits_flat + log_1_minus_p",
                            "BinOp"
                        ]
                    ]
                },
                "message": {
                    "value": "log_p",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_658": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(self.logits)",
                            "Call"
                        ],
                        [
                            "1.0 / (self.maxval - self.minval)",
                            "BinOp"
                        ],
                        [
                            "tf.check_numerics(p, 'p')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "p",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_720": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_723": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_dynamic_shape_726": {
                "shape_x": {
                    "value": "tf.shape(self.alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "tf.shape(self.beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_730": {
                "shape_x": {
                    "value": "self.alpha.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self.beta.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "check_numerics_743": {
                "variable": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(given)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_744": {
                "variable": {
                    "value": "log_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(beta)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_beta, 'log(beta)')",
                            "Call"
                        ],
                        [
                            "tf.log(beta)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_beta, 'log(beta)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(beta)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_745": {
                "variable": {
                    "value": "lgamma_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lgamma_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.lgamma(alpha)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_alpha, 'lgamma(alpha)')",
                            "Call"
                        ],
                        [
                            "tf.lgamma(alpha)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_alpha, 'lgamma(alpha)')",
                            "Call"
                        ],
                        [
                            "tf.lgamma(alpha)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_alpha, 'lgamma(alpha)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "lgamma(alpha)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_750": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_813": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_816": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_dynamic_shape_819": {
                "shape_x": {
                    "value": "tf.shape(self.alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "tf.shape(self.beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_823": {
                "shape_x": {
                    "value": "self.alpha.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self.beta.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "check_numerics_842": {
                "variable": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(given)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_843": {
                "variable": {
                    "value": "log_1_minus_given",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_1_minus_given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(1 - given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_1_minus_given, 'log(1 - given)')",
                            "Call"
                        ],
                        [
                            "tf.log(1 - given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_1_minus_given, 'log(1 - given)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(1 - given)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_845": {
                "variable": {
                    "value": "lgamma_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lgamma_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.lgamma(alpha)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_alpha, 'lgamma(alpha)')",
                            "Call"
                        ],
                        [
                            "tf.lgamma(alpha)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_alpha, 'lgamma(alpha)')",
                            "Call"
                        ],
                        [
                            "tf.lgamma(alpha)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_alpha, 'lgamma(alpha)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "lgamma(alpha)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_846": {
                "variable": {
                    "value": "lgamma_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lgamma_beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.lgamma(beta)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_beta, 'lgamma(beta)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "lgamma(beta)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_847": {
                "variable": {
                    "value": "lgamma_alpha_plus_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lgamma_alpha_plus_beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.lgamma(alpha + beta)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_alpha_plus_beta, 'lgamma(alpha + beta)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "lgamma(alpha + beta)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_854": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_904": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_907": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_910": {
                "input": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_919": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape, dtype=self.dtype) * std + mean",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(shape, dtype=self.dtype) * std + mean",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.less(alpha, p), dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(samples_flat, shape)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, 0, 1, dtype=self.dtype) * (maxval - minval) + minval",
                            "BinOp"
                        ],
                        [
                            "tf.random_poisson(self.rate, [n_samples], dtype=self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(samples, self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(samples_flat, shape), axis=0)",
                            "Call"
                        ],
                        [
                            "loc - scale * tf.sign(uniform_samples) * tf.log1p(-tf.abs(uniform_samples))",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid((logits + logistic) / temperature)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_numerics_930": {
                "variable": {
                    "value": "log_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(rate)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_rate, 'log(rate)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(rate)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_931": {
                "variable": {
                    "value": "lgamma_given_plus_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lgamma_given_plus_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.lgamma(given + 1)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_given_plus_1, 'lgamma(given + 1)')",
                            "Call"
                        ],
                        [
                            "tf.lgamma(given + 1)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_given_plus_1, 'lgamma(given + 1)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "lgamma(given + 1)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_936": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assert_rank_985": {
                "variable": {
                    "value": "_assert_rank_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_experiments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_experiments",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(n_experiments, tf.int32)",
                            "Call"
                        ],
                        [
                            "n_experiments",
                            "Method Argument"
                        ]
                    ]
                },
                "rank": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "n_experiments should be a scalar (0-D Tensor).",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_greater_988": {
                "variable": {
                    "value": "_assert_positive_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_experiments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_experiments",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(n_experiments, tf.int32)",
                            "Call"
                        ],
                        [
                            "n_experiments",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "sign_err_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'n_experiments must be positive'",
                            "str"
                        ]
                    ]
                }
            },
            "constant_1014": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_1017": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1020": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_1030": {
                "variable": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_1045": {
                "x": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape, dtype=self.dtype) * std + mean",
                            "BinOp"
                        ],
                        [
                            "tf.random_normal(shape, dtype=self.dtype) * std + mean",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.less(alpha, p), dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(samples_flat, shape)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform(shape, 0, 1, dtype=self.dtype) * (maxval - minval) + minval",
                            "BinOp"
                        ],
                        [
                            "tf.random_poisson(self.rate, [n_samples], dtype=self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(samples, self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(samples_flat, shape), axis=0)",
                            "Call"
                        ],
                        [
                            "loc - scale * tf.sign(uniform_samples) * tf.log1p(-tf.abs(uniform_samples))",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid((logits + logistic) / temperature)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_numerics_1058": {
                "variable": {
                    "value": "lgamma_given_plus_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lgamma_given_plus_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.lgamma(given + 1)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_given_plus_1, 'lgamma(given + 1)')",
                            "Call"
                        ],
                        [
                            "tf.lgamma(given + 1)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_given_plus_1, 'lgamma(given + 1)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "lgamma(given + 1)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_1060": {
                "variable": {
                    "value": "lgamma_n_minus_given_plus_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lgamma_n_minus_given_plus_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.lgamma(n - given + 1)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_n_minus_given_plus_1, 'lgamma(n - given + 1)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "lgamma(n - given + 1)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_1067": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_1128": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_1131": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_dynamic_shape_1134": {
                "shape_x": {
                    "value": "tf.shape(self.alpha)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "tf.shape(self.beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_1138": {
                "shape_x": {
                    "value": "self.alpha.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self.beta.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "check_numerics_1153": {
                "variable": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(given)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_1154": {
                "variable": {
                    "value": "log_beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(beta)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_beta, 'log(beta)')",
                            "Call"
                        ],
                        [
                            "tf.log(beta)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_beta, 'log(beta)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(beta)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_1155": {
                "variable": {
                    "value": "lgamma_alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "lgamma_alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.lgamma(alpha)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_alpha, 'lgamma(alpha)')",
                            "Call"
                        ],
                        [
                            "tf.lgamma(alpha)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_alpha, 'lgamma(alpha)')",
                            "Call"
                        ],
                        [
                            "tf.lgamma(alpha)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(lgamma_alpha, 'lgamma(alpha)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "lgamma(alpha)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_1161": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_1233": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_1236": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "broadcast_dynamic_shape_1239": {
                "shape_x": {
                    "value": "tf.shape(self.loc)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "tf.shape(self.scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_1243": {
                "shape_x": {
                    "value": "self.loc.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self.scale.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_1250": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc",
                            "Call"
                        ],
                        [
                            "self.loc",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(loc)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.loc)",
                            "Call"
                        ],
                        [
                            "loc",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_1251": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale",
                            "Call"
                        ],
                        [
                            "self.scale",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(scale)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.scale)",
                            "Call"
                        ],
                        [
                            "scale",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_numerics_1272": {
                "variable": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(scale)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_scale, 'log(scale)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(scale)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_1276": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_1352": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_1355": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_1358": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_1366": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "logits * tf.ones_like(tf.expand_dims(given, -1), self.param_dtype)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stop_gradient_1367": {
                "variable": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temperature",
                            "Call"
                        ],
                        [
                            "self.temperature",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(temperature)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.temperature)",
                            "Call"
                        ],
                        [
                            "temperature",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "check_numerics_1389": {
                "variable": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ],
                        [
                            "tf.log(given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_given, 'log(given)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(given)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_1390": {
                "variable": {
                    "value": "log_1_minus_given",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_1_minus_given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(1 - given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_1_minus_given, 'log(1 - given)')",
                            "Call"
                        ],
                        [
                            "tf.log(1 - given)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_1_minus_given, 'log(1 - given)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(1 - given)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_1392": {
                "variable": {
                    "value": "log_temperature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_temperature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(temperature)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(log_temperature, 'log(temperature)')",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "log(temperature)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_1402": {
                "x": {
                    "value": "self._log_prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_97": {
                "variable": {
                    "value": "self._std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std",
                            "Call"
                        ],
                        [
                            "tf.exp(self._logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(std, 'exp(logstd)')",
                            "Call"
                        ],
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(std)",
                            "Call"
                        ],
                        [
                            "std",
                            "Call"
                        ],
                        [
                            "tf.exp(self._logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(std, 'exp(logstd)')",
                            "Call"
                        ],
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(std)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_100": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_106": {
                "variable": {
                    "value": "self._logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logstd",
                            "Call"
                        ],
                        [
                            "tf.log(self._std)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(logstd, 'log(std)')",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logstd)",
                            "Call"
                        ],
                        [
                            "logstd",
                            "Call"
                        ],
                        [
                            "tf.log(self._std)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(logstd, 'log(std)')",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logstd)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_109": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_115": {
                "shape_x": {
                    "value": "self._mean.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self._std.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_154": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_155": {
                "input": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_170": {
                "dims": {
                    "value": "[static_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_170": {
                "arys": {
                    "value": "self.get_batch_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_241": {
                "variable": {
                    "value": "self._std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std",
                            "Call"
                        ],
                        [
                            "tf.exp(self._logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(std, 'exp(logstd)')",
                            "Call"
                        ],
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(std)",
                            "Call"
                        ],
                        [
                            "std",
                            "Call"
                        ],
                        [
                            "tf.exp(self._logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(std, 'exp(logstd)')",
                            "Call"
                        ],
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(std)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_244": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_250": {
                "variable": {
                    "value": "self._logstd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logstd",
                            "Call"
                        ],
                        [
                            "tf.log(self._std)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(logstd, 'log(std)')",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logstd)",
                            "Call"
                        ],
                        [
                            "logstd",
                            "Call"
                        ],
                        [
                            "tf.log(self._std)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(logstd, 'log(std)')",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logstd)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_254": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self._logstd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_260": {
                "shape_x": {
                    "value": "self._mean.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self._std.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_299": {
                "input": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_300": {
                "input": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_315": {
                "dims": {
                    "value": "[static_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_315": {
                "arys": {
                    "value": "self.get_batch_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_326": {
                "x": {
                    "value": "given >= 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "precision.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_391": {
                "x": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape, minval=0, maxval=1, dtype=self.param_dtype)",
                            "Call"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(self.alpha, self.beta, 'alpha', 'beta')",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Call"
                        ],
                        [
                            "self.alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(self.logits)",
                            "Call"
                        ],
                        [
                            "1.0 / (self.maxval - self.minval)",
                            "BinOp"
                        ],
                        [
                            "tf.check_numerics(p, 'p')",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorShape_394": {
                "dims": {
                    "value": "[static_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_394": {
                "arys": {
                    "value": "self.get_batch_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_402": {
                "labels": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "logits * tf.ones_like(tf.expand_dims(given, -1), self.param_dtype)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_471": {
                "input": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "categorical_484": {
                "logits": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, self.n_categories])",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.logits, [-1])",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ],
                        [
                            "n_samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_492": {
                "dims": {
                    "value": "[static_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_492": {
                "arys": {
                    "value": "self.get_batch_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_505": {
                "input": {
                    "value": "tf.expand_dims(given, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.param_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_542": {
                "variable": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_543": {
                "labels": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "logits * tf.ones_like(tf.expand_dims(given, -1), self.param_dtype)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "broadcast_static_shape_592": {
                "shape_x": {
                    "value": "self._minval.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self._maxval.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_625": {
                "input": {
                    "value": "self.minval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_626": {
                "input": {
                    "value": "self.maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_642": {
                "dims": {
                    "value": "[static_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_642": {
                "arys": {
                    "value": "self.get_batch_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_653": {
                "x": {
                    "value": "tf.less_equal(self.minval, given)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(given, self.maxval)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_693": {
                "shape_x": {
                    "value": "self._alpha.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self._beta.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_726": {
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_727": {
                "input": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_786": {
                "shape_x": {
                    "value": "self._alpha.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self._beta.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_819": {
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_820": {
                "input": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lgamma_838": {
                "x": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(self.alpha, self.beta, 'alpha', 'beta')",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Call"
                        ],
                        [
                            "self.beta",
                            "Attribute"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ],
                        [
                            "beta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_982": {
                "variable": {
                    "value": "n_experiments",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "n_experiments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_experiments",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(n_experiments, tf.int32)",
                            "Call"
                        ],
                        [
                            "n_experiments",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_992": {
                "variable": {
                    "value": "self._n_experiments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "n_experiments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_experiments",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(n_experiments, tf.int32)",
                            "Call"
                        ],
                        [
                            "n_experiments",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_1031": {
                "features": {
                    "value": "logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.logits, [-1, self.n_categories])",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.reshape(self.logits, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "categorical_1035": {
                "logits": {
                    "value": "stacked_logits_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([log_1_minus_p, log_p], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "n_samples * n",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1038": {
                "tensor": {
                    "value": "samples_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(tf.random.categorical(logits_flat, n_samples))",
                            "Call"
                        ],
                        [
                            "tf.cast(samples_flat, self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.random.categorical(stacked_logits_flat, n_samples * n))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n, n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([[n_samples], self.batch_shape], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_1052": {
                "features": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "logits * tf.ones_like(tf.expand_dims(given, -1), self.param_dtype)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "broadcast_static_shape_1101": {
                "shape_x": {
                    "value": "self._alpha.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self._beta.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1134": {
                "input": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_1135": {
                "input": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_1205": {
                "shape_x": {
                    "value": "self._loc.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "self._scale.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_1239": {
                "input": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_1240": {
                "input": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_1263": {
                "dims": {
                    "value": "[static_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_1263": {
                "arys": {
                    "value": "self.get_batch_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_1372": {
                "x": {
                    "value": "1 - uniform",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TensorShape_1377": {
                "dims": {
                    "value": "[static_n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concatenate_1377": {
                "arys": {
                    "value": "self.get_batch_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "check_numerics_102": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logstd",
                            "Call"
                        ],
                        [
                            "tf.log(self._std)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(logstd, 'log(std)')",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logstd)",
                            "Call"
                        ],
                        [
                            "logstd",
                            "Call"
                        ],
                        [
                            "tf.log(self._std)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(logstd, 'log(std)')",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logstd)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "message": {
                    "value": "log(std)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_111": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std",
                            "Call"
                        ],
                        [
                            "tf.exp(self._logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(std, 'exp(logstd)')",
                            "Call"
                        ],
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(std)",
                            "Call"
                        ],
                        [
                            "std",
                            "Call"
                        ],
                        [
                            "tf.exp(self._logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(std, 'exp(logstd)')",
                            "Call"
                        ],
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(std)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "message": {
                    "value": "exp(logstd)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "square_181": {
                "x": {
                    "value": "given - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "check_numerics_246": {
                "variable": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logstd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logstd",
                            "Call"
                        ],
                        [
                            "tf.log(self._std)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(logstd, 'log(std)')",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logstd)",
                            "Call"
                        ],
                        [
                            "logstd",
                            "Call"
                        ],
                        [
                            "tf.log(self._std)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(logstd, 'log(std)')",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logstd)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "message": {
                    "value": "log(std)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "check_numerics_256": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "std",
                            "Call"
                        ],
                        [
                            "tf.exp(self._logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(std, 'exp(logstd)')",
                            "Call"
                        ],
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(std)",
                            "Call"
                        ],
                        [
                            "std",
                            "Call"
                        ],
                        [
                            "tf.exp(self._logstd)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(std, 'exp(logstd)')",
                            "Call"
                        ],
                        [
                            "self.std",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(std)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "message": {
                    "value": "exp(logstd)",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softplus_328": {
                "features": {
                    "value": "-2.0 * mean * given * precision",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_505": {
                "input": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_546": {
                "shape_x": {
                    "value": "given.get_shape()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "logits.get_shape()[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "less_equal_653": {
                "x": {
                    "value": "self.minval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_654": {
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int32)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, tf.int64)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "given * ones_",
                            "BinOp"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(given, self.param_dtype)",
                            "Call"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.maxval",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_990": {
                "control_inputs": {
                    "value": "[_assert_rank_op, _assert_positive_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log1p_1260": {
                "x": {
                    "value": "-tf.abs(uniform_samples)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_1273": {
                "x": {
                    "value": "given - loc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_1399": {
                "features": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "temperature * logistic_given - logits",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_501": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "maybe_explicit_broadcast(given, self.logits, 'given', 'logits')",
                            "Call"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "_broadcast(given, logits)",
                            "Call"
                        ],
                        [
                            "logits * tf.ones_like(tf.expand_dims(given, -1), self.param_dtype)",
                            "BinOp"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "logits",
                            "Call"
                        ],
                        [
                            "self.logits",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(logits)",
                            "Call"
                        ],
                        [
                            "self.path_param(self.logits)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ],
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sign_1259": {
                "x": {
                    "value": "uniform_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=shape, minval=np.nextafter(self.dtype.as_numpy_dtype(-1.0), self.dtype.as_numpy_dtype(0.0)), maxval=1.0, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_1260": {
                "x": {
                    "value": "uniform_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=shape, minval=np.nextafter(self.dtype.as_numpy_dtype(-1.0), self.dtype.as_numpy_dtype(0.0)), maxval=1.0, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_327": {
                "x": {
                    "value": "given - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "zhusuan/distributions/utils.py": {
        "tensorflow": {
            "shape_201": {
                "variable": {
                    "value": "dynamic_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors_with_name",
                            "variable"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(value, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_93": {
                "pred": {
                    "value": "tf.equal(tf.rank(x), tf.rank(y))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.reduce_all(tf.equal(tf.concat([tf.shape(x), tf.shape(y)], 0), tf.concat([tf.shape(y), tf.shape(x)], 0)))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.convert_to_tensor(False, tf.bool)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "assert_rank_at_least_237": {
                "variable": {
                    "value": "_assert_shape_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors_with_name",
                            "variable"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(value, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "rank": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "message": {
                    "value": "shape_err_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{} should have rank >= {}.'.format(name, k)",
                            "Call"
                        ],
                        [
                            "name + ' should be a scalar (0-D tensor).'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assert_rank_270": {
                "variable": {
                    "value": "_assert_shape_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors_with_name",
                            "variable"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(value, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "rank": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "shape_err_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'{} should have rank >= {}.'.format(name, k)",
                            "Call"
                        ],
                        [
                            "name + ' should be a scalar (0-D tensor).'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "assert_rank_299": {
                "variable": {
                    "value": "_assert_rank_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors_with_name",
                            "variable"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(value, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "rank": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "name + ' should be a scalar (0-D Tensor).'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assert_greater_302": {
                "variable": {
                    "value": "_assert_positive_op",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors_with_name",
                            "variable"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(value, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(0, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "name + ' must be positive'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lgamma_33": {
                "x": {
                    "value": "ks + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "input_tensor": {
                    "value": "tf.lgamma(ks + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_43": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y * tf.ones_like(x, dtype=y.dtype)",
                            "BinOp"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_44": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * tf.ones_like(y, dtype=x.dtype)",
                            "BinOp"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "y.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_94": {
                "x": {
                    "value": "tf.rank(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.rank(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_219": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors_with_name",
                            "variable"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(value, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_240": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors_with_name",
                            "variable"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(value, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_272": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors_with_name",
                            "variable"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(value, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_296": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_307": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors_with_name",
                            "variable"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(value, tf.int32)",
                            "Call"
                        ],
                        [
                            "tf.identity(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rank_94": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y * tf.ones_like(x, dtype=y.dtype)",
                            "BinOp"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_all_95": {
                "input_tensor": {
                    "value": "tf.equal(tf.concat([tf.shape(x), tf.shape(y)], 0), tf.concat([tf.shape(y), tf.shape(x)], 0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_98": {
                "value": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_239": {
                "control_inputs": {
                    "value": "[_assert_shape_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_271": {
                "control_inputs": {
                    "value": "[_assert_shape_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_303": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_305": {
                "control_inputs": {
                    "value": "[_assert_rank_op, _assert_positive_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_95": {
                "x": {
                    "value": "tf.concat([tf.shape(x), tf.shape(y)], 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.concat([tf.shape(y), tf.shape(x)], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_96": {
                "values": {
                    "value": "[tf.shape(x), tf.shape(y)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_97": {
                "values": {
                    "value": "[tf.shape(y), tf.shape(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_96": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y * tf.ones_like(x, dtype=y.dtype)",
                            "BinOp"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_97": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x * tf.ones_like(y, dtype=x.dtype)",
                            "BinOp"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "explicit_broadcast(x, y, x_name, y_name)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "zhusuan/evaluation.py": {
        "tensorflow": {
            "placeholder_98": {
                "variable": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "temperature",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_87": {
                "name": {
                    "value": "AIS",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_109": {
                "ref": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "z_s",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "zhusuan/framework/bn.py": {
        "tensorflow": {
            "register_tensor_conversion_function_306": {
                "base_type": {
                    "value": "StochasticTensor",
                    "type": "variable",
                    "possible_values": []
                },
                "conversion_func": {
                    "value": "StochasticTensor._to_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_383": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(input_tensor)",
                            "Call"
                        ],
                        [
                            "input_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_99": {
                "variable": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "observation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(observation, dtype=self._dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "observation",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_109": {
                "shape_x": {
                    "value": "dist_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._dist.get_batch_shape().concatenate(self._dist.get_value_shape())",
                            "Call"
                        ]
                    ]
                },
                "shape_y": {
                    "value": "observation.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "zhusuan/framework/meta_bn.py": {
        "tensorflow": {
            "make_template_57": {
                "variable": {
                    "value": "self._f",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "func_": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "f",
                            "Method Argument"
                        ],
                        [
                            "f",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_103": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "zhusuan/framework/utils.py": {
        "tensorflow": {
            "make_template_106": {
                "name_": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "func_": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "zhusuan/hmc.py": {
        "tensorflow": {
            "check_numerics_51": {
                "variable": {
                    "value": "old_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "old_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hamiltonian(q, p, log_posterior, mass, data_axes)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(old_log_prob, 'HMC: old_log_prob has numeric errors! Try better initialization.')",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(self.q, p, current_q, current_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "HMC: old_log_prob has numeric errors! Try better initialization.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_54": {
                "variable": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(-new_hamiltonian + old_hamiltonian, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_56": {
                "variable": {
                    "value": "is_finite",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.is_finite(acceptance_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.is_finite(new_log_prob)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_58": {
                "variable": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_finite",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_and(tf.is_finite(acceptance_rate), tf.is_finite(new_log_prob))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.minimum(-new_hamiltonian + old_hamiltonian, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.where(is_finite, acceptance_rate, tf.zeros_like(acceptance_rate))",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(q, p, new_q, new_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(acceptance_rate)",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(self.q, p, current_q, current_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.zeros_like(acceptance_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_108": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.adapt_step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "adapt_stepsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adapt_stepsize",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "lambda : tf.exp(self.log_epsilon_bar)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "assign_132": {
                "variable": {
                    "value": "new_t",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.t + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_258": {
                "variable": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "step_size",
                            "Method Argument"
                        ],
                        [
                            "step_size",
                            "Method Argument"
                        ],
                        [
                            "step_size",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "step_size",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_260": {
                "variable": {
                    "value": "self.n_leapfrogs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "n_leapfrogs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "n_leapfrogs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_262": {
                "variable": {
                    "value": "self.target_acceptance_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "target_acceptance_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.8",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "target_acceptance_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_264": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "t",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_278": {
                "variable": {
                    "value": "self.mass_collect_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "mass_collect_iters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mass_collect_iters",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_280": {
                "variable": {
                    "value": "self.mass_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "mass_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.99",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mass_decay",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_287": {
                "variable": {
                    "value": "new_mass",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "self.adapt_mass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : ewmv.get_updated_precision(self.q)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : ewmv.precision()",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "while_loop_340": {
                "variable": {
                    "value": "(new_step_size, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "loop_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_cond",
                            "Call"
                        ],
                        [
                            "loop_cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_body",
                            "Call"
                        ],
                        [
                            "loop_body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[self.step_size, tf.constant(1.0), tf.constant(True)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_366": {
                "variable": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_367": {
                "variable": {
                    "value": "(_, q, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "loop_cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_cond",
                            "Call"
                        ],
                        [
                            "loop_cond",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "loop_body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loop_body",
                            "Call"
                        ],
                        [
                            "loop_body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[i, q, p]",
                    "type": "List",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "assign_379": {
                "variable": {
                    "value": "update_step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "new_step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.while_loop(loop_cond, loop_body, [self.step_size, tf.constant(1.0), tf.constant(True)])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(acceptance_rate, self.target_acceptance_rate), lambda : step_size * (1.0 / factor), lambda : step_size * factor)",
                            "Call"
                        ],
                        [
                            "self.step_size_tuner.tune(tf.reduce_mean(acceptance_rate), tf.cast(if_initialize_step_size, tf.float32))",
                            "Call"
                        ],
                        [
                            "self.step_size",
                            "Attribute"
                        ],
                        [
                            "tf.stop_gradient(tf.cond(if_initialize_step_size, iss, lambda : self.step_size))",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_32": {
                "inputs": {
                    "value": "[tf.reduce_sum(tf.square(momentum) / m, axis) for (momentum, m, axis) in zip(p, mass, data_axes)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "minimum_55": {
                "x": {
                    "value": "-new_hamiltonian + old_hamiltonian",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_finite_56": {
                "x": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.minimum(-new_hamiltonian + old_hamiltonian, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.where(is_finite, acceptance_rate, tf.zeros_like(acceptance_rate))",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(q, p, new_q, new_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(acceptance_rate)",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(self.q, p, current_q, current_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_finite_57": {
                "x": {
                    "value": "new_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hamiltonian(new_q, new_p, log_posterior, mass, data_axes)",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(self.q, p, current_q, current_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "tf.where(if_accept, new_log_prob, old_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_59": {
                "input": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.minimum(-new_hamiltonian + old_hamiltonian, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.where(is_finite, acceptance_rate, tf.zeros_like(acceptance_rate))",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(q, p, new_q, new_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(acceptance_rate)",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(self.q, p, current_q, current_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_68": {
                "variable": {
                    "value": "self.adapt_step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "adapt_step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adapt_step_size",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "adapt_step_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_72": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gamma",
                            "Method Argument"
                        ],
                        [
                            "0.05",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_74": {
                "variable": {
                    "value": "self.t0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "t0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t0",
                            "Method Argument"
                        ],
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "t0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_75": {
                "variable": {
                    "value": "self.kappa",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kappa",
                            "Method Argument"
                        ],
                        [
                            "0.75",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "kappa",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_77": {
                "variable": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delta",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_79": {
                "variable": {
                    "value": "self.mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "10 * initial_stepsize",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "mu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_82": {
                "variable": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_84": {
                "variable": {
                    "value": "self.log_epsilon_bar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "log_epsilon_bar",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_86": {
                "variable": {
                    "value": "self.h_bar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "h_bar",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "assign_92": {
                "variable": {
                    "value": "new_step",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "(1 - fresh_start) * self.step + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_94": {
                "variable": {
                    "value": "new_h_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.h_bar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "(1 - fresh_start) * (1 - rate1) * self.h_bar + rate1 * (self.delta - acceptance_rate)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_98": {
                "variable": {
                    "value": "rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "new_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign(self.step, (1 - fresh_start) * self.step + 1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-self.kappa",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "assign_99": {
                "variable": {
                    "value": "new_log_epsilon_bar",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "self.log_epsilon_bar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "rate * log_epsilon + (1 - fresh_start) * (1 - rate) * self.log_epsilon_bar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_118": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "t",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "constant_125": {
                "variable": {
                    "value": "self.one",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "range_127": {
                "variable": {
                    "value": "self.chain_axes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_273": {
                "variable": {
                    "value": "self.adapt_mass",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "adapt_mass",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "adapt_mass",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cond_299": {
                "variable": {
                    "value": "current_mass",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(tf.cast(t, tf.int32), self.mass_collect_iters)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : [tf.ones(shape) for shape in self.data_shapes]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : new_mass",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_mean_326": {
                "variable": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.minimum(-new_hamiltonian + old_hamiltonian, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.where(is_finite, acceptance_rate, tf.zeros_like(acceptance_rate))",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(q, p, new_q, new_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(acceptance_rate)",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(self.q, p, current_q, current_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cond_329": {
                "variable": {
                    "value": "new_step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(acceptance_rate, self.target_acceptance_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : step_size * (1.0 / factor)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : step_size * factor",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "logical_not_335": {
                "variable": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.logical_xor(tf.less(last_acceptance_rate, self.target_acceptance_rate), tf.less(acceptance_rate, self.target_acceptance_rate))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_353": {
                "variable": {
                    "value": "step_size1",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "i > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : step_size",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.constant(0.0, dtype=tf.float32)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_357": {
                "variable": {
                    "value": "step_size2",
                    "type": "variable",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.logical_and(tf.less(i, self.n_leapfrogs), tf.less(0, i))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : step_size",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : step_size / 2",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "stop_gradient_380": {
                "input": {
                    "value": "update_step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign(self.step_size, new_step_size)",
                            "Call"
                        ],
                        [
                            "self._adapt_step_size(acceptance_rate, if_initialize_step_size)",
                            "Call"
                        ],
                        [
                            "self.step_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "logical_or_466": {
                "variable": {
                    "value": "if_initialize_step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.equal(new_t, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(tf.cast(new_t, tf.int32), self.mass_collect_iters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_471": {
                "variable": {
                    "value": "new_step_size",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cond(if_initialize_step_size, iss, lambda : self.step_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_486": {
                "variable": {
                    "value": "if_accept",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "u01",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_uniform(shape=tf.shape(acceptance_rate))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.minimum(-new_hamiltonian + old_hamiltonian, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.where(is_finite, acceptance_rate, tf.zeros_like(acceptance_rate))",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(q, p, new_q, new_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(acceptance_rate)",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(self.q, p, current_q, current_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_498": {
                "variable": {
                    "value": "new_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "if_accept",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(u01, acceptance_rate)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "new_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hamiltonian(new_q, new_p, log_posterior, mass, data_axes)",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(self.q, p, current_q, current_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "tf.where(if_accept, new_log_prob, old_log_prob)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "old_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hamiltonian(q, p, log_posterior, mass, data_axes)",
                            "Call"
                        ],
                        [
                            "tf.check_numerics(old_log_prob, 'HMC: old_log_prob has numeric errors! Try better initialization.')",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(self.q, p, current_q, current_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_520": {
                "variable": {
                    "value": "sample_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_q",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sqrt_22": {
                "x": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "name_scope_67": {
                "name": {
                    "value": "StepsizeTuner",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_104": {
                "variable": {
                    "value": "new_log_epsilon",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mu - tf.sqrt(new_step) / self.gamma * new_h_bar",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_106": {
                "x": {
                    "value": "new_log_epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.identity(log_epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_117": {
                "name": {
                    "value": "ExponentialWeightedMovingVariance",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_147": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "n_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_298": {
                "control_inputs": {
                    "value": "new_mass",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cond(self.adapt_mass, lambda : ewmv.get_updated_precision(self.q), lambda : ewmv.precision())",
                            "Call"
                        ],
                        [
                            "[new_mass]",
                            "List"
                        ]
                    ]
                }
            },
            "reduce_mean_377": {
                "input_tensor": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.minimum(-new_hamiltonian + old_hamiltonian, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.where(is_finite, acceptance_rate, tf.zeros_like(acceptance_rate))",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(q, p, new_q, new_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(acceptance_rate)",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(self.q, p, current_q, current_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_378": {
                "x": {
                    "value": "if_initialize_step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.equal(new_t, 1), tf.equal(tf.cast(new_t, tf.int32), self.mass_collect_iters))",
                            "Call"
                        ],
                        [
                            "if_initialize_step_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_432": {
                "ys": {
                    "value": "log_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_log_posterior(var_list)",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_435": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x + step_size1 * y for (x, y) in zip(q, velocity(p, mass))]",
                            "ListComp"
                        ],
                        [
                            "tf.while_loop(loop_cond, loop_body, [i, q, p], back_prop=False, parallel_iterations=1)",
                            "Call"
                        ],
                        [
                            "leapfrog_integrator(q, p, step_size1, step_size2, lambda q: get_gradient(q), mass)",
                            "Call"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_446": {
                "dims": {
                    "value": "[1] * self.n_chain_dims",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concatenate_446": {
                "arys": {
                    "value": "q.get_shape()[self.n_chain_dims:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "name_scope_479": {
                "name": {
                    "value": "MH-test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logical_and_493": {
                "variable": {
                    "value": "expanded_if_accept",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "expanded_if_accept",
                    "type": "variable",
                    "possible_values": [
                        [
                            "if_accept",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(expanded_if_accept, -1)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(expanded_if_accept, tf.ones_like(nq, dtype=tf.bool))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.ones_like(nq, dtype=tf.bool)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_519": {
                "control_inputs": {
                    "value": "[update_step_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "input_tensor": {
                    "value": "tf.square(momentum) / m",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_103": {
                "control_inputs": {
                    "value": "[new_log_epsilon_bar]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_110": {
                "x": {
                    "value": "self.log_epsilon_bar",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_120": {
                "initial_value": {
                    "value": "tf.zeros(s)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_122": {
                "initial_value": {
                    "value": "tf.zeros(s)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "var",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pow_133": {
                "x": {
                    "value": "self.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "new_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign(self.t, self.t + 1)",
                            "Call"
                        ],
                        [
                            "self.t.assign_add(1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_138": {
                "input_tensor": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "i in enumerate(latent_v)",
                            "Call"
                        ],
                        [
                            "i in range(len(da))",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "self.chain_axes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_143": {
                "input_tensor": {
                    "value": "i * (q - mean)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "self.chain_axes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "less_300": {
                "x": {
                    "value": "tf.cast(t, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.mass_collect_iters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_317": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "less_330": {
                "x": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.minimum(-new_hamiltonian + old_hamiltonian, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.where(is_finite, acceptance_rate, tf.zeros_like(acceptance_rate))",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(q, p, new_q, new_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(acceptance_rate)",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(self.q, p, current_q, current_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.target_acceptance_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_xor_335": {
                "x": {
                    "value": "tf.less(last_acceptance_rate, self.target_acceptance_rate)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(acceptance_rate, self.target_acceptance_rate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_343": {
                "value": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logical_and_357": {
                "x": {
                    "value": "tf.less(i, self.n_leapfrogs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less(0, i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_453": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_456": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_466": {
                "x": {
                    "value": "new_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign(self.t, self.t + 1)",
                            "Call"
                        ],
                        [
                            "self.t.assign_add(1.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_467": {
                "x": {
                    "value": "tf.cast(new_t, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.mass_collect_iters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_472": {
                "pred": {
                    "value": "if_initialize_step_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.logical_or(tf.equal(new_t, 1), tf.equal(tf.cast(new_t, tf.int32), self.mass_collect_iters))",
                            "Call"
                        ],
                        [
                            "if_initialize_step_size",
                            "Method Argument"
                        ]
                    ]
                },
                "true_fn": {
                    "value": "iss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iss",
                            "Call"
                        ]
                    ]
                },
                "false_fn": {
                    "value": "lambda : self.step_size",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_492": {
                "variable": {
                    "value": "expanded_if_accept",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expanded_if_accept",
                    "type": "variable",
                    "possible_values": [
                        [
                            "if_accept",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(expanded_if_accept, -1)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(expanded_if_accept, tf.ones_like(nq, dtype=tf.bool))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "shape": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "shape": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cast_300": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_336": {
                "x": {
                    "value": "last_acceptance_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "last_acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "last_acceptance_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.target_acceptance_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_337": {
                "x": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.minimum(-new_hamiltonian + old_hamiltonian, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.where(is_finite, acceptance_rate, tf.zeros_like(acceptance_rate))",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(q, p, new_q, new_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(acceptance_rate)",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(self.q, p, current_q, current_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.target_acceptance_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_355": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_357": {
                "x": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "i in enumerate(latent_v)",
                            "Call"
                        ],
                        [
                            "i in range(len(da))",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.n_leapfrogs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_358": {
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(0)",
                            "Call"
                        ],
                        [
                            "i in enumerate(latent_v)",
                            "Call"
                        ],
                        [
                            "i in range(len(da))",
                            "Call"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ],
                        [
                            "i",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_467": {
                "x": {
                    "value": "new_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign(self.t, self.t + 1)",
                            "Call"
                        ],
                        [
                            "self.t.assign_add(1.0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_485": {
                "input": {
                    "value": "acceptance_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(tf.minimum(-new_hamiltonian + old_hamiltonian, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.where(is_finite, acceptance_rate, tf.zeros_like(acceptance_rate))",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(q, p, new_q, new_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(acceptance_rate)",
                            "Call"
                        ],
                        [
                            "get_acceptance_rate(self.q, p, current_q, current_p, get_log_posterior, mass, self.data_axes)",
                            "Call"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ],
                        [
                            "acceptance_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_494": {
                "input": {
                    "value": "nq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(current_q, self.q, self.data_axes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_495": {
                "condition": {
                    "value": "expanded_if_accept",
                    "type": "variable",
                    "possible_values": [
                        [
                            "if_accept",
                            "variable"
                        ],
                        [
                            "tf.expand_dims(expanded_if_accept, -1)",
                            "Call"
                        ],
                        [
                            "tf.logical_and(expanded_if_accept, tf.ones_like(nq, dtype=tf.bool))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "nq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(current_q, self.q, self.data_axes)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "oq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(current_q, self.q, self.data_axes)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_33": {
                "x": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "momentum",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_97": {
                "x": {
                    "value": "new_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign(self.step, (1 - fresh_start) * self.step + 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_301": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "zhusuan/legacy/distributions/special.py": {
        "tensorflow": {
            "TensorShape_56": {
                "variable": {
                    "value": "self.explicit_batch_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_58": {
                "variable": {
                    "value": "self.explicit_value_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "value_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_123": {
                "variable": {
                    "value": "self.samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_125": {
                "variable": {
                    "value": "self.explicit_value_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dims": {
                    "value": "value_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_165": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "given",
                    "type": "variable",
                    "possible_values": [
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ],
                        [
                            "given",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.samples",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_159": {
                "input": {
                    "value": "self.samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_162": {
                "x": {
                    "value": "self.prob(given)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_167": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(given, self.samples)",
                            "Call"
                        ],
                        [
                            "tf.cast(prob, self.param_dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.param_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_168": {
                "variable": {
                    "value": "inf_dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inf",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.param_dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_147": {
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "cast_171": {
                "x": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(given, self.samples)",
                            "Call"
                        ],
                        [
                            "tf.cast(prob, self.param_dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_dtype_54": {
                "type_value": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32 if dtype is None else tf.as_dtype(dtype).base_dtype",
                            "IfExp"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "zhusuan/legacy/framework/stochastic.py": {
        "tensorflow": {}
    },
    "zhusuan/sgmcmc.py": {
        "tensorflow": {
            "Variable_73": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "t",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_184": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_307": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_309": {
                "variable": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "friction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.25",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_311": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "variance_estimate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_315": {
                "variable": {
                    "value": "self.n_iter_resample_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "n_iter_resample_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "n_iter_resample_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_434": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_436": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "variance_extra",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "variance_extra",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_438": {
                "variable": {
                    "value": "self.tune_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "tune_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "tune_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_442": {
                "variable": {
                    "value": "self.n_iter_resample_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "n_iter_resample_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "20",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "n_iter_resample_v",
                    "type": "str",
                    "possible_values": []
                }
            },
            "group_108": {
                "variable": {
                    "value": "sample_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*update_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "assign_230": {
                "variable": {
                    "value": "aux",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign(aux, hps.decay * aux + (1 - hps.decay) * grad ** 2)",
                            "Call"
                        ],
                        [
                            "aux",
                            "Method Argument"
                        ],
                        [
                            "aux",
                            "Method Argument"
                        ]
                    ]
                },
                "value": {
                    "value": "hps.decay * aux + (1 - hps.decay) * grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_350": {
                "variable": {
                    "value": "decay_half",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-0.5 * self.alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_97": {
                "ys": {
                    "value": "_get_log_posterior(var_list, observed)",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "control_dependencies_107": {
                "control_inputs": {
                    "value": "[self.t.assign_add(1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Variable_323": {
                "initial_value": {
                    "value": "tf.random_normal(tf.shape(q), stddev=tf.sqrt(self.lr))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_331": {
                "pred": {
                    "value": "tf.equal(self.n_iter_resample_v, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : v",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(tf.equal(tf.mod(self.t, self.n_iter_resample_v), 0), lambda : resample_momentum(v), lambda : v)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "reduce_mean_359": {
                "input_tensor": {
                    "value": "new_v ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_363": {
                "control_inputs": {
                    "value": "new_vs + new_qs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_368": {
                "*inputs": {
                    "value": "update_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.assign(new_q)",
                            "Call"
                        ],
                        [
                            "q.assign(new_q)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "update_v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_451": {
                "initial_value": {
                    "value": "tf.random_normal(tf.shape(q), stddev=tf.sqrt(self.lr))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cond_471": {
                "pred": {
                    "value": "tf.equal(self.n_iter_resample_v, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : v",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.cond(tf.equal(tf.mod(self.t, self.n_iter_resample_v), 0), lambda : resample_momentum(v), lambda : v)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "control_dependencies_511": {
                "control_inputs": {
                    "value": "new_vs + new_qs + new_alphas",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_519": {
                "*inputs": {
                    "value": "update_q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q.assign(new_q)",
                            "Call"
                        ],
                        [
                            "q.assign(new_q)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "update_v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_197": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Variable_226": {
                "initial_value": {
                    "value": "tf.zeros_like(q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_254": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_328": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v in enumerate(latent_v)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_332": {
                "x": {
                    "value": "self.n_iter_resample_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_340": {
                "input": {
                    "value": "old_v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_455": {
                "initial_value": {
                    "value": "self.a * tf.ones(tf.shape(q))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_458": {
                "initial_value": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_462": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v in enumerate(latent_v)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_468": {
                "input_tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_472": {
                "x": {
                    "value": "self.n_iter_resample_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_480": {
                "input": {
                    "value": "old_v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_496": {
                "x": {
                    "value": "-0.5 * alpha1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_197": {
                "x": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_226": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_231": {
                "x": {
                    "value": "aux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.assign(aux, hps.decay * aux + (1 - hps.decay) * grad ** 2)",
                            "Call"
                        ],
                        [
                            "aux",
                            "Method Argument"
                        ],
                        [
                            "aux",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_254": {
                "x": {
                    "value": "self.lr * g",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_323": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_328": {
                "x": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_334": {
                "pred": {
                    "value": "tf.equal(tf.mod(self.t, self.n_iter_resample_v), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : resample_momentum(v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : v",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "sqrt_341": {
                "x": {
                    "value": "2 * (self.alpha - self.beta) * self.lr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_451": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_462": {
                "x": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_474": {
                "pred": {
                    "value": "tf.equal(tf.mod(self.t, self.n_iter_resample_v), 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : resample_momentum(v)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : v",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "sqrt_480": {
                "x": {
                    "value": "2 * self.a * self.lr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_323": {
                "x": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_335": {
                "x": {
                    "value": "tf.mod(self.t, self.n_iter_resample_v)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_451": {
                "x": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_455": {
                "shape": {
                    "value": "tf.shape(q)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "equal_475": {
                "x": {
                    "value": "tf.mod(self.t, self.n_iter_resample_v)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mod_335": {
                "x1": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x2": {
                    "value": "self.n_iter_resample_v",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_455": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mod_475": {
                "x1": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x2": {
                    "value": "self.n_iter_resample_v",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "zhusuan/transform.py": {
        "tensorflow": {
            "convert_to_tensor_30": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_x, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_x, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, tf.shape(input_x))",
                            "Call"
                        ],
                        [
                            "z + tf.matmul(activation, param_u, name='update')",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "sigma * z + (1 - sigma) * m",
                            "BinOp"
                        ],
                        [
                            "s * z + m",
                            "BinOp"
                        ],
                        [
                            "tf.reverse(z, [-1])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_44": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.constant(mask, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(z, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_91": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_92": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_115": {
                "variable": {
                    "value": "dynamic_sample_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_116": {
                "variable": {
                    "value": "dynamic_logprob_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rank_117": {
                "variable": {
                    "value": "dynamic_sample_ndim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rank_118": {
                "variable": {
                    "value": "dynamic_logprob_ndim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assert_greater_equal_120": {
                "variable": {
                    "value": "_assert_sample_ndim",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dynamic_sample_ndim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rank(samples)",
                            "Call"
                        ],
                        [
                            "tf.rank(samples)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "samples should have rank >= 2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_equal_125": {
                "variable": {
                    "value": "_assert_logprob_ndim",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dynamic_logprob_ndim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rank(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.rank(log_probs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dynamic_sample_ndim - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "message": {
                    "value": "log_probs should have rank (N-1), while N is the rank of samples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_equal_131": {
                "variable": {
                    "value": "_assert_same_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dynamic_sample_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "dynamic_logprob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.shape(log_probs)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "\"samples and log_probs don't have same shape of (N-1) dims,while N is the rank of samples\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_138": {
                "variable": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_139": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_140": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(z, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_x, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_x, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, tf.shape(input_x))",
                            "Call"
                        ],
                        [
                            "z + tf.matmul(activation, param_u, name='update')",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "sigma * z + (1 - sigma) * m",
                            "BinOp"
                        ],
                        [
                            "s * z + m",
                            "BinOp"
                        ],
                        [
                            "tf.reverse(z, [-1])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(input_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_196": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(input_x)[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_226": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_227": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_251": {
                "variable": {
                    "value": "dynamic_sample_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_252": {
                "variable": {
                    "value": "dynamic_logprob_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rank_253": {
                "variable": {
                    "value": "dynamic_sample_ndim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rank_254": {
                "variable": {
                    "value": "dynamic_logprob_ndim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assert_greater_equal_256": {
                "variable": {
                    "value": "_assert_sample_ndim",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dynamic_sample_ndim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rank(samples)",
                            "Call"
                        ],
                        [
                            "tf.rank(samples)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "samples should have rank >= 2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_equal_261": {
                "variable": {
                    "value": "_assert_logprob_ndim",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dynamic_logprob_ndim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rank(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.rank(log_probs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "dynamic_sample_ndim - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "message": {
                    "value": "log_probs should have rank (N-1), while N is the rank of samples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assert_equal_267": {
                "variable": {
                    "value": "_assert_same_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dynamic_sample_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "dynamic_logprob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.shape(log_probs)",
                            "Call"
                        ]
                    ]
                },
                "message": {
                    "value": "\"samples and log_probs don't have same shape of (N-1) dims,while N is the rank of samples\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "convert_to_tensor_274": {
                "variable": {
                    "value": "joint_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_275": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "m_w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(shape=[d, d], mean=0, stddev=0.005, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "m_w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "s_w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(shape=[d, d], mean=0, stddev=0.005, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "s_w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_x, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_x, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, tf.shape(input_x))",
                            "Call"
                        ],
                        [
                            "z + tf.matmul(activation, param_u, name='update')",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "sigma * z + (1 - sigma) * m",
                            "BinOp"
                        ],
                        [
                            "s * z + m",
                            "BinOp"
                        ],
                        [
                            "tf.reverse(z, [-1])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "m_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal(shape=[d, d], mean=0, stddev=0.005, dtype=tf.float32), name='m_w')",
                            "Call"
                        ],
                        [
                            "mask * m_w",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_x, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_x, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, tf.shape(input_x))",
                            "Call"
                        ],
                        [
                            "z + tf.matmul(activation, param_u, name='update')",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "sigma * z + (1 - sigma) * m",
                            "BinOp"
                        ],
                        [
                            "s * z + m",
                            "BinOp"
                        ],
                        [
                            "tf.reverse(z, [-1])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "s_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal(shape=[d, d], mean=0, stddev=0.005, dtype=tf.float32), name='s_w')",
                            "Call"
                        ],
                        [
                            "mask * s_w",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_62": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(z, s_w)",
                            "Call"
                        ],
                        [
                            "tf.exp(s)",
                            "Call"
                        ],
                        [
                            "tf.reshape(s, tf.shape(input_x))",
                            "Call"
                        ],
                        [
                            "autoregressive_nn('iaf', iter, z, hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_64": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(z, m_w)",
                            "Call"
                        ],
                        [
                            "tf.reshape(m, tf.shape(input_x))",
                            "Call"
                        ],
                        [
                            "autoregressive_nn('iaf', iter, z, hidden)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(input_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(z, s_w)",
                            "Call"
                        ],
                        [
                            "tf.exp(s)",
                            "Call"
                        ],
                        [
                            "tf.reshape(s, tf.shape(input_x))",
                            "Call"
                        ],
                        [
                            "autoregressive_nn('iaf', iter, z, hidden)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(input_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "identity_123": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_129": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_135": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_136": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_173": {
                "variable": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "param_us[iter]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "param_ws[iter]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "scalar",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_174": {
                "variable": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(param_us[iter], param_ws[iter], name='scalar')",
                            "Call"
                        ],
                        [
                            "tf.reshape(scalar, [])",
                            "Call"
                        ],
                        [
                            "tf.identity(scalar)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "assert_greater_equal_177": {
                "variable": {
                    "value": "invertible_check",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(param_us[iter], param_ws[iter], name='scalar')",
                            "Call"
                        ],
                        [
                            "tf.reshape(scalar, [])",
                            "Call"
                        ],
                        [
                            "tf.identity(scalar)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.constant(-1.0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "message": {
                    "value": "\"w'u must be greater or equal to -1\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_184": {
                "variable": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(z, param_w, name='score') + param_bs[iter]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "activation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_189": {
                "variable": {
                    "value": "reduce_act",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.matmul(z, param_w, name='score') + param_bs[iter], name='activation')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_229": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(hidden, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "hidden",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_259": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_265": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_271": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "tf.identity(samples)",
                            "Call"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ],
                        [
                            "samples",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "identity_272": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, [-1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(log_probs, tf.shape(input_x)[:-1])",
                            "Call"
                        ],
                        [
                            "log_probs - tf.log(det_ja)",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(log_probs, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "tf.identity(log_probs)",
                            "Call"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ],
                        [
                            "log_probs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reverse_289": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_x, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_x, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, tf.shape(input_x))",
                            "Call"
                        ],
                        [
                            "z + tf.matmul(activation, param_u, name='update')",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "sigma * z + (1 - sigma) * m",
                            "BinOp"
                        ],
                        [
                            "s * z + m",
                            "BinOp"
                        ],
                        [
                            "tf.reverse(z, [-1])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_47": {
                "name": {
                    "value": "name + '%d' % id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_static_shape_109": {
                "shape_x": {
                    "value": "static_sample_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "static_logprob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_probs.get_shape()",
                            "Call"
                        ],
                        [
                            "log_probs.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_122": {
                "control_inputs": {
                    "value": "[_assert_sample_ndim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_128": {
                "control_inputs": {
                    "value": "[_assert_logprob_ndim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_134": {
                "control_inputs": {
                    "value": "[_assert_same_shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_148": {
                "name": {
                    "value": "planar_flow_parameters",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_151": {
                "variable": {
                    "value": "param_b",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[1], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'param_b_%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_153": {
                "variable": {
                    "value": "aux_u",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(shape=[d, 1], mean=0, stddev=0.005, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'aux_u_%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_157": {
                "variable": {
                    "value": "param_w",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(shape=[d, 1], mean=0, stddev=0.005, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'para_w_%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_161": {
                "variable": {
                    "value": "dot_prod",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "param_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal(shape=[d, 1], mean=0, stddev=0.005, dtype=tf.float32), name='para_w_%d' % iter)",
                            "Call"
                        ],
                        [
                            "param_ws[iter]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "aux_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal(shape=[d, 1], mean=0, stddev=0.005, dtype=tf.float32), name='aux_u_%d' % iter)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_165": {
                "variable": {
                    "value": "param_u",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "param_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aux_u + param_w / tf.matmul(param_w, param_w, transpose_a=True) * (tf.log(tf.exp(dot_prod) + 1) - 1 - dot_prod)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(param_u, name='param_u_%d' % iter)",
                            "Call"
                        ],
                        [
                            "param_us[iter]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "'param_u_%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_181": {
                "variable": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(param_us[iter], param_ws[iter], name='scalar')",
                            "Call"
                        ],
                        [
                            "tf.reshape(scalar, [])",
                            "Call"
                        ],
                        [
                            "tf.identity(scalar)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_193": {
                "x": {
                    "value": "det_ja",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scalar * (tf.constant(1.0, dtype=tf.float32) - reduce_act * reduce_act) + tf.constant(1.0, dtype=tf.float32)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_195": {
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(z, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_static_shape_245": {
                "shape_x": {
                    "value": "static_sample_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape_y": {
                    "value": "static_logprob_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_probs.get_shape()",
                            "Call"
                        ],
                        [
                            "log_probs.get_shape()",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_258": {
                "control_inputs": {
                    "value": "[_assert_sample_ndim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_264": {
                "control_inputs": {
                    "value": "[_assert_logprob_ndim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_270": {
                "control_inputs": {
                    "value": "[_assert_same_shape]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_281": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(z, s_w)",
                            "Call"
                        ],
                        [
                            "tf.exp(s)",
                            "Call"
                        ],
                        [
                            "tf.reshape(s, tf.shape(input_x))",
                            "Call"
                        ],
                        [
                            "autoregressive_nn('iaf', iter, z, hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_64": {
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(z, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_65": {
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(z, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_178": {
                "value": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_180": {
                "control_inputs": {
                    "value": "[invertible_check]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_192": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "a": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tanh(tf.matmul(z, param_w, name='score') + param_bs[iter], name='activation')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "param_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aux_u + param_w / tf.matmul(param_w, param_w, transpose_a=True) * (tf.log(tf.exp(dot_prod) + 1) - 1 - dot_prod)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(param_u, name='param_u_%d' % iter)",
                            "Call"
                        ],
                        [
                            "param_us[iter]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "update",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_196": {
                "input": {
                    "value": "input_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(z, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_151": {
                "shape": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "a": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(input_x, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_x, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.reshape(z, tf.shape(input_x))",
                            "Call"
                        ],
                        [
                            "z + tf.matmul(activation, param_u, name='update')",
                            "BinOp"
                        ],
                        [
                            "tf.convert_to_tensor(samples, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "sigma * z + (1 - sigma) * m",
                            "BinOp"
                        ],
                        [
                            "s * z + m",
                            "BinOp"
                        ],
                        [
                            "tf.reverse(z, [-1])",
                            "Call"
                        ],
                        [
                            "z",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "param_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal(shape=[d, 1], mean=0, stddev=0.005, dtype=tf.float32), name='para_w_%d' % iter)",
                            "Call"
                        ],
                        [
                            "param_ws[iter]",
                            "Subscript"
                        ]
                    ]
                },
                "name": {
                    "value": "score",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_283": {
                "input_tensor": {
                    "value": "tf.log(sigma)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_287": {
                "input_tensor": {
                    "value": "tf.log(s)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_191": {
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_283": {
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(s)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_287": {
                "x": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(z, s_w)",
                            "Call"
                        ],
                        [
                            "tf.exp(s)",
                            "Call"
                        ],
                        [
                            "tf.reshape(s, tf.shape(input_x))",
                            "Call"
                        ],
                        [
                            "autoregressive_nn('iaf', iter, z, hidden)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_162": {
                "a": {
                    "value": "param_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal(shape=[d, 1], mean=0, stddev=0.005, dtype=tf.float32), name='para_w_%d' % iter)",
                            "Call"
                        ],
                        [
                            "param_ws[iter]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "param_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal(shape=[d, 1], mean=0, stddev=0.005, dtype=tf.float32), name='para_w_%d' % iter)",
                            "Call"
                        ],
                        [
                            "param_ws[iter]",
                            "Subscript"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_164": {
                "x": {
                    "value": "tf.exp(dot_prod) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_164": {
                "x": {
                    "value": "dot_prod",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(param_w, aux_u, transpose_a=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "zhusuan/utils.py": {
        "tensorflow": {
            "convert_to_tensor_168": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_169": {
                "variable": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "convert_to_tensor_190": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_191": {
                "variable": {
                    "value": "x_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_173": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.reduce_sum(tf.exp(x - x_max), axis=axis, keepdims=True)) + x_max",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(ret, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.reduce_mean(tf.exp(x - x_max), axis=axis, keepdims=True)) + x_max",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(ret, axis=axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_195": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.log(tf.reduce_sum(tf.exp(x - x_max), axis=axis, keepdims=True)) + x_max",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(ret, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.log(tf.reduce_mean(tf.exp(x - x_max), axis=axis, keepdims=True)) + x_max",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(ret, axis=axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_28": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "negative_31": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_34": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "add_37": {
                "x": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "subtract_40": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "subtract_43": {
                "x": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_46": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_49": {
                "x": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "divide_52": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "divide_55": {
                "x": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truediv_58": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truediv_61": {
                "x": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floordiv_64": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floordiv_67": {
                "x": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mod_70": {
                "x1": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mod_73": {
                "x1": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_76": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_79": {
                "x": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_not_83": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_and_86": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_and_89": {
                "x": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_or_92": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_or_95": {
                "x": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_xor_98": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_xor_101": {
                "x": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_105": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "less_equal_108": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_111": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "greater_equal_114": {
                "x": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "other",
                    "type": "variable",
                    "possible_values": [
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ],
                        [
                            "other",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_170": {
                "x": {
                    "value": "tf.reduce_sum(tf.exp(x - x_max), axis=axis, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_192": {
                "x": {
                    "value": "tf.reduce_mean(tf.exp(x - x_max), axis=axis, keepdims=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_118": {
                "value": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_170": {
                "input_tensor": {
                    "value": "tf.exp(x - x_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_192": {
                "input_tensor": {
                    "value": "tf.exp(x - x_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "name_scope_214": {
                "name": {
                    "value": "args[0].__class__.__name__ + '.' + f.__name__",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_170": {
                "x": {
                    "value": "x - x_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_192": {
                "x": {
                    "value": "x - x_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "zhusuan/variational/base.py": {
        "tensorflow": {
            "register_tensor_conversion_function_186": {
                "base_type": {
                    "value": "VariationalObjective",
                    "type": "variable",
                    "possible_values": []
                },
                "conversion_func": {
                    "value": "VariationalObjective._to_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "zhusuan/variational/exclusive_kl.py": {
        "tensorflow": {
            "reduce_mean_136": {
                "variable": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "lower_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._log_joint_term()",
                            "Call"
                        ],
                        [
                            "lower_bound + self._entropy_term()",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(lower_bound, self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_208": {
                "variable": {
                    "value": "bc",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "l_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._log_joint_term() + self._entropy_term()",
                            "BinOp"
                        ],
                        [
                            "l_signal - moving_mean",
                            "BinOp"
                        ],
                        [
                            "l_signal - baseline",
                            "BinOp"
                        ],
                        [
                            "tf.identity(l_signal)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_210": {
                "variable": {
                    "value": "moving_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "moving_mean",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_226": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-self._log_joint_term()",
                            "UnaryOp"
                        ],
                        [
                            "cost + tf.stop_gradient(l_signal) * self._entropy_term()",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(cost, self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_219": {
                "variable": {
                    "value": "l_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._log_joint_term() + self._entropy_term()",
                            "BinOp"
                        ],
                        [
                            "l_signal - moving_mean",
                            "BinOp"
                        ],
                        [
                            "l_signal - baseline",
                            "BinOp"
                        ],
                        [
                            "tf.identity(l_signal)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_204": {
                "variable": {
                    "value": "baseline_cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "baseline_cost",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "0.5 * tf.square(tf.stop_gradient(l_signal) - baseline)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(baseline_cost, self._axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "control_dependencies_218": {
                "control_inputs": {
                    "value": "[update_mean]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_223": {
                "input": {
                    "value": "l_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._log_joint_term() + self._entropy_term()",
                            "BinOp"
                        ],
                        [
                            "l_signal - moving_mean",
                            "BinOp"
                        ],
                        [
                            "l_signal - baseline",
                            "BinOp"
                        ],
                        [
                            "tf.identity(l_signal)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_201": {
                "x": {
                    "value": "tf.stop_gradient(l_signal) - baseline",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_212": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stop_gradient_202": {
                "input": {
                    "value": "l_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._log_joint_term() + self._entropy_term()",
                            "BinOp"
                        ],
                        [
                            "l_signal - moving_mean",
                            "BinOp"
                        ],
                        [
                            "l_signal - baseline",
                            "BinOp"
                        ],
                        [
                            "tf.identity(l_signal)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "zhusuan/variational/inclusive_kl.py": {
        "tensorflow": {
            "reduce_max_139": {
                "variable": {
                    "value": "log_w_max",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "log_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._log_joint_term() + self._entropy_term()",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_140": {
                "variable": {
                    "value": "w_u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "log_w - log_w_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_141": {
                "variable": {
                    "value": "w_tilde",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w_u / tf.reduce_sum(w_u, self._axis, keepdims=True)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_143": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "w_tilde * self._entropy_term()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_142": {
                "input_tensor": {
                    "value": "w_u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(log_w - log_w_max)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "zhusuan/variational/monte_carlo.py": {
        "tensorflow": {
            "assert_greater_equal_192": {
                "variable": {
                    "value": "_assert_size_along_axis",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(l_signal)[self._axis]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "message": {
                    "value": "err_msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VIMCO is a multi-sample gradient estimator, size along `axis` in the objective should be larger than 1.'",
                            "str"
                        ]
                    ]
                }
            },
            "rank_203": {
                "variable": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l_signal",
                            "variable"
                        ],
                        [
                            "tf.transpose(x, perm=perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_204": {
                "variable": {
                    "value": "axis_dim_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(self._axis, n_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_205": {
                "variable": {
                    "value": "original_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.one_hot(n_dim - 1, n_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_208": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "original_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.one_hot(n_dim - 1, n_dim), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "axis_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([n_dim], tf.int32) * self._axis",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.range(n_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_209": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "axis_dim_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.one_hot(self._axis, n_dim), tf.bool)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "originals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([n_dim], tf.int32) * (n_dim - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(original_mask, axis_dim, tf.range(n_dim))",
                            "Call"
                        ],
                        [
                            "tf.where(axis_dim_mask, originals, perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_210": {
                "variable": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones([n_dim], tf.int32), [tf.shape(x)[self._axis]]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l_signal",
                            "variable"
                        ],
                        [
                            "tf.transpose(x, perm=perm)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(original_mask, axis_dim, tf.range(n_dim))",
                            "Call"
                        ],
                        [
                            "tf.where(axis_dim_mask, originals, perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_214": {
                "variable": {
                    "value": "sub_x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sub_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean_except_signal",
                            "variable"
                        ],
                        [
                            "tf.transpose(sub_x, perm=perm)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(original_mask, axis_dim, tf.range(n_dim))",
                            "Call"
                        ],
                        [
                            "tf.where(axis_dim_mask, originals, perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "tile_215": {
                "variable": {
                    "value": "x_ex",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(x, n_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "multiples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.ones([n_dim], tf.int32), [tf.shape(x)[self._axis]]], 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_217": {
                "variable": {
                    "value": "control_variate",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "log_mean_exp(x_ex, n_dim - 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(original_mask, axis_dim, tf.range(n_dim))",
                            "Call"
                        ],
                        [
                            "tf.where(axis_dim_mask, originals, perm)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_223": {
                "variable": {
                    "value": "fake_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-self._entropy_term() * tf.stop_gradient(l_signal)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "identity_195": {
                "variable": {
                    "value": "l_signal",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_w",
                            "variable"
                        ],
                        [
                            "tf.identity(l_signal)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(l_signal, self._axis, keepdims=True) - control_variate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "control_dependencies_194": {
                "control_inputs": {
                    "value": "[_assert_size_along_axis]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_200": {
                "x": {
                    "value": "tf.shape(l_signal)[self._axis] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "l_signal.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_204": {
                "indices": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rank(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_205": {
                "indices": {
                    "value": "n_dim - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "depth": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rank(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_206": {
                "shape": {
                    "value": "[n_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_207": {
                "shape": {
                    "value": "[n_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_215": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l_signal",
                            "variable"
                        ],
                        [
                            "tf.transpose(x, perm=perm)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.rank(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_193": {
                "input": {
                    "value": "l_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_w",
                            "variable"
                        ],
                        [
                            "tf.identity(l_signal)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(l_signal, self._axis, keepdims=True) - control_variate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_199": {
                "input_tensor": {
                    "value": "l_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_w",
                            "variable"
                        ],
                        [
                            "tf.identity(l_signal)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(l_signal, self._axis, keepdims=True) - control_variate",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "self._axis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_211": {
                "shape": {
                    "value": "[n_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_224": {
                "input": {
                    "value": "l_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_w",
                            "variable"
                        ],
                        [
                            "tf.identity(l_signal)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(l_signal, self._axis, keepdims=True) - control_variate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_200": {
                "input": {
                    "value": "l_signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_w",
                            "variable"
                        ],
                        [
                            "tf.identity(l_signal)",
                            "Call"
                        ],
                        [
                            "log_mean_exp(l_signal, self._axis, keepdims=True) - control_variate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_211": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l_signal",
                            "variable"
                        ],
                        [
                            "tf.transpose(x, perm=perm)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}