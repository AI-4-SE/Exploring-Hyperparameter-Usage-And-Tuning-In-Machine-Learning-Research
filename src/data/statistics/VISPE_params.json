{
    "main.py": {
        "torch": {
            "KLDivLoss_34": {
                "variable": {
                    "value": "criterion_KL",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_39": {
                "variable": {
                    "value": "x1_x2_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(x1_feat, x2_feat.t()) / arg.lamda",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_40": {
                "variable": {
                    "value": "denominator1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1_x2_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(torch.matmul(x1_feat, x2_feat.t()) / arg.lamda)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_42": {
                "variable": {
                    "value": "prob1_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1_x2_mat / denominator1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_45": {
                "variable": {
                    "value": "x2_x2_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(x2_feat, x2_feat.t()) / arg.lamda",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_46": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "x1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_48": {
                "variable": {
                    "value": "denominator2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2_x2_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(torch.matmul(x2_feat, x2_feat.t()) / arg.lamda)",
                            "Call"
                        ],
                        [
                            "I * torch.diag(x1_x2_mat) + (1 - I) * x2_x2_mat",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_50": {
                "variable": {
                    "value": "prob2_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2_x2_mat / denominator2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "dataloader[seen_train_knn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['seen_train_knn']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "arg.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "variable": {
                    "value": "dataloader[seen_test_knn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['seen_test_knn']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "arg.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_147": {
                "variable": {
                    "value": "dataloader[unseen_train_knn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['unseen_train_knn']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "arg.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "dataloader[unseen_test_knn]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['unseen_test_knn']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "arg.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_154": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "arg.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "arg.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_device_124": {
                "device": {
                    "value": "arg.gpu_num",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_139": {
                "variable": {
                    "value": "dataloader[train]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "arg.batchSize",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_53": {
                "input": {
                    "value": "prob1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1_x2_mat / denominator1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_55": {
                "input": {
                    "value": "torch.log(prob1_diag) + torch.log(prob2_diag)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_39": {
                "input": {
                    "value": "x1_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x2_feat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_45": {
                "input": {
                    "value": "x2_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x2_feat.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_47": {
                "input": {
                    "value": "x1_x2_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(torch.matmul(x1_feat, x2_feat.t()) / arg.lamda)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_190": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model/model_' + arg.dataset + '_' + str(arg.trial) + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_55": {
                "input": {
                    "value": "prob2_diag",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.diag(prob2)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_199": {
                "f": {
                    "value": "model/example.pt",
                    "type": "str",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_206": {
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model/model_' + arg.dataset + '_' + str(arg.trial) + '.pt'",
                            "BinOp"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "util.py": {
        "torch": {
            "Tensor_22": {
                "variable": {
                    "value": "trainFeatures",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "temploader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainloader.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "retrieval_one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainLabels.max() + 1",
                            "BinOp"
                        ],
                        [
                            "np.int(C)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.classifier1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*list(models.vgg16(pretrained=False).classifier)[0:5]",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "normalize_109": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.features(x).view(x.shape[0], 25088)",
                            "Call"
                        ],
                        [
                            "self.classifier1(x).view(x.shape[0], 4096)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_47": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(inputs.cuda())",
                            "Call"
                        ],
                        [
                            "net(inputs.cuda())",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "trainFeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((low_dim, ndata))",
                            "Call"
                        ],
                        [
                            "torch.Tensor(trainFeatures).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_50": {
                "variable": {
                    "value": "retrieval",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "candidates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainLabels.view(1, -1).expand(batchSize, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "yi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.topk(K, dim=1, largest=True, sorted=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_53": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "retrieval_one_hot.view(batchSize, -1, C)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}