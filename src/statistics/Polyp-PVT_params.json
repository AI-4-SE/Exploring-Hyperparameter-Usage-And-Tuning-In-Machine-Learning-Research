{
    "Test.py": {
        "torch": {
            "load_16": {
                "f": {
                    "value": "opt.pth_path",
                    "possible_values": []
                }
            },
            "upsample_38": {
                "variable": {
                    "value": "res",
                    "possible_values": []
                },
                "input": {
                    "value": "P1 + P2",
                    "possible_values": []
                },
                "size": {
                    "value": "gt.shape",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "Train.py": {
        "torch": {
            "binary_cross_entropy_with_logits_17": {
                "variable": {
                    "value": "wbce",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "mask",
                    "possible_values": []
                },
                "reduce": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "sigmoid_20": {
                "variable": {
                    "value": "pred",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "torch.sigmoid(pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "upsample_45": {
                "variable": {
                    "value": "res",
                    "possible_values": []
                },
                "input": {
                    "value": "res + res1",
                    "possible_values": []
                },
                "size": {
                    "value": "gt.shape",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "save_104": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + str(epoch) + 'PolypPVT.pth'",
                    "possible_values": []
                }
            },
            "AdamW_201": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "possible_values": []
                }
            },
            "SGD_203": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.lr",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "possible_values": []
                }
            },
            "abs_16": {
                "input": {
                    "value": "F.avg_pool2d(mask, kernel_size=31, stride=1, padding=15) - mask",
                    "possible_values": []
                }
            },
            "upsample_79": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "input": {
                    "value": "images",
                    "possible_values": [
                        [
                            "Variable(images).cuda()",
                            "Call"
                        ],
                        [
                            "F.upsample(images, size=(trainsize, trainsize), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(trainsize, trainsize)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "upsample_80": {
                "variable": {
                    "value": "gts",
                    "possible_values": []
                },
                "input": {
                    "value": "gts",
                    "possible_values": [
                        [
                            "Variable(gts).cuda()",
                            "Call"
                        ],
                        [
                            "F.upsample(gts, size=(trainsize, trainsize), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(trainsize, trainsize)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "save_120": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + 'PolypPVT.pth'",
                    "possible_values": []
                }
            },
            "save_121": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path + str(epoch) + 'PolypPVT-best.pth'",
                    "possible_values": []
                }
            },
            "avg_pool2d_16": {
                "input": {
                    "value": "mask",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "31",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "15",
                    "possible_values": []
                }
            }
        }
    },
    "lib/pvt.py": {
        "torch": {
            "randn_220": {
                "variable": {
                    "value": "input_tensor",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "352",
                    "possible_values": []
                },
                "layout": {
                    "value": "352",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "3 if kernel_size == 7 else 1",
                            "IfExp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_32": {
                "variable": {
                    "value": "self.upsample",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "x2_2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x2_1, self.conv_upsample4(self.upsample(x1_1)))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "x3_2",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x3_1, self.conv_upsample5(self.upsample(x2_2)))",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv1d_65": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_node",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_node",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv1d_67": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_state",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_state",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_83": {
                "variable": {
                    "value": "self.priors",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(mids + 2, mids + 2)",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.conv_state",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_s",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv_proj",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_in",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.num_s",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "variable": {
                    "value": "self.conv_extend",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_s",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_in",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "upsample_91": {
                "variable": {
                    "value": "edge",
                    "possible_values": []
                },
                "input": {
                    "value": "edge",
                    "possible_values": [
                        [
                            "F.upsample(edge, (x.size()[-2], x.size()[-1]))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(edge, dim=1)[:, 1, :, :].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(x.size()[-2], x.size()[-1])",
                    "possible_values": []
                }
            },
            "unsqueeze_94": {
                "variable": {
                    "value": "edge",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_104": {
                "variable": {
                    "value": "x_proj_reshaped",
                    "possible_values": []
                },
                "input": {
                    "value": "x_anchor.permute(0, 2, 1)",
                    "possible_values": []
                },
                "other": {
                    "value": "x_proj.reshape(n, self.num_s, -1)",
                    "possible_values": []
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "x_proj_reshaped",
                    "possible_values": []
                },
                "input": {
                    "value": "x_proj_reshaped",
                    "possible_values": [
                        [
                            "torch.matmul(x_anchor.permute(0, 2, 1), x_proj.reshape(n, self.num_s, -1))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(x_proj_reshaped, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "matmul_109": {
                "variable": {
                    "value": "x_n_state",
                    "possible_values": []
                },
                "input": {
                    "value": "x_state_reshaped",
                    "possible_values": [
                        [
                            "self.conv_state(x).view(n, self.num_s, -1)",
                            "Call"
                        ],
                        [
                            "torch.matmul(x_n_rel, x_rproj_reshaped)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_proj_reshaped.permute(0, 2, 1)",
                    "possible_values": []
                }
            },
            "matmul_114": {
                "variable": {
                    "value": "x_state_reshaped",
                    "possible_values": []
                },
                "input": {
                    "value": "x_n_rel",
                    "possible_values": [
                        [
                            "self.gcn(x_n_state)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x_rproj_reshaped",
                    "possible_values": [
                        [
                            "x_proj_reshaped",
                            "Name"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_124": {
                "variable": {
                    "value": "self.avg_pool",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "AdaptiveMaxPool2d_125": {
                "variable": {
                    "value": "self.max_pool",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_127": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes // 16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "variable": {
                    "value": "self.relu1",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_129": {
                "variable": {
                    "value": "self.fc2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes // 16",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sigmoid_131": {
                "variable": {
                    "value": "self.sigmoid",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_147": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "3 if kernel_size == 7 else 1",
                            "IfExp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sigmoid_148": {
                "variable": {
                    "value": "self.sigmoid",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_151": {
                "variable": {
                    "value": "avg_out",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([avg_out, max_out], dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_152": {
                "variable": {
                    "value": "(max_out, _)",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([avg_out, max_out], dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[avg_out, max_out]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_164": {
                "variable": {
                    "value": "save_model",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": [
                        [
                            "'./pretrained_pth/pvt_v2_b2.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Upsample_180": {
                "variable": {
                    "value": "self.down05",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "0.5",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_181": {
                "variable": {
                    "value": "self.out_SAM",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_182": {
                "variable": {
                    "value": "self.out_CFM",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "channel",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_213": {
                "variable": {
                    "value": "prediction1_8",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction1",
                    "possible_values": [
                        [
                            "self.out_CFM(cfm_feature)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "interpolate_214": {
                "variable": {
                    "value": "prediction2_8",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction2",
                    "possible_values": [
                        [
                            "self.out_SAM(sam_feature)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "8",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "softmax_94": {
                "input": {
                    "value": "edge",
                    "possible_values": [
                        [
                            "F.upsample(edge, (x.size()[-2], x.size()[-1]))",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(edge, dim=1)[:, 1, :, :].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "lib/pvtv2.py": {
        "torch": {
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_22": {
                "variable": {
                    "value": "self.fc2",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "possible_values": [
                        [
                            "hidden_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "possible_values": [
                        [
                            "out_features or in_features",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.drop",
                    "possible_values": []
                },
                "p": {
                    "value": "drop",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.q",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "qkv_bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "self.kv",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim * 2",
                    "possible_values": []
                },
                "bias": {
                    "value": "qkv_bias",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_64": {
                "variable": {
                    "value": "self.attn_drop",
                    "possible_values": []
                },
                "p": {
                    "value": "attn_drop",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.proj",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_66": {
                "variable": {
                    "value": "self.proj_drop",
                    "possible_values": []
                },
                "p": {
                    "value": "proj_drop",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_167": {
                "variable": {
                    "value": "self.proj",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_chans",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "embed_dim",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "patch_size",
                    "possible_values": [
                        [
                            "to_2tuple(patch_size)",
                            "Call"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ],
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "(patch_size[0] // 2, patch_size[1] // 2)",
                    "possible_values": []
                }
            },
            "LayerNorm_169": {
                "variable": {
                    "value": "self.norm",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "embed_dim",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_219": {
                "variable": {
                    "value": "self.block1",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dims[0], num_heads=num_heads[0], mlp_ratio=mlp_ratios[0], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[cur + i], norm_layer=norm_layer, sr_ratio=sr_ratios[0]) for i in range(depths[0])]",
                    "possible_values": []
                }
            },
            "ModuleList_227": {
                "variable": {
                    "value": "self.block2",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dims[1], num_heads=num_heads[1], mlp_ratio=mlp_ratios[1], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[cur + i], norm_layer=norm_layer, sr_ratio=sr_ratios[1]) for i in range(depths[1])]",
                    "possible_values": []
                }
            },
            "ModuleList_235": {
                "variable": {
                    "value": "self.block3",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dims[2], num_heads=num_heads[2], mlp_ratio=mlp_ratios[2], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[cur + i], norm_layer=norm_layer, sr_ratio=sr_ratios[2]) for i in range(depths[2])]",
                    "possible_values": []
                }
            },
            "ModuleList_243": {
                "variable": {
                    "value": "self.block4",
                    "possible_values": []
                },
                "modules": {
                    "value": "[Block(dim=embed_dims[3], num_heads=num_heads[3], mlp_ratio=mlp_ratios[3], qkv_bias=qkv_bias, qk_scale=qk_scale, drop=drop_rate, attn_drop=attn_drop_rate, drop_path=dpr[cur + i], norm_layer=norm_layer, sr_ratio=sr_ratios[3]) for i in range(depths[3])]",
                    "possible_values": []
                }
            },
            "Conv2d_365": {
                "variable": {
                    "value": "self.dwconv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                },
                "groups": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.sr",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "sr_ratio",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "sr_ratio",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_71": {
                "variable": {
                    "value": "self.norm",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "dim",
                    "possible_values": [
                        [
                            "768",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_125": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_305": {
                "in_features": {
                    "value": "self.embed_dim",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Identity_305": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "linspace_217": {
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(depths)",
                    "possible_values": []
                }
            },
            "linspace_276": {
                "start": {
                    "value": "0",
                    "possible_values": []
                },
                "end": {
                    "value": "drop_path_rate",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "steps": {
                    "value": "sum(self.depths)",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataloader.py": {
        "torch": {
            "DataLoader_112": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "PolypDataset(image_root, gt_root, trainsize, augmentation)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batchsize",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "num_workers",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "pin_memory",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "np.random.randint(2147483647)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_66": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "np.random.randint(2147483647)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "mean_46": {
                "input": {
                    "value": "torch.stack(self.losses[np.maximum(len(self.losses) - self.num, 0):])",
                    "possible_values": []
                }
            },
            "stack_46": {
                "tensors": {
                    "value": "self.losses[np.maximum(len(self.losses) - self.num, 0):]",
                    "possible_values": []
                }
            }
        }
    }
}