{
    "src/data.py": {
        "sklearn": {
            "train_test_split_207": {
                "variable": {
                    "value": "(X_train, X_val, y_train, y_val)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "test_size": {
                    "value": "val_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor(y)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_246": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_249": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_252": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randn_45": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(10, in_ch, height, height)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_46": {
                "variable": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "permute_204": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_223": {
                "variable": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_291": {
                "variable": {
                    "value": "coreset_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "coreset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_dataset.get_random_coreset(size=coreset_size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "core_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "core_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(core_x, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "core_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "core_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(core_y, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "core_task_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "core_task_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(core_task_idx, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "config/cfg.py": {
        "torch": {
            "manual_seed_121": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_117": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/blocks.py": {
        "torch": {
            "ModuleList_93": {
                "variable": {
                    "value": "self.fbns_main1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[create_freezable_bn(self.out_ch) for _ in range(self.N_tasks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_94": {
                "variable": {
                    "value": "self.fbns_main2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[create_freezable_bn(self.out_ch) for _ in range(self.N_tasks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "self.fbns_opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[create_freezable_bn(self.out_ch) for _ in range(self.N_tasks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_gate_fc() for _ in range(self.N_tasks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_104": {
                "variable": {
                    "value": "self.mask1_firing_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.N_tasks, self.out_ch)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "self.mask2_firing_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.N_tasks, self.out_ch)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "self.n_aggregations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_121": {
                "variable": {
                    "value": "gate_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "self.mask1_firing_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.mask1_firing_freq, torch.zeros((1, self.out_ch))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_145": {
                "variable": {
                    "value": "self.mask2_firing_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.mask2_firing_freq, torch.zeros((1, self.out_ch))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_147": {
                "variable": {
                    "value": "self.n_aggregations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.n_aggregations, torch.zeros(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "variable": {
                    "value": "self.mask1_firing_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.N_tasks, self.out_ch)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "variable": {
                    "value": "self.mask2_firing_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.N_tasks, self.out_ch)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "self.n_aggregations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_303": {
                "variable": {
                    "value": "first_conv_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "first_conv_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(first_conv_masks, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_304": {
                "variable": {
                    "value": "second_conv_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "second_conv_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(second_conv_masks, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_318": {
                "variable": {
                    "value": "after_fbn_main1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "after_fbn_main1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(after_fbn_main1, dim=1)",
                            "Call"
                        ],
                        [
                            "after_fbn_main1 * first_conv_masks",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_331": {
                "variable": {
                    "value": "after_fbn_main2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "after_fbn_main2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(after_fbn_main2, dim=1)",
                            "Call"
                        ],
                        [
                            "after_fbn_main2 + after_bn_opt",
                            "BinOp"
                        ],
                        [
                            "F.relu(after_fbn_main2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_345": {
                "variable": {
                    "value": "after_fbn_main2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "after_fbn_main2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(after_fbn_main2, dim=1)",
                            "Call"
                        ],
                        [
                            "after_fbn_main2 + after_bn_opt",
                            "BinOp"
                        ],
                        [
                            "F.relu(after_fbn_main2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_373": {
                "variable": {
                    "value": "self.main_conv_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_375": {
                "variable": {
                    "value": "self.fbns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[create_freezable_bn(self.out_ch) for _ in range(self.N_tasks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_377": {
                "variable": {
                    "value": "self.gates",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_gate_fc() for _ in range(self.N_tasks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_383": {
                "variable": {
                    "value": "self.channels_firing_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.N_tasks, self.out_ch)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_384": {
                "variable": {
                    "value": "self.n_aggregations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_392": {
                "variable": {
                    "value": "gate_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_411": {
                "variable": {
                    "value": "self.channels_firing_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.channels_firing_freq, torch.zeros((1, self.out_ch))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "self.n_aggregations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.n_aggregations, torch.zeros(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_423": {
                "variable": {
                    "value": "self.channels_firing_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.N_tasks, self.out_ch)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_424": {
                "variable": {
                    "value": "self.n_aggregations",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_544": {
                "variable": {
                    "value": "after_bn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "after_bn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(after_bn, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_554": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(output).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_554": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_574": {
                "variable": {
                    "value": "self.main_conv_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_57": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gate_fc(x)",
                            "Call"
                        ],
                        [
                            "gate_fc(x)",
                            "Call"
                        ]
                    ]
                },
                "memory_format": {
                    "value": "torch.legacy_contiguous_format",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_340": {
                "variable": {
                    "value": "after_bn_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "after_bn_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(after_bn_opt, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_49": {
                "variable": {
                    "value": "norm_class",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_116": {
                "*size": {
                    "value": "self.out_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_118": {
                "*size": {
                    "value": "self.out_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_124": {
                "in_features": {
                    "value": "self.in_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_127": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_ch * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_140": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_262": {
                "variable": {
                    "value": "bernoully_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits, -logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_389": {
                "*size": {
                    "value": "self.out_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_393": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_394": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_395": {
                "in_features": {
                    "value": "self.in_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_398": {
                "in_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_ch",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_409": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_502": {
                "variable": {
                    "value": "bernoully_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits, -logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_577": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_578": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_42": {
                "variable": {
                    "value": "norm_class",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm1d_125": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_144": {
                "*size": {
                    "value": "(1, self.out_ch)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "(1, self.out_ch)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_148": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_317": {
                "input": {
                    "value": "task_fbn_main1(task_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm1d_396": {
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "track_running_stats": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_396": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_412": {
                "*size": {
                    "value": "(1, self.out_ch)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_414": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_540": {
                "input": {
                    "value": "task_fbn(task_input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_100": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_188": {
                "input": {
                    "value": "mask1_stat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask1_firing_freq[task_id].clone()",
                            "Call"
                        ],
                        [
                            "self.mask1_firing_freq[task_id]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.out_ch * self.freezing_method.freeze_top_proc)",
                            "Call"
                        ],
                        [
                            "int(self.out_ch * self.freezing_method.freeze_top_proc)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_190": {
                "input": {
                    "value": "mask1_stat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask1_firing_freq[task_id].clone()",
                            "Call"
                        ],
                        [
                            "self.mask1_firing_freq[task_id]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "n_relevant_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(mask1_stat > threshold).long().sum()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_194": {
                "input": {
                    "value": "mask2_stat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask2_firing_freq[task_id].clone()",
                            "Call"
                        ],
                        [
                            "self.mask2_firing_freq[task_id]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.out_ch * self.freezing_method.freeze_top_proc)",
                            "Call"
                        ],
                        [
                            "int(self.out_ch * self.freezing_method.freeze_top_proc)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_196": {
                "input": {
                    "value": "mask2_stat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask2_firing_freq[task_id].clone()",
                            "Call"
                        ],
                        [
                            "self.mask2_firing_freq[task_id]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "n_relevant_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(mask2_stat > threshold).long().sum()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gumbel_softmax_263": {
                "logits": {
                    "value": "bernoully_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([logits, -logits], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([logits, -logits], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "tau": {
                    "value": "2 / 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_379": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_452": {
                "input": {
                    "value": "gate_stat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels_firing_freq[task_id].clone()",
                            "Call"
                        ],
                        [
                            "self.channels_firing_freq[task_id]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(self.out_ch * self.freezing_method.freeze_top_proc)",
                            "Call"
                        ],
                        [
                            "int(self.out_ch * self.freezing_method.freeze_top_proc)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_454": {
                "input": {
                    "value": "gate_stat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.channels_firing_freq[task_id].clone()",
                            "Call"
                        ],
                        [
                            "self.channels_firing_freq[task_id]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "n_relevant",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(gate_stat > threshold).long().sum()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gumbel_softmax_503": {
                "logits": {
                    "value": "bernoully_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([logits, -logits], dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([logits, -logits], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "tau": {
                    "value": "2 / 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/buffer_container.py": {
        "torch": {}
    },
    "src/freezable_layers.py": {
        "torch": {
            "BatchNorm2d_23": {
                "variable": {
                    "value": "self.norm_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "track_running_stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_200": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.frozen_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.frozen_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_25": {
                "variable": {
                    "value": "self.norm_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "affine",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "momentum": {
                    "value": "track_running_stats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "num_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/lit_models.py": {
        "torch": {
            "cross_entropy_103": {
                "variable": {
                    "value": "head_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.to(cfg.DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_134": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_134": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_135": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['acc'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_135": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_136": {
                "variable": {
                    "value": "avg_head_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['head_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_136": {
                "variable": {
                    "value": "avg_head_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_137": {
                "variable": {
                    "value": "avg_task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['task_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_137": {
                "variable": {
                    "value": "avg_task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_138": {
                "variable": {
                    "value": "avg_sparse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['sparse_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_138": {
                "variable": {
                    "value": "avg_sparse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_162": {
                "variable": {
                    "value": "head_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.to(cfg.DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_174": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_174": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_175": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['acc'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_175": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_186": {
                "variable": {
                    "value": "head_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.to(cfg.DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_201": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_loss'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_201": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_202": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_acc'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_202": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_203": {
                "variable": {
                    "value": "avg_task_clf_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['test_task_clf_acc'] for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_203": {
                "variable": {
                    "value": "avg_task_clf_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_222": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tasked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TaskedDataset(mnist.data / 255.0, mnist.targets)",
                            "Call"
                        ],
                        [
                            "TaskedDataset(mnist.data / 255.0, mnist.targets)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_237": {
                "variable": {
                    "value": "loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tasked",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TaskedDataset(mnist.data / 255.0, mnist.targets)",
                            "Call"
                        ],
                        [
                            "TaskedDataset(mnist.data / 255.0, mnist.targets)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_105": {
                "variable": {
                    "value": "task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "task_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "head_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_166": {
                "variable": {
                    "value": "task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "task_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "head_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_190": {
                "variable": {
                    "value": "task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "task_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "head_idx",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_85": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CHECKPOINTS_ROOT / fname",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_87": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CHECKPOINT_NAME",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_256": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "task_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "task_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "task_idx.to(cfg.DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_91": {
                "f": {
                    "value": "cfg.CHECKPOINTS_ROOT / fname",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_93": {
                "f": {
                    "value": "cfg.CHECKPOINT_NAME",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_117": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_170": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_170": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_194": {
                "input": {
                    "value": "task_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_194": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_195": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_195": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/model.py": {
        "torch": {
            "Sequential_498": {
                "variable": {
                    "value": "self.clf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.N_tasks * self.in_ch, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_523": {
                "variable": {
                    "value": "self.clf[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.N_tasks * self.in_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_527": {
                "variable": {
                    "value": "self.clf[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.N_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_541": {
                "variable": {
                    "value": "self.heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self.create_single_head() for _ in range(self.N_tasks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_546": {
                "variable": {
                    "value": "head_fc",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_86": {
                "variable": {
                    "value": "task_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(task_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_260": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('gated_conv', GatedConvDownBlock(in_ch, out_ch, freezing_method, conv_params=conv_params))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_309": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_380": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "stack_436": {
                "tensors": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.multihead_clf(selected_candidates, head_idxs)",
                            "Call"
                        ],
                        [
                            "self.multihead_clf(selected_candidates, task_idxs)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "out + actual_path_stat",
                            "BinOp"
                        ],
                        [
                            "out * self.lambda_sparse / num_layers",
                            "BinOp"
                        ],
                        [
                            "self.layers(x)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_196": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CHECKPOINTS_ROOT / fname",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_198": {
                "obj": {
                    "value": "self.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "cfg.CHECKPOINT_NAME",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_266": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('gated_conv', GatedConvSameBlock(in_ch, out_ch, freezing_method, conv_params=conv_params))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_320": {
                "*args": {
                    "value": "GatedConvSameBlock(self.in_ch, 64, self.freezing_method, conv_params={'kernel_size': 7, 'padding': 3, 'stride': 2})",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_333": {
                "*args": {
                    "value": "GatedConvResBlock(64, 64, self.freezing_method, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_337": {
                "*args": {
                    "value": "GatedConvResBlock(64, 64, self.freezing_method, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_344": {
                "*args": {
                    "value": "GatedConvResBlock(64, 128, self.freezing_method, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_350": {
                "*args": {
                    "value": "GatedConvResBlock(128, 128, self.freezing_method, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_356": {
                "*args": {
                    "value": "GatedConvResBlock(128, 256, self.freezing_method, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_362": {
                "*args": {
                    "value": "GatedConvResBlock(256, 256, self.freezing_method, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_368": {
                "*args": {
                    "value": "GatedConvResBlock(256, 512, self.freezing_method, stride=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_374": {
                "*args": {
                    "value": "GatedConvResBlock(512, 512, self.freezing_method, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_499": {
                "in_features": {
                    "value": "self.N_tasks * self.in_ch",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_500": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_501": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.N_tasks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_508": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_547": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_548": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_549": {
                "in_features": {
                    "value": "self.in_ch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.out_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_86": {
                "input": {
                    "value": "task_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.task_clf(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "load_202": {
                "f": {
                    "value": "cfg.CHECKPOINTS_ROOT / fname",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cfg.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_205": {
                "f": {
                    "value": "cfg.CHECKPOINT_NAME",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cfg.DEVICE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_272": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('gated_conv', GatedConvResBlock(in_ch, out_ch, freezing_method, stride=stride))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_435": {
                "tensors": {
                    "value": "gates_sparse_objective",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(gated_layer[0].taskwise_sparse_objective)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_573": {
                "tensors": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.clf(x)",
                            "Call"
                        ],
                        [
                            "active_head(x)",
                            "Call"
                        ],
                        [
                            "[head(data[None, ...]) for (head, data) in zip(active_heads, x)]",
                            "ListComp"
                        ],
                        [
                            "torch.stack(logits, dim=1)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_83": {
                "start": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_328": {
                "*args": {
                    "value": "nn.MaxPool2d(kernel_size=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_328": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/test.py": {
        "torch": {
            "save_29": {
                "obj": {
                    "value": "task_incremental_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perform_task_incremental_test(model, cfg.N_TASKS)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cfg.RESULTS_ROOT / 'task_incremental_acc.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "save_80": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{cfg.CHECKPOINTS_ROOT}/after_task_{task_num}.ckpt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "task_incremental_acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "perform_task_incremental_test(model, cfg.N_TASKS)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cfg.RESULTS_ROOT / 'task_incremental_acc.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/train_utils.py": {
        "torch": {
            "stack_64": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['loss'] for x in epoch_logs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_64": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_65": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['acc'] for x in epoch_logs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_65": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_125": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['loss'] for x in epoch_logs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_125": {
                "variable": {
                    "value": "avg_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_126": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['acc'] for x in epoch_logs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_126": {
                "variable": {
                    "value": "avg_acc",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_127": {
                "variable": {
                    "value": "avg_head_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['head_loss'] for x in epoch_logs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_127": {
                "variable": {
                    "value": "avg_head_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_128": {
                "variable": {
                    "value": "avg_task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['task_loss'] for x in epoch_logs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_128": {
                "variable": {
                    "value": "avg_task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_129": {
                "variable": {
                    "value": "avg_sparse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['sparse_loss'] for x in epoch_logs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_129": {
                "variable": {
                    "value": "avg_sparse_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_164": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(N_tasks, N_tasks)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_51": {
                "variable": {
                    "value": "head_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.to(cfg.DEVICE)",
                            "Call"
                        ],
                        [
                            "y.to(cfg.DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_101": {
                "variable": {
                    "value": "head_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.to(cfg.DEVICE)",
                            "Call"
                        ],
                        [
                            "y.to(cfg.DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_55": {
                "variable": {
                    "value": "task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "task_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "head_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_idx.to(cfg.DEVICE)",
                            "Call"
                        ],
                        [
                            "head_idx.to(cfg.DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_103": {
                "variable": {
                    "value": "task_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "task_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "head_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "head_idx.to(cfg.DEVICE)",
                            "Call"
                        ],
                        [
                            "head_idx.to(cfg.DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__113": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "cfg.GRADIENT_CLIP_VAL",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_26": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{cfg.CHECKPOINTS_ROOT}/task_{0}_ep{epoch_num}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_59": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_117": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_117": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/unittests.py": {
        "torch": {
            "rand_12": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_22": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_28": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_34": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_41": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 3, 12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_56": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(32, 3, 12, 12)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "allclose_49": {
                "input": {
                    "value": "old_w[[0, 1, -1]].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "fc.frozen_weight[[0, 1, -1]].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_50": {
                "input": {
                    "value": "old_b[[0, 1, -1]].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "fc.frozen_bias[[0, 1, -1]].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "repeated_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[repr_data[0], repr_data[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "allclose_60": {
                "input": {
                    "value": "old_w[[2, 3]].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "fc.frozen_weight[[2, 3]].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "allclose_61": {
                "input": {
                    "value": "old_b[[2, 3]].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "fc.frozen_bias[[2, 3]].data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_17": {
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_29": {
                "input": {
                    "value": "tc(input)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "input": {
                    "value": "mhc(input, torch.LongTensor([0]))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isclose_138": {
                "input": {
                    "value": "old_out[29]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "new_out[29]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "atol": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {}
    },
    "src/visualization.py": {
        "torch": {
            "stack_88": {
                "tensors": {
                    "value": "layer_stat",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_132": {
                "tensors": {
                    "value": "layer_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_mask.clamp(0, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}