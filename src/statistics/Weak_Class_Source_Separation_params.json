{
    "src/dataset.py": {
        "torch": {
            "SC09Dataset_11": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                }
            },
            "SC09MixtureDataset_72": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.partition": {
                    "value": "partition",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "wave",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.SAMPLE_RATE",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "wave[centered_start:centered_end]",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "load_93": {
                "f": {
                    "value": "os.path.join(self.data_dir, '{:07d}.pth'.format(idx))",
                    "possible_values": []
                }
            },
            "stack_134": {
                "tensors": {
                    "value": "[source['wave'] for source in sources]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "stack_138": {
                "tensors": {
                    "value": "[source['magnitude'] for source in sources]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "src/demo.py": {
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasubset",
                    "possible_values": [
                        [
                            "random.sample(list(dataset), num_examples)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "num_examples",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "src/experiment.py": {
        "torch": {
            "device_122": {
                "variable": {
                    "value": "args.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "is_available_122": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "src/mix.py": {
        "torch": {
            "zeros_57": {
                "variable": {
                    "value": "mix_wave",
                    "possible_values": []
                },
                "*size": {
                    "value": "SC09Dataset.SAMPLE_RATE",
                    "possible_values": []
                }
            },
            "save_88": {
                "obj": {
                    "value": "mixture",
                    "possible_values": [
                        [
                            "{'wave': mix_wave, 'magnitude': mix_magnitude, 'phase': mix_phase, 'labels': mix_labels, 'sources': mix_sources}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(data_dir, '{:07d}.pth'.format(i))",
                    "possible_values": []
                }
            },
            "DataLoader_103": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "SC09Dataset(root=sc_root, partition=partition, labels=[label])",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "num_components",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "possible_values": []
                }
            }
        }
    },
    "src/models.py": {
        "torch": {
            "SC09Encoder_20": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.nf": {
                    "value": "nf",
                    "possible_values": []
                },
                "self.t": {
                    "value": "t",
                    "possible_values": []
                },
                "self.f": {
                    "value": "f",
                    "possible_values": []
                },
                "Conv2d_27": {
                    "variable": {
                        "value": "self.conv_1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.nf",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(1, self.f)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(1, 1)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(0, 0)",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_28": {
                    "variable": {
                        "value": "self.batch_norm_1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "self.nf",
                        "possible_values": []
                    }
                },
                "Conv2d_29": {
                    "variable": {
                        "value": "self.conv_2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.nf",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.nf",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(4, 1)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(2, 1)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(1, 0)",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_30": {
                    "variable": {
                        "value": "self.batch_norm_2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "self.nf",
                        "possible_values": []
                    }
                },
                "Conv2d_31": {
                    "variable": {
                        "value": "self.conv_3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.nf",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.nf * 2",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(4, 1)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(2, 1)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(1, 0)",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_32": {
                    "variable": {
                        "value": "self.batch_norm_3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "self.nf * 2",
                        "possible_values": []
                    }
                },
                "Linear_33": {
                    "variable": {
                        "value": "self.linear_4",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.nf * 2 * self.t // 4",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.nf * 4",
                        "possible_values": []
                    }
                },
                "BatchNorm1d_34": {
                    "variable": {
                        "value": "self.batch_norm_4",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "self.nf * 4",
                        "possible_values": []
                    }
                },
                "Linear_35": {
                    "variable": {
                        "value": "self.linear_51",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.nf * 4",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "nz",
                        "possible_values": []
                    }
                },
                "Linear_36": {
                    "variable": {
                        "value": "self.linear_52",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.nf * 4",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "nz",
                        "possible_values": []
                    }
                }
            },
            "SC09Decoder_52": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.nf": {
                    "value": "nf",
                    "possible_values": []
                },
                "self.t": {
                    "value": "t",
                    "possible_values": []
                },
                "self.f": {
                    "value": "f",
                    "possible_values": []
                },
                "Linear_59": {
                    "variable": {
                        "value": "self.linear_1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "nz",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.nf * 2 * self.t // 4",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_60": {
                    "variable": {
                        "value": "self.batch_norm_1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "self.nf * 2",
                        "possible_values": []
                    }
                },
                "ConvTranspose2d_61": {
                    "variable": {
                        "value": "self.conv_trans_2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.nf * 2",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.nf",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(4, 1)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(2, 1)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(1, 0)",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_62": {
                    "variable": {
                        "value": "self.batch_norm_2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "self.nf",
                        "possible_values": []
                    }
                },
                "ConvTranspose2d_63": {
                    "variable": {
                        "value": "self.conv_trans_3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.nf",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.nf",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(4, 1)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(2, 1)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(1, 0)",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_64": {
                    "variable": {
                        "value": "self.batch_norm_3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "self.nf",
                        "possible_values": []
                    }
                },
                "ConvTranspose2d_65": {
                    "variable": {
                        "value": "self.conv_trans_4",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.nf",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "1",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(1, self.f)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "(1, 1)",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "(0, 0)",
                        "possible_values": []
                    }
                }
            },
            "relu_42": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm_1(self.conv_1(h))",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm_2(self.conv_2(h))",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm_3(self.conv_3(h))",
                    "possible_values": []
                }
            },
            "relu_46": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm_4(self.linear_4(h))",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm_1(h)",
                    "possible_values": []
                }
            },
            "relu_72": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm_2(self.conv_trans_2(h))",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "h",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm_3(self.conv_trans_3(h))",
                    "possible_values": []
                }
            },
            "empty_95": {
                "variable": {
                    "value": "self.batch_x_mix",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "empty_96": {
                "variable": {
                    "value": "self.batch_x_src",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "empty_98": {
                "variable": {
                    "value": "self.batch_q_mu",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "empty_99": {
                "variable": {
                    "value": "self.batch_q_logvar",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "empty_100": {
                "variable": {
                    "value": "self.batch_p_x_src",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "possible_values": []
                }
            },
            "load_104": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": []
                }
            },
            "exp_207": {
                "variable": {
                    "value": "std",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "possible_values": []
                }
            },
            "randn_like_208": {
                "variable": {
                    "value": "eps",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_75": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv_trans_4(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_140": {
                "obj": {
                    "value": "checkpoint",
                    "possible_values": [
                        [
                            "torch.load(path)",
                            "Call"
                        ],
                        [
                            "{'num_filters': self.num_filters, 'latent_size': self.latent_size, 'num_classes': self.num_classes, 'num_sources': self.num_sources, 'supervision': self.supervision, 'reparameterize': self.reparameterize, 'net_q_state_dict_list': [net_q.state_dict() for net_q in self.net_q_list], 'net_p_state_dict_list': [net_p.state_dict() for net_p in self.net_p_list]}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "path",
                    "possible_values": []
                }
            }
        }
    },
    "src/test.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "SC09MixtureDataset(root=sc09_mixture_root, partition=self.partition)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "size",
                    "possible_values": [
                        [
                            "len(dataset)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "device_77": {
                "variable": {
                    "value": "args.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "save_63": {
                "obj": {
                    "value": "results",
                    "possible_values": [
                        [
                            "bss_eval(ref_waves, pred_waves)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(test_base, filename)",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "self.train_dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "self.optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': self.nvae.net_q_params}, {'params': self.nvae.net_p_params}]",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "possible_values": []
                }
            },
            "DataLoader_174": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "device_207": {
                "variable": {
                    "value": "args.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "mean_167": {
                "input": {
                    "value": "torch.sum(pointwise_loss, dim=(2, 3))",
                    "possible_values": []
                }
            },
            "mean_149": {
                "input": {
                    "value": "torch.sum(pointwise_kl, dim=2)",
                    "possible_values": []
                }
            },
            "sum_167": {
                "input": {
                    "value": "pointwise_loss",
                    "possible_values": [
                        [
                            "batch_p_x - batch_x * batch_p_x.log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "possible_values": []
                }
            },
            "mean_169": {
                "input": {
                    "value": "torch.sum(pointwise_loss, dim=(1, 2))",
                    "possible_values": []
                }
            },
            "is_available_207": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_149": {
                "input": {
                    "value": "pointwise_kl",
                    "possible_values": [
                        [
                            "-0.5 * (1 + self.nvae.batch_q_logvar - self.nvae.batch_q_mu.pow(2) - self.nvae.batch_q_logvar.exp())",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "sum_169": {
                "input": {
                    "value": "pointwise_loss",
                    "possible_values": [
                        [
                            "batch_p_x - batch_x * batch_p_x.log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2)",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "manual_seed_14": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "123",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_15": {
                "seed": {
                    "value": "seed",
                    "possible_values": [
                        [
                            "123",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    }
}